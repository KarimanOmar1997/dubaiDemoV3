/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import"../core/lang.js";import{L as t}from"./Logger.js";import{f as e}from"./maybe.js";import{B as r}from"./VertexArrayObject.js";import{g as i,T as s,w as n}from"./Texture.js";import{R as h,f as a,g as o,h as c,i as u,P as f,U as l,d as _,j as d,k as m,l as T,m as p,n as E,o as x}from"./enums.js";import{F as g}from"./FBOAttachmentType.js";class b{constructor(t,e=0,r=e){this.internalFormat=t,this.width=e,this.height=r,this.multisampled=!1,this.samples=1}}class R{constructor(t,e){this._context=t,this._descriptor=e,this.type=g.Renderbuffer,this._context.instanceCounter.increment(h.Renderbuffer,this);const r=this._context.gl;this.glName=r.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:i,height:s,internalFormat:n,multisampled:a}=e;a?r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,n,i,s):r.renderbufferStorage(r.RENDERBUFFER,n,i,s),this._context.bindRenderbuffer(null)}get descriptor(){return this._descriptor}get samples(){const t=this._descriptor.samples,e=this._context.parameters.maxSamples;return t?Math.min(t,e):e}get usedMemory(){return(t=this._descriptor).width<=0||t.height<=0||null==t.internalFormat?0:t.width*t.height*i(t.internalFormat);var t}resize(t,e){const r=this._descriptor;if(r.width===t&&r.height===e)return;r.width=t,r.height=e;const i=this._context.gl;this._context.bindRenderbuffer(this),r.multisampled?i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,r.internalFormat,r.width,r.height):i.renderbufferStorage(i.RENDERBUFFER,r.internalFormat,r.width,r.height),this._context.bindRenderbuffer(null)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(h.Renderbuffer,this),this._context=null)}}class F{constructor(t,e,r){if(this._context=t,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,t.instanceCounter.increment(h.FramebufferObject,this),null!=e){const r=S(e)?e:new s(t,e);this._colorAttachments.set(a,r),this._validateTextureDescriptor(r.descriptor),this._validateColorAttachmentPoint(a)}var i;if(null!=r)if(S(i=r)||function(t){return A(t)===g.TextureDescriptor}(i))this._depthStencilTexture=S(r)?r:new s(t,r),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const e=function(t){return A(t)===g.Renderbuffer}(r)?r:new R(t,r);this._depthStencilBuffer=e,this._validateRenderbufferDescriptor(e.descriptor)}}dispose(){const{_colorAttachments:t,_glName:e}=this;if(0===t.size&&!this._depthStencilBuffer&&!this._depthStencilTexture&&!e)return;const{_context:r}=this,i=r.getBoundFramebufferObject();t.forEach(((t,e)=>this.detachColorTexture(e)?.dispose())),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),r.gl.deleteFramebuffer(e),this._glName=null,r.bindFramebuffer(i===this?null:i),r.instanceCounter.decrement(h.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(a)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){const t=this._colorAttachments.get(a)??this._depthStencilTexture??this._depthStencilBuffer;return t?.descriptor?.width??0}get height(){const t=this._colorAttachments.get(a)??this._depthStencilTexture??this._depthStencilBuffer;return t?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce(((t,[e,r])=>t+r.usedMemory),this.depthStencil?.usedMemory??0)}static{this._MAX_COLOR_ATTACHMENTS=-1}getColorTexture(t){const e=this._colorAttachments.get(t);return e&&S(e)?e:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(t,e=a){if(!t)return;this._validateColorAttachmentPoint(e);const{descriptor:r}=t;this._validateTextureDescriptor(r),this.detachColorTexture(e)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,e)),this._colorAttachments.set(e,t)}detachColorTexture(t=a){const e=this._colorAttachments.get(t);if(e)return this._initialized&&this._context.temporaryBindFramebufferObject(this,(()=>{this._framebufferTexture2D(null,t)})),this._colorAttachments.delete(t),e}setColorTextureTarget(t,e=a,r=0){const i=this._colorAttachments.get(e);i&&(t===o.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(i.glName,e,c.FRAMEBUFFER,0,r):this._framebufferTexture2D(i.glName,e,t,c.FRAMEBUFFER,0))}attachDepthStencil(t){if(t)switch(t.type){case g.Texture:return this._attachDepthStencilTexture(t);case g.Renderbuffer:return this._attachDepthStencilBuffer(t)}}_attachDepthStencilTexture(t){if(null==t)return;const{descriptor:e}=t,{pixelFormat:r,dataType:i}=e;r===u.DEPTH_STENCIL||r===u.DEPTH_COMPONENT?r!==u.DEPTH_STENCIL||i===f.UNSIGNED_INT_24_8?r!==u.DEPTH_COMPONENT||i===f.UNSIGNED_INT||i===f.UNSIGNED_SHORT?(this._validateTextureDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,B(r))),this._depthStencilTexture?.dispose(),this._depthStencilTexture=t):console.error("Depth texture must have data type of UNSIGNED_INT or UNSIGNED_SHORT!"):console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"):console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!")}detachDepthStencilTexture(){const t=this._depthStencilTexture;return t&&this._initialized&&this._context.temporaryBindFramebufferObject(this,(()=>{this._framebufferTexture2D(null,B(t.descriptor.pixelFormat))})),this._depthStencilTexture=null,t}_attachDepthStencilBuffer(t){if(null==t)return;const e=t.descriptor;if(this._validateRenderbufferDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const{gl:r}=this._context,i=this._getGLAttachmentPoint(e);r.framebufferRenderbuffer(c.FRAMEBUFFER,i,r.RENDERBUFFER,t.glName)}this._depthStencilBuffer=t}detachDepthStencilBuffer(){const t=this._depthStencilBuffer;if(t&&this._initialized){const{_context:e}=this,r=e.getBoundFramebufferObject();e.bindFramebuffer(this);const{gl:i}=e,s=this._getGLAttachmentPoint(t.descriptor);i.framebufferRenderbuffer(c.FRAMEBUFFER,s,i.RENDERBUFFER,null),e.bindFramebuffer(r)}return this._depthStencilBuffer=null,t}invalidateAttachments(t){const{_context:e}=this;e.temporaryBindFramebufferObject(this,(()=>e.gl.invalidateFramebuffer(c.FRAMEBUFFER,t)),!0)}copyToTexture(t,e,r,i,n,h,a){(t<0||e<0||n<0||h<0)&&console.error("Offsets cannot be negative!"),(r<=0||i<=0)&&console.error("Copy width and height must be greater than zero!");const c=a.descriptor;a.descriptor.target!==o.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(null==c?.width||null==c?.height||t+r>this.width||e+i>this.height||n+r>c.width||h+i>c.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,f=u.bindTexture(a,s.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(s.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(o.TEXTURE_2D,0,n,h,t,e,r,i),u.bindTexture(f,s.TEXTURE_UNIT_FOR_UPDATES)}readPixels(t,e,r,i,s,n,h){(r<=0||i<=0)&&console.error("Copy width and height must be greater than zero!"),h||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(t,e,r,i,s,n,h)}async readPixelsAsync(t,e,i,s,n,h,a){const{gl:o}=this._context,c=r.createPixelPack(this._context,l.STREAM_READ,a.byteLength);this._context.bindBuffer(c);const u=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),o.readPixels(t,e,i,s,n,h,0),this._context.unbindBuffer(_.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(u),await c.getSubDataAsync(a),c.dispose()}resize(t,e){if(this.width===t&&this.height===e)return;const r={width:t,height:e};D(r,this._context.parameters.maxTextureSize),this._colorAttachments.forEach((t=>t.resize(r.width,r.height))),this._depthStencilTexture?.resize(r.width,r.height),this._initialized&&(D(r,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(r.width,r.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(t=c.FRAMEBUFFER){const{gl:e}=this._context;if(this._initialized)return void e.bindFramebuffer(t,this.glName);this._glName&&e.deleteFramebuffer(this._glName);const r=e.createFramebuffer();if(e.bindFramebuffer(t,r),this._colorAttachments.forEach(((e,r)=>{const i=N(e);i===o.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(e.glName,r,t,0,0):this._framebufferTexture2D(e.glName,r,i,t)})),this._depthStencilBuffer){const r=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(t,r,e.RENDERBUFFER,this._depthStencilBuffer.glName)}else if(this._depthStencilTexture){const e=B(this._depthStencilTexture.descriptor.pixelFormat);this._framebufferTexture2D(this._depthStencilTexture.glName,e,N(this._depthStencilTexture),t)}n()&&e.checkFramebufferStatus(t)!==e.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=r,this._initialized=!0}_framebufferTexture2D(t,e=a,r=o.TEXTURE_2D,i=c.FRAMEBUFFER,s=0){this._context.gl.framebufferTexture2D(i,e,r,t,s)}_framebufferTextureLayer(t,e=a,r=c.FRAMEBUFFER,i=0,s=0){this._context.gl.framebufferTextureLayer(r,e,t,i,s)}_disposeDepthStencilAttachments(){const t=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const e=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(c.FRAMEBUFFER,e,t.RENDERBUFFER,null)}this._depthStencilBuffer=e(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,B(this._depthStencilTexture.descriptor.pixelFormat))),this._depthStencilTexture=e(this._depthStencilTexture))}_validateTextureDescriptor(t){t.target!==o.TEXTURE_2D&&t.target!==o.TEXTURE_CUBE_MAP&&t.target!==o.TEXTURE_2D_ARRAY&&console.error("Texture type must be TEXTURE_2D, TEXTURE_2D_ARRAY or TEXTURE_CUBE_MAP!"),D(t,this._context.parameters.maxTextureSize),this._validateBufferDimensions(t)}_validateRenderbufferDescriptor(t){D(t,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(t)}_validateBufferDimensions(t){t.width<=0&&(t.width=this.width),t.height<=0&&(t.height=this.height),this.width>0&&this.height>0&&(this.width===t.width&&this.height===t.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(t){switch(t.internalFormat){case E.DEPTH_COMPONENT16:case E.DEPTH_COMPONENT24:case E.DEPTH_COMPONENT32F:return x;case T.DEPTH24_STENCIL8:case T.DEPTH32F_STENCIL8:return p;case d.STENCIL_INDEX8:return m}}_validateColorAttachmentPoint(e){if(-1===F._MAX_COLOR_ATTACHMENTS){const{gl:t}=this._context;F._MAX_COLOR_ATTACHMENTS=t.getParameter(t.MAX_COLOR_ATTACHMENTS)}const r=e-a;r+1>F._MAX_COLOR_ATTACHMENTS&&t.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${r+1}. Implementation supports up to ${F._MAX_COLOR_ATTACHMENTS} color attachments`)}}function S(t){return A(t)===g.Texture}function A(t){return null!=t&&"type"in t?t.type:null}function D(e,r){const i=Math.max(e.width,e.height);if(i>r){t.getLogger("esri.views.webgl.FramebufferObject").warnOnce(`Resizing FBO attachment size ${e.width}x${e.height} to device limit ${r}`);const s=r/i;return e.width=Math.round(e.width*s),e.height=Math.round(e.height*s),!1}return!0}function N(t){return t.descriptor.target===o.TEXTURE_CUBE_MAP?o.TEXTURE_CUBE_MAP_POSITIVE_X:t.descriptor.target===o.TEXTURE_2D_ARRAY?o.TEXTURE_2D_ARRAY:o.TEXTURE_2D}function B(t){return t===u.DEPTH_COMPONENT?x:p}export{F,R,b as a,D as e};
