/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import r from"../geometry/Extent.js";import t from"../geometry/Point.js";import o from"../geometry/operators/support/GeographicTransformation.js";import s from"../layers/support/PixelBlock.js";import{d as e,R as i}from"./RasterSymbolizer.js";import{c as m,s as p,i as a,m as l,b as n,d as c,e as j}from"./vectorFieldUtils.js";import{c as u}from"./rasterFunctionHelper.js";import{l as f,i as y}from"./rasterProjectionHelper.js";import{g as d,h as S}from"./stretchUtils.js";import{B as g,P as h,G as x}from"./GCSShiftTransform.js";import{_ as O}from"./tslib.es6.js";import"./Logger.js";import"../core/lang.js";import"../core/Error.js";import{e as U}from"./enumeration.js";import{subclass as b}from"../core/accessorSupport/decorators/subclass.js";import{c as N}from"./dataUtils.js";import"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./MapUtils.js";import"./get.js";import"./utils.js";import"./handleUtils.js";import"./metadata.js";import"../config.js";import"../geometry/Geometry.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"./Lifecycle.js";import"./ObjectPool.js";import"./ObservableBase.js";import"./tracking.js";import"./watch.js";import"../core/scheduling.js";import"./nextTick.js";import"./PooledArray.js";import"../core/promiseUtils.js";import"./events.js";import"./SetUtils.js";import"./SimpleTrackingTarget.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./unitUtils.js";import"./jsonMap.js";import"./pe.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"./jsonUtils.js";import"./persistableUrlUtils.js";import"./writer.js";import"./Warning.js";import"../geometry/support/webMercatorUtils.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/operators/support/GeographicTransformationStep.js";import"./pixelRangeUtils.js";import"./_commonjsHelpers.js";import"../layers/support/RasterInfo.js";import"../layers/support/RasterBandInfo.js";import"./rasterEnums.js";import"../layers/support/RasterSensorInfo.js";import"./colorRampUtils.js";import"../Color.js";import"./colorUtils2.js";import"./mathUtils.js";import"./colorUtils.js";import"./vec4.js";import"./common.js";import"./vec4f64.js";import"../layers/support/rasterFunctionConstants.js";import"../geometry/support/jsonUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./Axis.js";import"./extentUtils.js";import"./boundsUtils.js";import"./aaBoundingRect.js";import"../geometry/Polyline.js";import"./typeUtils2.js";import"./clipUtils.js";import"./colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"../layers/support/Field.js";import"./domains.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"./fieldType.js";import"./focalStatUtils.js";import"./projectionUtils.js";import"./SimpleObservable.js";import"./vec3f64.js";import"./projectBuffer.js";import"./geodesicConstants.js";import"./projectXYZToVector.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"./zscale.js";import"./stretchRendererUtils.js";var J;let P=J=class extends g{constructor(){super(...arguments),this.type="identity"}clone(){return new J}};O([U({IdentityXform:"identity"})],P.prototype,"type",void 0),P=J=O([b("esri.layers.support.rasterTransforms.IdentityTransform")],P);const B={GCSShiftXform:x,IdentityXform:P,PolynomialXform:h};class v{convertVectorFieldData(r){const t=s.fromJSON(r.pixelBlock),o=m(t,r.type);return Promise.resolve(null!=o?o.toJSON():null)}computeStatisticsHistograms(r){const t=s.fromJSON(r.pixelBlock),o=d(t);return Promise.resolve(o)}async decode(r){const t=await e(r.data,r.options);return t&&t.toJSON()}symbolize(t){t.pixelBlock=s.fromJSON(t.pixelBlock),t.extent=t.extent?r.fromJSON(t.extent):null;const o=this.symbolizer.symbolize(t);return Promise.resolve(null!=o?o.toJSON():null)}async updateSymbolizer(r){this.symbolizer=i.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=u(r.rasterFunctionJSON)}async process(o){const e=this.rasterFunction.process({extent:r.fromJSON(o.extent),primaryPixelBlocks:o.primaryPixelBlocks.map((r=>null!=r?s.fromJSON(r):null)),primaryPixelSizes:o.primaryPixelSizes?.map((r=>null!=r?t.fromJSON(r):null)),primaryRasterIds:o.primaryRasterIds});return null!=e?e.toJSON():null}stretch(r){const t=this.symbolizer.simpleStretch(s.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(r){const t=S(s.fromJSON(r.srcPixelBlock));return Promise.resolve(t)}split(r){const t=p(s.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel??0,!1===r.useBilinear);return t&&t.forEach(((r,o)=>{t.set(o,r?.toJSON())})),Promise.resolve(t)}clipTile(r){const t=s.fromJSON(r.pixelBlock),o=a({...r,pixelBlock:t});return Promise.resolve(o?.toJSON())}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map((r=>r?new s(r):null)),o=l(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let e,i=o;return r.coefs&&(i=n(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(e=c(r.destDimension,r.gcsGrid),i=j(i,r.isUV?"vector-uv":"vector-magdir",e)),{pixelBlock:i?.toJSON(),localNorthDirections:e}}async createFlowMesh(r,t){const o={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:e}=await N(r.meshType,r.simulationSettings,o,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:e.buffer},transferList:[s.buffer,e.buffer]}}async getProjectionOffsetGrid(t){const s=r.fromJSON(t.projectedExtent),e=r.fromJSON(t.srcBufferExtent);let i=null;t.datumTransformationSteps?.length&&(i=new o({steps:t.datumTransformationSteps})),await f();const m=t.rasterTransform?function(r){const t=r?.type;if(!t)return null;const o=B[r?.type];if(o){const t=new o;return t.read(r),t}return null}(t.rasterTransform):null;return y({...t,projectedExtent:s,srcBufferExtent:e,datumTransformation:i,rasterTransform:m})}}export{v as default};
