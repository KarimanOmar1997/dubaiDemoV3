/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import e from"../core/Error.js";import{h as t}from"../core/lang.js";import{L as r}from"./Logger.js";import{a as i}from"./maybe.js";import{throwIfAborted as s,isAbortError as a}from"../core/promiseUtils.js";import{E as o,s as n,S as c,l,n as p,c as h,j as m,d as u,g as d,P as _,b as E,T,i as R,R as g,t as A}from"./enums.js";import{F as f}from"./FBOAttachmentType.js";import{g as x}from"./getDataTypeBytes.js";const M=!!t("enable-feature:webgl-debug");function I(){return M}function b(){return M}function D(t,i=I()){if(i){const i=t.getError();if(i){const t=function(e){switch(e){case o.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case o.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case o.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case o.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case o.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case o.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(i),s=(new Error).stack;r.getLogger("esri.views.webgl.checkWebGLError").error(new e("webgl-error","WebGL error occurred",{message:t,stack:s}))}}}function S(e){const t=e.gl;switch(t.getError()){case t.NO_ERROR:return null;case t.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case t.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case t.INVALID_OPERATION:return"The specified command is not allowed for the current state";case t.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case t.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case t.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function w(e,t){return(e.vertexBuffers.get(t)?.usedMemory??0)/e.layout.get(t)[0].stride}function N(e,t,r,i,s=0){const a=e.gl;e.bindBuffer(r);for(const r of i){const i=t.get(r.name);if(null==i){console.warn(`There is no location for vertex attribute '${r.name}' defined.`);continue}const o=s*r.stride;if(r.count<=4)a.vertexAttribPointer(i,r.count,r.type,r.normalized,r.stride,r.offset+o),a.enableVertexAttribArray(i),r.divisor>0&&e.gl.vertexAttribDivisor(i,r.divisor);else if(9===r.count)for(let t=0;t<3;t++)a.vertexAttribPointer(i+t,3,r.type,r.normalized,r.stride,r.offset+12*t+o),a.enableVertexAttribArray(i+t),r.divisor>0&&e.gl.vertexAttribDivisor(i+t,r.divisor);else if(16===r.count)for(let t=0;t<4;t++)a.vertexAttribPointer(i+t,4,r.type,r.normalized,r.stride,r.offset+16*t+o),a.enableVertexAttribArray(i+t),r.divisor>0&&e.gl?.vertexAttribDivisor(i+t,r.divisor);else console.error("Unsupported vertex attribute element count: "+r.count);if(I()){const t=S(e),i=x(r.type),s=r.offset,a=Math.round(i/s)!==i/s?`. Offset not a multiple of stride. DataType requires ${i} bytes, but descriptor has an offset of ${s}`:"";t&&console.error(`Unable to bind vertex attribute "${r.name}" with baseInstanceOffset ${o}${a}:`,t,r)}}}function P(e,t,r,i){const s=e.gl;e.bindBuffer(r);for(const r of i){const i=t.get(r.name);if(r.count<=4)s.disableVertexAttribArray(i),r.divisor&&r.divisor>0&&e.gl?.vertexAttribDivisor(i,0);else if(9===r.count)for(let t=0;t<3;t++)s.disableVertexAttribArray(i+t),r.divisor&&r.divisor>0&&e.gl?.vertexAttribDivisor(i+t,0);else if(16===r.count)for(let t=0;t<4;t++)s.disableVertexAttribArray(i+t),r.divisor&&r.divisor>0&&e.gl?.vertexAttribDivisor(i+t,0);else console.error("Unsupported vertex attribute element count: "+r.count)}e.unbindBuffer(u.ARRAY_BUFFER)}function U(e){switch(e){case h.ALPHA:case h.LUMINANCE:case h.RED:case h.RED_INTEGER:case c.R8:case c.R8I:case c.R8UI:case c.R8_SNORM:case m.STENCIL_INDEX8:return 1;case h.LUMINANCE_ALPHA:case h.RG:case h.RG_INTEGER:case c.RGBA4:case c.R16F:case c.R16I:case c.R16UI:case c.RG8:case c.RG8I:case c.RG8UI:case c.RG8_SNORM:case c.RGB565:case c.RGB5_A1:case p.DEPTH_COMPONENT16:return 2;case h.RGB:case h.RGB_INTEGER:case c.RGB8:case c.RGB8I:case c.RGB8UI:case c.RGB8_SNORM:case c.SRGB8:case p.DEPTH_COMPONENT24:return 3;case h.RGBA:case h.RGBA_INTEGER:case c.RGBA8:case c.R32F:case c.R11F_G11F_B10F:case c.RG16F:case c.R32I:case c.R32UI:case c.RG16I:case c.RG16UI:case c.RGBA8I:case c.RGBA8UI:case c.RGBA8_SNORM:case c.SRGB8_ALPHA8:case c.RGB9_E5:case c.RGB10_A2UI:case c.RGB10_A2:case p.DEPTH_COMPONENT32F:case l.DEPTH24_STENCIL8:return 4;case l.DEPTH32F_STENCIL8:return 5;case c.RGB16F:case c.RGB16I:case c.RGB16UI:return 6;case c.RG32F:case c.RG32I:case c.RG32UI:case c.RGBA16F:case c.RGBA16I:case c.RGBA16UI:return 8;case c.RGB32F:case c.RGB32I:case c.RGB32UI:return 12;case c.RGBA32F:case c.RGBA32I:case c.RGBA32UI:return 16;case n.COMPRESSED_RGB_S3TC_DXT1_EXT:case n.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case n.COMPRESSED_RGBA_S3TC_DXT3_EXT:case n.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case n.COMPRESSED_R11_EAC:case n.COMPRESSED_SIGNED_R11_EAC:case n.COMPRESSED_RGB8_ETC2:case n.COMPRESSED_SRGB8_ETC2:case n.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case n.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case n.COMPRESSED_RG11_EAC:case n.COMPRESSED_SIGNED_RG11_EAC:case n.COMPRESSED_RGBA8_ETC2_EAC:case n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}class F{constructor(e=0,t=e){this.width=e,this.height=t,this.type=f.TextureDescriptor,this.target=d.TEXTURE_2D,this.pixelFormat=h.RGBA,this.dataType=_.UNSIGNED_BYTE,this.samplingMode=E.LINEAR,this.wrapMode=T.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.compareEnabled=!1,this.linearFilterDepth=!1,this.depth=1,this.isImmutable=!1}}const G=()=>r.getLogger("esri/views/webgl/textureUtils");function y(e){const{width:t,height:r,depth:i}=e;(null!=t&&t<0||null!=r&&r<0||null!=i&&i<0)&&G().error("Negative dimension parameters are not allowed!");const{internalFormat:s}=e;if(s&&(O(s)||C(s))){const{linearFilterDepth:t,compareEnabled:r,samplingMode:i,hasMipmap:s}=e;s&&G().error("Depth textures cannot have mipmaps"),t?i!==E.LINEAR&&i!==E.NEAREST&&G().error("Depth textures cannot sample mipmaps"):(i!==E.NEAREST&&G().error("Depth textures without filtering must use NEAREST filtering"),r&&G().error("Depth textures without filtering cannot use compare function"))}}function O(e){return e in p}function C(e){return e in l}function B(e){return null!=e&&e in n}function L(e){return null!=e&&"type"in e&&"compressed"===e.type}function v(e){return null!=e&&!L(e)&&!function(e){return null!=e&&"byteLength"in e}(e)}function X(e){return e===d.TEXTURE_3D||e===d.TEXTURE_2D_ARRAY}function W(e,t,r,i=1){let s=Math.max(t,r);return e===d.TEXTURE_3D&&(s=Math.max(s,i)),Math.floor(Math.log2(s))+1}function H(t){if(null!=t.internalFormat)return t.internalFormat;switch(t.dataType){case _.FLOAT:switch(t.pixelFormat){case h.RGBA:return c.RGBA32F;case h.RGB:return c.RGB32F;default:throw new e("texture:unknown-format","Unable to derive format")}case _.UNSIGNED_BYTE:switch(t.pixelFormat){case h.RGBA:return c.RGBA8;case h.RGB:return c.RGB8}}const{pixelFormat:r}=t;return t.internalFormat=r===R.DEPTH_STENCIL?l.DEPTH24_STENCIL8:r===R.DEPTH_COMPONENT?p.DEPTH_COMPONENT24:r,t.internalFormat}class V extends F{constructor(e,t){switch(super(),this.context=e,Object.assign(this,t),this.internalFormat){case c.R16F:case c.R32F:case c.R8_SNORM:case c.R8:this.pixelFormat=h.RED;break;case c.R8I:case c.R8UI:case c.R16I:case c.R16UI:case c.R32I:case c.R32UI:this.pixelFormat=h.RED_INTEGER}}static validate(e,t){return new V(e,t)}}const j=()=>r.getLogger("esri/views/webgl/Texture");let k=class t{static{this.TEXTURE_UNIT_FOR_UPDATES=0}static{this.compressionWorkerHandle=null}constructor(t,r=null,i=null){if(this.type=f.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._shadowFilterDirty=!1,this._wasImmutablyAllocated=!1,"context"in t)this._descriptor=t,i=r;else{const i=V.validate(t,r);if(!i)throw new e("texture:invalid-descriptor","Texture descriptor invalid");this._descriptor=i}this._descriptor.target===d.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return(e=this._descriptor).width<=0||e.height<=0||e.depth<=0?0:Math.round(e.width*e.height*e.depth*(e.hasMipmap?4/3:1)*(null==e.internalFormat?4:U(e.internalFormat))*(e.target===d.TEXTURE_CUBE_MAP?6:1));var e}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty||this._shadowFilterDirty}get hasWebGLTextureObject(){return!!this._glName}dispose(){this.abortCompression(),this._descriptor.context.gl&&this.hasWebGLTextureObject&&(this._descriptor.context.instanceCounter.decrement(g.Texture,this),this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(t,r){const i=this._descriptor;if(i.width!==t||i.height!==r){if(this._wasImmutablyAllocated)throw new e("texture:immutable-resize","Immutable textures can't be resized!");i.width=t,i.height=r,this._descriptor.target===d.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}enableCompression(e){this._descriptor.compress=e}disableCompression(){this._descriptor.compress=void 0}setData(e){this.abortCompression(),!L(e)&&this._descriptor.internalFormat&&this._descriptor.internalFormat in n&&(this._descriptor.internalFormat=void 0),this._setData(e),!L(e)&&this._descriptor.compress&&this._compressOnWorker(e)}updateData(r,i,s,a,o,n,c=0){n||j().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||j().error("An attempt to update uninitialized texture!");const l=this._descriptor;l.internalFormat=H(l);const{context:p,pixelFormat:h,dataType:m,target:u,isImmutable:d}=l;if(d&&!this._wasImmutablyAllocated)throw new e("texture:uninitialized","Cannot update immutable texture before allocation!");const _=p.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES,!0);(i<0||s<0||i+a>l.width||s+o>l.height)&&j().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:E}=p;c&&(a&&o||j().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"),E.pixelStorei(E.UNPACK_SKIP_ROWS,c)),v(n)?E.texSubImage2D(u,r,i,s,a,o,h,m,n):L(n)?E.compressedTexSubImage2D(u,r,i,s,a,o,l.internalFormat,n.levels[r]):E.texSubImage2D(u,r,i,s,a,o,h,m,n),c&&E.pixelStorei(E.UNPACK_SKIP_ROWS,0),p.bindTexture(_,t.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(r,i,s,a,o,n,c,l){l||j().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||j().error("An attempt to update an uninitialized texture!");const p=this._descriptor;p.internalFormat=H(p);const{context:h,pixelFormat:m,dataType:u,isImmutable:d,target:_}=p;if(d&&!this._wasImmutablyAllocated)throw new e("texture:uninitialized","Cannot update immutable texture before allocation!");X(_)||j().warn("Attempting to set 3D texture data on a non-3D texture");const E=h.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),(i<0||s<0||a<0||i+o>p.width||s+n>p.height||a+c>p.depth)&&j().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:T}=h;if(L(l))l=l.levels[r],T.compressedTexSubImage3D(_,r,i,s,a,o,n,c,p.internalFormat,l);else{const e=l;T.texSubImage3D(_,r,i,s,a,o,n,c,m,u,e)}h.bindTexture(E,t.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const r=this._descriptor;if(0===r.width||0===r.height)return;if(!r.hasMipmap){if(this._wasImmutablyAllocated)throw new e("texture:immutable-change","Cannot add mipmaps to immutable texture after allocation");r.hasMipmap=!0,this._samplingModeDirty=!0,y(r)}r.samplingMode===E.LINEAR?(this._samplingModeDirty=!0,r.samplingMode=E.LINEAR_MIPMAP_NEAREST):r.samplingMode===E.NEAREST&&(this._samplingModeDirty=!0,r.samplingMode=E.NEAREST_MIPMAP_NEAREST);const i=this._descriptor.context.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(r.target),this._descriptor.context.bindTexture(i,t.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const t=this._descriptor;if(t.hasMipmap){if(this._wasImmutablyAllocated)throw new e("texture:immutable-change","Cannot delete mipmaps to immutable texture after allocation");t.hasMipmap=!1,this._samplingModeDirty=!0,y(t)}t.samplingMode===E.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,t.samplingMode=E.LINEAR):t.samplingMode===E.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=E.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,y(this._descriptor),this._wrapModeDirty=!0)}setShadowFiltering(e){e!==this._descriptor.linearFilterDepth&&(this._descriptor.linearFilterDepth=this._descriptor.compareEnabled=e,this.setSamplingMode(e?E.LINEAR:E.NEAREST),y(this._descriptor),this._shadowFilterDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1),this._shadowFilterDirty&&(this._applyShadowMode(),this._shadowFilterDirty=!1)}abortCompression(){this._compressionAbortController=i(this._compressionAbortController)}_setData(r,i){const s=this._descriptor,a=s.context?.gl;if(!a)return;D(a),this.hasWebGLTextureObject||(this._glName=a.createTexture(),s.context.instanceCounter.increment(g.Texture,this)),y(s);const o=s.context.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);s.context.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),D(a);const n=i??s.target,c=X(n);if(v(r))this._setDataFromTexImageSource(r,n);else{const{width:t,height:i,depth:o}=s;if(null==t||null==i)throw new e("texture:missing-size","Width and height must be specified!");if(c&&null==o)throw new e("texture:missing-depth","Depth must be specified!");if(s.internalFormat=H(s),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(n,s.internalFormat,s.hasMipmap,t,i,o),L(r)){if(!B(s.internalFormat))throw new e("texture:format-mismatch","Attempting to use compressed data with an uncompressed format!");this._setDataFromCompressedSource(r,s.internalFormat,n)}else this._texImage(n,0,s.internalFormat,t,i,o,r),D(a),s.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),this._applyShadowMode(),D(a),s.context.bindTexture(o,t.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(e=null){for(let t=d.TEXTURE_CUBE_MAP_POSITIVE_X;t<=d.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:r,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_setDataFromTexImageSource(e,t){const{gl:r}=this._descriptor.context,i=this._descriptor;i.internalFormat=H(i);const s=X(t),{width:a,height:o,depth:n}=function(e){let t="width"in e?e.width:e.codedWidth,r="height"in e?e.height:e.codedHeight;return e instanceof HTMLVideoElement&&(t=e.videoWidth,r=e.videoHeight),{width:t,height:r,depth:1}}(e);i.width&&i.height,i.width||(i.width=a),i.height||(i.height=o),s&&i.depth,s&&(i.depth=n),i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(t,i.internalFormat,i.hasMipmap,a,o,n),this._texImage(t,0,i.internalFormat,a,o,n,e),D(r),i.hasMipmap&&(this.generateMipmap(),D(r))}_setDataFromCompressedSource(e,t,r){const i=this._descriptor,{width:s,height:a,depth:o}=i,n=e.levels,c=W(r,s,a,o),l=Math.min(c,n.length)-1;this._descriptor.context.gl.texParameteri(i.target,A.MAX_LEVEL,l),this._forEachMipmapLevel(((e,i,s,a)=>{const o=n[Math.min(e,n.length-1)];this._compressedTexImage(r,e,t,i,s,a,o)}),l)}_texStorage(t,r,i,s,a,o){const{gl:n}=this._descriptor.context;if(!(r in c||O(r)||C(r)))throw new e("texture:missing-format","Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const l=i?W(t,s,a,o):1;if(X(t)){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");n.texStorage3D(t,l,r,s,a,o)}else n.texStorage2D(t,l,r,s,a);this._wasImmutablyAllocated=!0}_texImage(t,r,i,s,a,o,n){const c=this._descriptor.context.gl,l=X(t),{isImmutable:p,pixelFormat:h,dataType:m}=this._descriptor;if(p){if(null!=n){const i=n;if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.texSubImage3D(t,r,0,0,0,s,a,o,h,m,i)}else c.texSubImage2D(t,r,0,0,s,a,h,m,i)}}else{const p=n;if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.texImage3D(t,r,i,s,a,o,0,h,m,p)}else c.texImage2D(t,r,i,s,a,0,h,m,p)}}_compressedTexImage(t,r,i,s,a,o,n){const c=this._descriptor.context.gl,l=X(t);if(this._descriptor.isImmutable){if(null!=n)if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.compressedTexSubImage3D(t,r,0,0,0,s,a,o,i,n)}else c.compressedTexSubImage2D(t,r,0,0,s,a,i,n)}else if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.compressedTexImage3D(t,r,i,s,a,o,0,n)}else c.compressedTexImage2D(t,r,i,s,a,0,n)}async _compressOnWorker(e){const{width:r,height:i,context:o,flipped:n,preMultiplyAlpha:c,hasMipmap:l}=this._descriptor,p=this._descriptor.compress?.compressionTracker,m=this._descriptor.compress?.compressionCallback,{compressedTextureETC:u,compressedTextureS3TC:d}=o.capabilities;if(!t.compressionWorkerHandle?.isCompressible(e,this._descriptor)||!u&&!d)return;this.abortCompression();const _=new AbortController;this._compressionAbortController=_,p?.increment();try{let a;e instanceof Uint8Array?a=e.buffer:(a=await createImageBitmap(e,{imageOrientation:n?"flipY":"none"}),s(_));const o={data:a,width:r,height:i,needsFlip:e instanceof Uint8Array&&this.descriptor.flipped,components:this._descriptor.pixelFormat===h.RGBA?4:3,preMultiplyAlpha:c,hasMipmap:l,hasETC:!!u,hasS3TC:!!d},p=await t.compressionWorkerHandle.invoke(o,_.signal,"low");if(s(_),p.compressedTexture&&this.hasWebGLTextureObject){const e=this.usedMemory;this._descriptor.internalFormat=p.internalFormat,this._setData(p.compressedTexture),m?.(e-this.usedMemory)}}catch(e){a(e)||j().error("Texture compression failed!")}finally{p?.decrement(),this._compressionAbortController?.signal.aborted&&(this._compressionAbortController=null)}}_forEachMipmapLevel(t,r=1/0){let{width:i,height:s,depth:a,hasMipmap:o,target:n}=this._descriptor;const c=n===d.TEXTURE_3D;if(null==i||null==s||c&&null==a)throw new e("texture:missing-size","Missing texture dimensions for mipmap calculation");for(let e=0;t(e,i,s,a),o&&(1!==i||1!==s||c&&1!==a)&&!(e>=r);++e)i=Math.max(1,i>>1),s=Math.max(1,s>>1),c&&(a=Math.max(1,a>>1))}_applySamplingMode(){const e=this._descriptor,t=e.context?.gl;let r=e.samplingMode,i=e.samplingMode;r===E.LINEAR_MIPMAP_NEAREST||r===E.LINEAR_MIPMAP_LINEAR?(r=E.LINEAR,e.hasMipmap||(i=E.LINEAR)):r!==E.NEAREST_MIPMAP_NEAREST&&r!==E.NEAREST_MIPMAP_LINEAR||(r=E.NEAREST,e.hasMipmap||(i=E.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}_applyWrapMode(){const e=this._descriptor,t=e.context?.gl;"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}_applyShadowMode(){const e=this._descriptor,t=e.context?.gl,r=e.compareEnabled?t.COMPARE_REF_TO_TEXTURE:t.NONE;t.texParameteri(e.target,t.TEXTURE_COMPARE_MODE,r),e.compareEnabled&&t.texParameteri(e.target,t.TEXTURE_COMPARE_FUNC,t.GREATER),D(t)}_applyAnisotropicFilteringParameters(){const e=this._descriptor,t=e.context.capabilities.textureFilterAnisotropic;t&&e.context.gl.texParameterf(e.target,t.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};export{k as T,V,F as a,N as b,D as c,b as d,S as e,C as f,U as g,B as h,O as i,M as j,P as u,w as v,I as w};
