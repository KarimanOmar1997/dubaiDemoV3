/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{g as e}from"./assets.js";import{T as t}from"./TextureFormat.js";import{s as r}from"./enums.js";import"../config.js";import"../core/lang.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/Error.js";import"./Logger.js";import"./jsonUtils.js";import"./MapUtils.js";import"../core/promiseUtils.js";import"./handleUtils.js";import"./events.js";import"./maybe.js";import"./persistableUrlUtils.js";let n,s,a,i,l=null,o=null;class c{constructor(e,t){this.internalFormat=e,this.compressedTexture=t}}async function u(e){let t;if(t=e.data instanceof ImageBitmap?function(e){const t=new OffscreenCanvas(e.width,e.height),r=t.getContext("2d");return r.drawImage(e,0,0),r.getImageData(0,0,t.width,t.height).data}(e.data):function(e,t,r,n,s){const a=new Uint8ClampedArray(e).subarray(0,t*r*n);if(!s)return a;const i=new Uint8ClampedArray(a.length),l=t*n;for(let e=0;e<r;e++){const t=e*l,n=(r-e-1)*l;i.set(a.subarray(t,t+l),n)}return i}(e.data,e.width,e.height,e.components,e.needsFlip),e.hasS3TC){o||await m();const n=new Uint8Array(t.length);if(o?.encode(t,e.width,e.height,e.preMultiplyAlpha,n)){const e=function(e){const t=new Int32Array(e.buffer,e.byteOffset,f);let n,s;switch(t[C]){case j:n=8,s=r.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case b:n=16,s=r.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case S:n=16,s=r.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let a=1,i=t[g],l=t[T];(3&i||3&l)&&(i=i+3&-4,l=l+3&-4);const o=i,c=l;t[y]&E&&(a=Math.max(1,t[A]));let u,p,m=e.byteOffset+t[w]+4;const d=[];for(let t=0;t<a;++t)p=(i+3>>2)*(l+3>>2)*n,u=new Uint8Array(e.buffer,m,p),d.push(u),m+=p,i=Math.max(1,i>>1),l=Math.max(1,l>>1);return{textureData:{type:"compressed",levels:d},internalFormat:s,width:o,height:c}}(n),t=[n.buffer];return{result:new c(e?.internalFormat??null,e?.textureData??null),transferList:t}}return{result:new c(null,null)}}if(e.hasETC){if(l||await p(),e.preMultiplyAlpha&&!o&&await m(),e.preMultiplyAlpha){const r=new Uint8ClampedArray(t.length);o?.premultiply(new Uint8Array(t),e.width,e.height,r),t=r}const r=await d(t,e.width,e.height,e.hasMipmap),n=r?await h(r):null,s=n?.compressedTexture?.levels.map((e=>e.buffer))||[];return{result:new c(n?.internalFormat??null,n?.compressedTexture??null),transferList:s}}return{result:new c(null,null)}}async function p(){l||(l=await(a??=(n??=(async()=>{const t=await import("./basis_encoder.js"),r=await t.default({locateFile:t=>e(`esri/libs/basisu/${t}`)});return r.initializeBasis(),r})(),n)))}async function m(){o||(o=await(i??=(s??=(async()=>{const t=await import("./dxt_encoder.js");return await t.default({locateFile:t=>e(`esri/libs/dxtEncoder/${t}`)})})(),s)))}async function d(e,t,r,n,s=255,a=0,i=!1,o=!1){if(!l)return null;const c=new l.BasisEncoder;c.setPerceptual(!o),c.setCheckForAlpha(!0),c.setForceAlpha(!1),c.setRenormalize(o),c.setMipGen(n),c.setMipSRGB(!o),c.setCreateKTX2File(!0),c.setKTX2SRGBTransferFunc(!o),c.setQualityLevel(s),c.setCompressionLevel(a);const u=new Uint8Array(e.byteLength);c.setSliceSourceImage(0,new Uint8Array(e),t,r,i);const p=c.encode(u),m=new Uint8Array(u.buffer,0,p),d=new l.KTX2File(new Uint8Array(m));return d.isValid()?(c.delete(),m):(d.close(),d.delete(),c.delete(),null)}async function h(e){if(!l)return new c(null,null);const n=new l.KTX2File(new Uint8Array(e));n.startTranscoding();const[s,a]=n.getHasAlpha()?[t.ETC2_RGBA,r.COMPRESSED_RGBA8_ETC2_EAC]:[t.ETC1_RGB,r.COMPRESSED_RGB8_ETC2],i=n.getLevels(),o=[];for(let e=0;e<i;e++)o.push(new Uint8Array(n.getImageTranscodedSizeInBytes(e,0,0,s))),n.transcodeImage(o[e],e,0,0,s,0,-1,-1);return n.close(),n.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:o}}}const f=31,w=1,y=2,T=3,g=4,A=7,C=21,E=131072;function _(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const j=_("DXT1"),b=_("DXT3"),S=_("DXT5");export{c as TextureCompressionWorkerOutput,u as compress,d as compressRGBADataToKTX2,h as createTextureDataKTX2,p as initializeBasisEncoder,m as initializeDXTEncoder};
