/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as t}from"../chunks/tslib.es6.js";import{b as s}from"../core/Accessor.js";import e from"../core/JSONSupport.js";import{clone as r}from"../core/lang.js";import{L as o}from"../chunks/Logger.js";import{property as i}from"../core/accessorSupport/decorators/property.js";import{e as a}from"../chunks/enumeration.js";import{r as m}from"../chunks/reader.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import{w as n}from"../chunks/writer.js";import{s as c,a as u}from"../chunks/stretchRendererUtils.js";import{f as h,t as l}from"../chunks/colorRamps.js";import"../core/Handles.js";import"../chunks/maybe.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/Lifecycle.js";import"../chunks/metadata.js";import"../chunks/ObjectPool.js";import"../chunks/ObservableBase.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../chunks/PooledArray.js";import"../core/promiseUtils.js";import"../core/Error.js";import"../config.js";import"../chunks/events.js";import"../chunks/SetUtils.js";import"../chunks/SimpleTrackingTarget.js";import"../chunks/ensureType.js";import"../chunks/MapUtils.js";import"../chunks/jsonMap.js";import"../chunks/Warning.js";import"../rest/support/AlgorithmicColorRamp.js";import"../Color.js";import"../chunks/colorUtils2.js";import"../chunks/mathUtils.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";var d;let j=d=class extends e{constructor(t){super(t),this.colorRamp=null,this.computeGamma=!1,this.dynamicRangeAdjustment=!1,this.gamma=[],this.maxPercent=null,this.minPercent=null,this.numberOfStandardDeviations=null,this.outputMax=null,this.outputMin=null,this.sigmoidStrengthLevel=null,this.histograms=null,this.useGamma=!1,this.stretchType="none",this.type="raster-stretch"}readColorRamp(t){if(t)return h(t)}get statistics(){return this._get("statistics")}set statistics(t){s(o.getLogger(this),"statistics",{replacement:"customStatistics",version:"4.31",warnOnce:!0}),this._set("statistics",t)}get customStatistics(){const t=this.statistics;return t&&Array.isArray(t[0])?t.map((t=>({min:t[0],max:t[1],avg:t[2],stddev:t[3]}))):t}set customStatistics(t){this._set("statistics",t?.map((t=>[t.min,t.max,t.avg??0,t.stddev??1])))}readCustomStatistics(t){return t?.map((t=>({min:t[0],max:t[1],avg:t[2],stddev:t[3]})))}writeCustomStatistics(t,s,e){t?.length&&(s[e]=t.map((t=>[t.min,t.max,t.avg??0,t.stddev??1])))}readStretchType(t,s){let e=s.stretchType;return"number"==typeof e&&(e=u[e]),c.read(e)}clone(){const t=new d({stretchType:this.stretchType,outputMin:this.outputMin,outputMax:this.outputMax,useGamma:this.useGamma,computeGamma:this.computeGamma,gamma:r(this.gamma),sigmoidStrengthLevel:this.sigmoidStrengthLevel,numberOfStandardDeviations:this.numberOfStandardDeviations,minPercent:this.minPercent,maxPercent:this.maxPercent,colorRamp:r(this.colorRamp),histograms:r(this.histograms),dynamicRangeAdjustment:this.dynamicRangeAdjustment});return t._set("statistics",r(this.statistics)),t}};t([i({types:l,json:{write:!0}})],j.prototype,"colorRamp",void 0),t([m("colorRamp")],j.prototype,"readColorRamp",null),t([i({type:Boolean,json:{write:!0}})],j.prototype,"computeGamma",void 0),t([i({type:Boolean,json:{write:{target:"dra"},read:{source:"dra"}}})],j.prototype,"dynamicRangeAdjustment",void 0),t([i({type:[Number],json:{write:!0}})],j.prototype,"gamma",void 0),t([i({type:Number,json:{write:!0}})],j.prototype,"maxPercent",void 0),t([i({type:Number,json:{write:!0}})],j.prototype,"minPercent",void 0),t([i({type:Number,json:{write:!0}})],j.prototype,"numberOfStandardDeviations",void 0),t([i({type:Number,json:{read:{source:"max"},write:{target:"max"}}})],j.prototype,"outputMax",void 0),t([i({type:Number,json:{read:{source:"min"},write:{target:"min"}}})],j.prototype,"outputMin",void 0),t([i({type:Number,json:{write:!0}})],j.prototype,"sigmoidStrengthLevel",void 0),t([i({})],j.prototype,"statistics",null),t([i()],j.prototype,"histograms",void 0),t([i({json:{type:[[Number]],name:"statistics",write:!0}})],j.prototype,"customStatistics",null),t([m("customStatistics")],j.prototype,"readCustomStatistics",null),t([n("customStatistics")],j.prototype,"writeCustomStatistics",null),t([i({type:Boolean,json:{write:!0}})],j.prototype,"useGamma",void 0),t([i({type:c.apiValues,json:{type:c.jsonValues,write:c.write}})],j.prototype,"stretchType",void 0),t([m("stretchType",["stretchType"])],j.prototype,"readStretchType",null),t([a({rasterStretch:"raster-stretch"})],j.prototype,"type",void 0),j=d=t([p("esri.renderers.RasterStretchRenderer")],j);export{j as default};
