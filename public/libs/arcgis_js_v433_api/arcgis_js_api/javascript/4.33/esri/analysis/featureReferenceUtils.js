// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../chunks/vec32","../core/libs/gl-matrix-2/factories/vec3f64","../geometry/support/ray","../views/3d/webgl-engine/lib/IntersectorInterfaces","../views/3d/webgl-engine/lib/intersectorUtilsConversions"],(function(e,t,r,n,l,u){"use strict";function o(e){if(null==e)return null;const t=null!=e.layer?e.layer.id:"";let r=null;return r=null!=e.objectId?e.objectId:null!=e.layer&&"objectIdField"in e.layer&&null!=e.layer.objectIdField&&null!=e.attributes?e.attributes[e.layer.objectIdField]:e.uid,null==r?null:`o-${t}-${r}`}const a={json:{write:{writer:function(e,t){null!=e?.layer?.objectIdField&&null!=e.attributes&&(t.feature={layerId:e.layer.id,objectId:e.attributes[e.layer.objectIdField]})},target:{"feature.layerId":{type:[Number,String],isRequired:!0},"feature.objectId":{type:[Number,String],isRequired:!0}}},origins:{"web-scene":{read:function(e){if(null!=e.layerId&&null!=e.objectId)return{uid:null,layer:{id:e.layerId,objectIdField:"ObjectId"},attributes:{ObjectId:e.objectId}}}}}}};function i(e,t,r){if(u.hasLod(e)){const n=u.getIntersectedFeatureBSRadius(e,t);if(null!=n)return Math.min(n*c,r)}return 1e-5*r}const c=.05,s=n.create(),d=r.create();e.featureReferenceEquals=function(e,t){return o(e)===o(t)},e.featureReferenceProperty=a,e.getFeatureId=o,e.updatePointsFromFeatureReference=function(e,a,c,b){const{sceneIntersectionHelper:f}=e,{observer:I,observerFeatureId:g,targetFeatureId:y,target:j}=c;if(null==g&&null==y)return;b||(b=e=>e),t.sub(d,I,j);const m=t.length(d);t.scaleAndAdd(d,I,d,1/m);const p=n.fromPoints(d,j,s);a.options.store=l.StoreResults.ALL,f.intersectToolIntersectorRay(p,a);let S=null,F=null,R=null,v=null;for(const t of a.results.all){const r=u.toGraphic(t,e);if(null==r||null==t.distanceInRenderSpace)continue;const n=o(r);null!=n&&(null!=g&&n===g&&(S??=b(i(t,e,m)),t.distanceInRenderSpace-1<S&&(R=t)),null!=y&&n===y&&(F??=b(i(t,e,m)),null==v&&t.distanceInRenderSpace-1<m&&m-t.distanceInRenderSpace+1<F&&(v=t)))}const{observerAdjusted:N,targetAdjusted:w}=c;R?.getIntersectionPoint(N)?c.observerSurfaceNormal=R.getTransformedNormal(r.create()):c.observerSurfaceNormal=null,v?.getIntersectionPoint(w)?c.targetSurfaceNormal=v.getTransformedNormal(r.create()):c.targetSurfaceNormal=null},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));