// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../colorUtils","../../../../../core/Logger","../../../../../core/MapUtils","../../../../../core/mathUtils","../../../../../core/libs/gl-matrix-2/math/quat","../../../../../core/libs/gl-matrix-2/factories/quatf64","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../MeshMaterialMetallicRoughness","../../vertexSpaceConversion","./buffer","./geometry","./types","./imageutils","../../../../../views/3d/glTF/internal/resourceUtils","../../../../../views/webgl/enums"],(function(e,t,s,r,a,i,o,n,l,u,c,h,f,p,d,m,g){"use strict";const T=()=>s.getLogger("esri.geometry.support.meshUtils.exporters.gltf.gltf");function x(e,t){if(null!=e)for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],a=e[r];e[s]=a,e[r]=-t}}function _(e){return e**t.colorGamma}e.GLTF=class{constructor(e,t){this.options=t,this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{output:t.output,binChunkBuffer:null,promises:[]}},this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.output.buffer===p.BufferOutputType.GLB||t.output.image===p.ImageOutputType.GLB;s&&(t.binChunkBuffer=new h.Buffer(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]),t.nodes.push(...this._addNodes(e))})),this.gltf.scenes.push(t)}_addNodes(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;n.exactEquals(s,l.ZEROS)||(t.translation=l.clone(s));const r=e.rotation;i.exactEquals(r,o.IDENTITY)||(t.rotation=o.clone(r));const a=e.scale;n.exactEquals(a,l.ONES)||(t.scale=l.clone(a));const u=this.gltf.nodes.length;if(this.gltf.nodes.push(t),e.mesh&&e.mesh.vertexAttributes.position){const s=this._createMeshes(e.mesh),r=[u];if(1===s.length)this._addMesh(t,s[0]);else for(const e of s){const t={};this._addMesh(t,e),r.push(this.gltf.nodes.length),this.gltf.nodes.push(t)}return r}return e.forEachNode((e=>{t.children||(t.children=[]),t.children.push(...this._addNodes(e))})),[u]}_addMesh(e,t){this.gltf.meshes??=[];const s=this.gltf.meshes.length;this.gltf.meshes.push(t),e.mesh=s}_createMeshes(e){const t=this.gltf.extras,s=t.output.buffer===p.BufferOutputType.GLB;let r;r=s?t.binChunkBuffer:new h.Buffer(this.gltf);const a=this.options.origin,i=e.vertexSpace.clone();i.origin=[a.x,a.y,a.z??0];const o=c.convertVertexSpace({vertexAttributes:e.vertexAttributes,vertexSpace:e.vertexSpace,transform:this.options?.ignoreLocalTransform?null:e.transform,spatialReference:e.spatialReference},i,{targetUnit:this.options.unitConversionDisabled?void 0:"meters"});if(!o)return[];f.smoothNormals(e,o),function({position:e,normal:t,tangent:s}){x(e,3),x(t,3),x(s,4)}(o);const{position:n,normal:l,tangent:u}=o,{uv:d,color:m}=e.vertexAttributes,T=r.addBufferView(g.DataType.FLOAT,p.AttributeType.VEC3,p.TargetBuffer.ARRAY_BUFFER);let A,M,b,R;l&&(A=r.addBufferView(g.DataType.FLOAT,p.AttributeType.VEC3,p.TargetBuffer.ARRAY_BUFFER)),d&&(M=r.addBufferView(g.DataType.FLOAT,p.AttributeType.VEC2,p.TargetBuffer.ARRAY_BUFFER)),u&&(b=r.addBufferView(g.DataType.FLOAT,p.AttributeType.VEC4,p.TargetBuffer.ARRAY_BUFFER)),m&&(R=r.addBufferView(g.DataType.FLOAT,p.AttributeType.VEC4,p.TargetBuffer.ARRAY_BUFFER)),T.startAccessor("POSITION"),A&&A.startAccessor("NORMAL"),M&&M.startAccessor("TEXCOORD_0"),b&&b.startAccessor("TANGENT"),R&&R.startAccessor("COLOR_0");const E=o.position.length/3;for(let e=0;e<E;++e)T.push(n[3*e]),T.push(n[3*e+1]),T.push(n[3*e+2]),A&&null!=l&&(A.push(l[3*e]),A.push(l[3*e+1]),A.push(l[3*e+2])),M&&null!=d&&(M.push(d[2*e]),M.push(d[2*e+1])),b&&null!=u&&(b.push(u[4*e]),b.push(u[4*e+1]),b.push(u[4*e+2]),b.push(u[4*e+3])),R&&null!=m&&(R.push(_(m[4*e]/255)),R.push(_(m[4*e+1]/255)),R.push(_(m[4*e+2]/255)),R.push(m[4*e+3]/255));const O=T.endAccessor(),y=this._addAccessor(T.index,O);let w,B,I,v,C;if(A){const e=A.endAccessor();w=this._addAccessor(A.index,e)}if(M){const e=M.endAccessor();B=this._addAccessor(M.index,e)}if(b){const e=b.endAccessor();I=this._addAccessor(b.index,e)}if(R){const e=R.endAccessor();v=this._addAccessor(R.index,e)}const N=[];return e.components&&e.components.length>0&&e.components[0].faces?(C=r.addBufferView(g.DataType.UNSIGNED_INT,p.AttributeType.SCALAR,p.TargetBuffer.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(C,e.components,N,y,w,B,I,v)):this._addMeshVertexNonIndexed(e.components,N,y,w,B,I,v),T.finalize(),A&&A.finalize(),M&&M.finalize(),b&&b.finalize(),C&&C.finalize(),R&&R.finalize(),s||r.finalize(),N}_addMaterial(e){if(null==e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode=p.AlphaMode.MASK;break;case"auto":case"blend":s.alphaMode=p.AlphaMode.BLEND}s.alphaCutoff=e.alphaCutoff,e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const r=e=>{const t=e.toRgba();return t[0]=_(t[0]/255),t[1]=_(t[1]/255),t[2]=_(t[2]/255),t};if(null!=e.color&&(s.pbrMetallicRoughness.baseColorFactor=r(e.color)),null!=e.colorTexture&&(s.pbrMetallicRoughness.baseColorTexture=this._createTextureInfo(e.colorTexture,e.colorTextureTransform)),null!=e.normalTexture&&(s.normalTexture=this._createTextureInfo(e.normalTexture,e.normalTextureTransform)),e instanceof u){if(null!=e.emissiveTexture&&(s.emissiveTexture=this._createTextureInfo(e.emissiveTexture,e.emissiveTextureTransform)),null!=e.emissiveColor){const t=r(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}null!=e.occlusionTexture&&(s.occlusionTexture=this._createTextureInfo(e.occlusionTexture,e.occlusionTextureTransform)),null!=e.metallicRoughnessTexture&&(s.pbrMetallicRoughness.metallicRoughnessTexture=this._createTextureInfo(e.metallicRoughnessTexture,e.metallicRoughnessTextureTransform)),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,T().warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const a=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),a}_createTextureInfo(e,t){const s={index:this._addTexture(e)};return t?(s.extensions||(s.extensions={}),s.extensions.KHR_texture_transform={scale:t.scale,offset:t.offset,rotation:a.deg2rad(t.rotation)},s):s}_addTexture(e){const t=this.gltf.textures??[];return this.gltf.textures=t,r.getOrCreateMapValue(this._textureMap,e,(()=>{const s={sampler:this._addSampler(e),source:this._addImage(e)},r=t.length;return t.push(s),r}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const r=this.gltf.extras;switch(r.output.image){case p.ImageOutputType.GLB:{const e=r.binChunkBuffer.addBufferView(g.DataType.UNSIGNED_BYTE,p.AttributeType.SCALAR);if(m.isEncodedMeshTexture(t))null!=t.data&&e.writeOutToBuffer(t.data,0);else{const a=d.imageToArrayBuffer(t,this.options.signal).then((({data:e,type:t})=>(s.mimeType=t,e)));r.promises.push(e.writeAsync(a).then((()=>{e.finalize()})))}s.bufferView=e.index;break}case p.ImageOutputType.DataURI:if(m.isEncodedMeshTexture(t)){T().warnOnce("Image export for basis compressed textures not available.");break}s.uri=d.imageToDataURI(t);break;default:if(m.isEncodedMeshTexture(t)){T().warnOnce("Image export for basis compressed textures not available.");break}r.promises.push(d.imageToArrayBuffer(t,this.options.signal).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const r=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,r),r}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=g.TextureWrapMode.REPEAT,s=g.TextureWrapMode.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=g.TextureWrapMode.CLAMP_TO_EDGE,s=g.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":t=g.TextureWrapMode.MIRRORED_REPEAT,s=g.TextureWrapMode.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=g.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":s=g.TextureWrapMode.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=g.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":t=g.TextureWrapMode.MIRRORED_REPEAT}}const r={wrapS:t,wrapT:s};for(let e=0;e<this.gltf.samplers.length;++e)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[e]))return e;const a=this.gltf.samplers.length;return this.gltf.samplers.push(r),a}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,a,i,o,n){const l=new Map;for(const u of t){if(e.startAccessor("INDICES"),u.faces)for(let t=0;t<u.faces.length;++t)e.push(u.faces[t]);const t=e.endAccessor(),c={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(u.material)};a&&"flat"!==u.shading&&(c.attributes.NORMAL=a),i&&(c.attributes.TEXCOORD_0=i),o&&"flat"!==u.shading&&(c.attributes.TANGENT=o),n&&(c.attributes.COLOR_0=n);const h=l.get(u.name);if(h)h.primitives.push(c);else{const e={name:u.name,primitives:[c]};l.set(u.name,e),s.push(e)}}}_addMeshVertexNonIndexed(e,t,s,r,a,i,o){const n={primitives:[]};t.push(n);const l={attributes:{POSITION:s}};r&&(l.attributes.NORMAL=r),a&&(l.attributes.TEXCOORD_0=a),i&&(l.attributes.TANGENT=i),o&&(l.attributes.COLOR_0=o),e&&(l.material=this._addMaterial(e[0].material)),n.primitives.push(l)}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));