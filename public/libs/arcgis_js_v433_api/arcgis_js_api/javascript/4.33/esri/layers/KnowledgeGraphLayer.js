// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["../chunks/tslib.es6","../applications/KnowledgeStudio/resourceSerializationUtils","../core/Collection","../core/Error","../core/Logger","../core/MapUtils","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/reactiveUtils","../core/urlUtils","../core/uuid","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../core/accessorSupport/PropertyOrigin","./Layer","./knowledgeGraph/KnowledgeGraphLayerDataManager","./knowledgeGraph/KnowledgeGraphSublayer","./knowledgeGraph/layerUtils","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./support/commonProperties","../rest/knowledgeGraphService","../chunks/persistableUrlUtils"],(function(e,i,a,t,s,n,r,o,d,l,h,p,y,c,u,g,f,m,w,M,b,T,_,D,S,L,v,I,C,k,A,N){"use strict";let O=class extends(D.BlendLayer(C.ScaleRangeLayer(I.RefreshableLayer(_.ArcGISService(L.OperationalLayer(v.PortalLayer(r.MultiOriginJSONMixin(S.CustomParametersMixin(w))))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(a.ofType(b)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(a.ofType(b)),this.type="knowledge-graph",this.url=null,this.addHandles(d.watch((()=>this.layers.concat(this.tables)),((e,i)=>this._handleSublayersChange(e,i)),d.sync))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(e){o.throwIfAbortError(e)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await T.initializeLayersFromClientData(this)}async _fetchMetadata(){if(!this.url)throw new t("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await A.fetchKnowledgeGraph(this.url);this.knowledgeGraph=e,this._forEachGraphType((e=>{e.name&&this._graphTypeLookup.set(e.name,e)}))}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===m.OriginId.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new M.KnowledgeGraphLayerDataManager({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await i.fetchAndConvertSerializedKnowledgeIdMap(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach((i=>{const a=this._graphTypeLookup.get(i.graphTypeName);a&&!e.namedTypeDefinitions.has(a.name)&&e.namedTypeDefinitions.set(a.name,{useAllData:!0})})),this.setAtOrigin("inclusionModeDefinition",e,m.idToName(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach(((e,a)=>{const t=this._graphTypeLookup.get(a);if(!t)return s.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);"relationship"!==t.type&&"entity"!==t.type&&(s.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))}));else if(!e.generateAllSublayers)throw new t("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:a}=this,t=a?.namedTypeDefinitions;!a||a.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):t&&t.size>0&&t.forEach(((a,t)=>{const s=this._graphTypeLookup.get(t);switch(s?.type){case"relationship":i.push(s);break;case"entity":e.push(s)}})),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach((i=>{e(i)}))}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,a=[];for(const t of e)this._graphTypeLookup.has(t.typeName)&&(!1===this.layers.concat(this.tables).some((e=>e.objectType.name===t.typeName))&&(this.dataManager.sublayerCaches.set(t.typeName,new Map),i.add(t.typeName)),n.getOrCreateMapValue(this.sublayerIdsCache,t.typeName,(()=>new Set)).add(t.id),a.push(t));this.dataManager.addToLayer(a);for(const e of i){const i=this._graphTypeLookup.get(e);i&&(this._addSublayer(i),"entity"===i.type?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e))}await T.initializeLayersFromClientData(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,a){e.forEach((e=>{const t=this._createSublayer(e);a(t)&&i.push(t),this._updateSublayerCaches(e)}))}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new b({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach((i=>{i.parentCompositeLayer=this;const a=e.find((e=>e.type===i.graphType&&e.name===i.graphTypeName));a&&(i.objectType=a,this._updateSublayerCaches(a))}))}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,a,t,s){e[a]="<pending>",t.pendingOperations.push(async function(e){const a=await i.serializeInclusionDefinitionToIdCollectionsMapPbf(e);return new Blob([a],{type:"application/x-protobuf"})}(this.inclusionModeDefinition).then((i=>{const n=function(e){const i=`definitionSetMap-${h.generateUUID()}.dat`,a=l.join("knowledgeGraphLayer",i);return e.resourceFromPath(a)}(s);e[a]=n.itemRelativeUrl,t.toAdd.push({resource:n,content:{type:"blob",blob:i},compress:!1,finish:e=>{this.definitionSetMap=e.url}})})))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach((e=>{e.parent=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((e=>{e.parent=this})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this})),e.on("after-remove",(({item:e})=>{e.parent=null}))],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=m.OriginId.PORTAL_ITEM&&e<m.OriginId.USER}readDefinitionSetMap(e,i,a){return N.fromJSON(e,a)}writeDefinitionSetMap(e,i,a,t){const s=t?.portalItem,n=t?.resources,r=m.nameToId(t?.origin);if(!s||!n||null==r)return void(e&&(i[a]=N.toJSON(e,t)));const{inclusionModeDefinition:o}=this;if(!o||this._displaysAllRecords(o))return void(this.definitionSetMap=null);const d=this.originIdOf("inclusionModeDefinition");if(d===m.OriginId.USER||this._namedTypesModified||r<d)this._saveUrlAsNewResource(i,a,n,s);else if(r===d&&e){const r=N.toJSON(e,t);l.isAbsolute(r)?this._saveUrlAsNewResource(i,a,n,s):i[a]=r}}set inclusionModeDefinition(e){"loaded"!==this.loadStatus&&"failed"!==this.loadStatus?this._set("inclusionModeDefinition",e):s.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===m.OriginId.DEFAULTS?this.originIdOf("layers")===m.OriginId.DEFAULTS?this._createSublayers(e,this.layers,(e=>!!e.geometryType)):this._updateSublayers(e,this.layers):this.layers=new a,this.tables.length||this.originIdOf("layers")===m.OriginId.DEFAULTS?this.originIdOf("tables")===m.OriginId.DEFAULTS?this._createSublayers(e,this.tables,(e=>!e.geometryType)):this._updateSublayers(e,this.tables):this.tables=new a,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e,i)=>{const a=n.getOrCreateMapValue(this.sublayerIdsCache,i,(()=>new Set));e.members?.forEach((e=>{a.add(e.id)}))}))}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new t("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new t("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),n.getOrCreateMapValue(this.sublayerIdsCache,e,(()=>new Set));const a=this._addSublayer(i);return"entity"===i.type?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await T.initializeLayersFromClientData(this,[e]),this._refreshNamedTypes(),a}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new t("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new t("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new t("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);i?.useAllData?s.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new t("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new t("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new t("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else s.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||s.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&s.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())n.getOrCreateMapValue(this.sublayerIdsCache,e,(()=>new Set)),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const a of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(a.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(a.typeName)?.members?.has(a.id)&&i.push(a);this.dataManager.removeFromLayer(i);for(const e of i)this.sublayerIdsCache.get(e.typeName)?.delete(e.id);return this._refreshNamedTypes(),i}};return e.__decorate([p.property()],O.prototype,"dataManager",void 0),e.__decorate([p.property({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],O.prototype,"definitionSetMap",void 0),e.__decorate([u.reader("definitionSetMap")],O.prototype,"readDefinitionSetMap",null),e.__decorate([f.writer("definitionSetMap")],O.prototype,"writeDefinitionSetMap",null),e.__decorate([p.property()],O.prototype,"inclusionModeDefinition",null),e.__decorate([p.property()],O.prototype,"knowledgeGraph",void 0),e.__decorate([p.property({type:a.ofType(b),json:{write:{ignoreOrigin:!0}}})],O.prototype,"layers",void 0),e.__decorate([p.property()],O.prototype,"memberEntityTypes",void 0),e.__decorate([p.property()],O.prototype,"memberRelationshipTypes",void 0),e.__decorate([p.property({type:["KnowledgeGraphLayer"]})],O.prototype,"operationalLayerType",void 0),e.__decorate([p.property()],O.prototype,"sublayerIdsCache",void 0),e.__decorate([p.property({type:a.ofType(b),json:{write:{ignoreOrigin:!0}}})],O.prototype,"tables",void 0),e.__decorate([p.property({json:{read:!1}})],O.prototype,"type",void 0),e.__decorate([p.property(k.url)],O.prototype,"url",void 0),O=e.__decorate([g.subclass("esri.layers.KnowledgeGraphLayer")],O),O}));