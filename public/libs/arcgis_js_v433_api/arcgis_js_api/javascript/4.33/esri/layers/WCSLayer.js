// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","../chunks/tslib.es6","../PopupTemplate","../core/Clonable","../core/Error","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/reactiveUtils","../core/accessorSupport/decorators/property","../core/has","../core/Logger","../core/RandomLCG","../core/accessorSupport/decorators/subclass","./Layer","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/ImageryTileMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RasterJobHandlerMixin","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/TemporalLayer","./support/commonProperties","./support/Field","./support/rasterFieldUtils","./support/rasterDatasets/WCSRaster","../support/popupUtils","../webdoc/interfaces"],(function(e,t,r,o,s,i,a,n,l,p,d,c,u,y,h,v,m,g,f,_,S,I,b,w,x,O,P,T,L){"use strict";const R=new Set(["milliseconds","seconds","minutes","hours","days","weeks","months","years","decades","centuries"]);let A=class extends(h.BlendLayer(I.ScaleRangeLayer(g.OperationalLayer(f.PortalLayer(v.CustomParametersMixin(m.ImageryTileMixin(_.RasterJobHandlerMixin(b.TemporalLayer(S.RefreshableLayer(i.MultiOriginJSONMixin(o.ClonableMixin(y)))))))))))){constructor(...t){super(...t),this.coverageId=null,this.version=null,this.isReference=null,this.legendEnabled=!0,this.noData=0,this.operationalLayerType="WCS",this.type="wcs",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this._debouncedSaveOperations=a.debounce((async(t,r,o)=>{const{save:s,saveAs:i}=await new Promise(((t,r)=>e(["./save/imageryUtils"],t,r)));switch(t){case L.SaveOperationType.SAVE:return s(this,r);case L.SaveOperationType.SAVE_AS:return i(this,o,r)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WCS"]},e).catch(a.throwIfAbortError).then((()=>this._openRaster(t)))),Promise.resolve(this)}get coverageInfo(){return this.raster.coverageInfo}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[O.getServicePixelValueField("Pixel Value")],t=this.raster?.rasterInfo??this.serviceRasterInfo,r=t?.multidimensionalInfo;if(r){const t=O.getMultidimensionalFields(r);e.push(...t)}return e}createPopupTemplate(e){return T.createPopupTemplate({fields:this.rasterFields,title:this.title},e)}async save(e){return this._debouncedSaveOperations(L.SaveOperationType.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(L.SaveOperationType.SAVE_AS,t,e)}async _openRaster(e){const t=new P({url:this.url,version:this.version,coverageId:this.coverageId,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters}});if(await t.open({signal:e}),!t.rasterInfo)throw t.destroy(),new s("wcs-layer:load","cannot load resources on "+this.url);const{rasterInfo:r}=t;null==r.noDataValue&&(r.noDataValue=this.noData),this._set("serviceRasterInfo",r),this._set("spatialReference",r.spatialReference),null==this.title&&this.setAtOrigin("title",t.datasetName,"service"),null==this.coverageId&&this.setAtOrigin("coverageId",t.coverageInfo.id,"service"),null==this.version&&t.version&&this.setAtOrigin("version",t.version,"service"),this.setAtOrigin("tileInfo",t.rasterInfo.storageInfo.tileInfo,"service");const{multidimensionalInfo:o}=r;if(null!=o){const e=o.variables[0].dimensions.find((({name:e})=>"StdTime"===e));if(e){let t=e.extent?.[0]??e.values[0];Array.isArray(t)&&(t=t[0]);let r=e.extent?.[1]??e.values[e.values.length-1];Array.isArray(r)&&(r=r[1]);const o=R.has(e.intervalUnit?.toLowerCase())?e.intervalUnit?.toLowerCase():null;this.set("timeInfo",{startField:"StdTime",fullTimeExtent:{start:t,end:r},timeZone:null,interval:o?{value:e.interval,unit:o}:null})}}this.raster=t,this._configDefaultSettings(),this.addHandles(n.watch((()=>this.customParameters),(e=>this.raster.ioConfig.customFetchParameters=e)))}};return t.__decorate([l.property({type:String,nonNullable:!0,json:{name:"wcsInfo.coverageId",write:{isRequired:!0,ignoreOrigin:!0}}})],A.prototype,"coverageId",void 0),t.__decorate([l.property()],A.prototype,"coverageInfo",null),t.__decorate([l.property({type:["1.0.0","1.1.0","1.1.1","1.1.2","2.0.1"],nonNullable:!0,json:{name:"wcsInfo.version",write:{isRequired:!0,ignoreOrigin:!0}}})],A.prototype,"version",void 0),t.__decorate([l.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],A.prototype,"isReference",void 0),t.__decorate([l.property({json:{read:!0,write:!0}})],A.prototype,"blendMode",void 0),t.__decorate([l.property(w.legendEnabled)],A.prototype,"legendEnabled",void 0),t.__decorate([l.property({type:["show","hide"]})],A.prototype,"listMode",void 0),t.__decorate([l.property()],A.prototype,"noData",void 0),t.__decorate([l.property({type:["WCS"]})],A.prototype,"operationalLayerType",void 0),t.__decorate([l.property()],A.prototype,"raster",void 0),t.__decorate([l.property({readOnly:!0})],A.prototype,"type",void 0),t.__decorate([l.property(w.popupEnabled)],A.prototype,"popupEnabled",void 0),t.__decorate([l.property({type:r,json:{name:"popupInfo",write:!0}})],A.prototype,"popupTemplate",void 0),t.__decorate([l.property({readOnly:!0})],A.prototype,"defaultPopupTemplate",null),t.__decorate([l.property({readOnly:!0,type:[x]})],A.prototype,"fields",void 0),t.__decorate([l.property({readOnly:!0,type:[x]})],A.prototype,"rasterFields",null),A=t.__decorate([u.subclass("esri.layers.WCSLayer")],A),A}));