// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../Graphic","../../../core/Accessor","../../../core/maybe","../../../core/Promise","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../geometry/support/typeUtils","../data/StreamFeatureManager","../sources/connections/createConnection","../../../views/3d/support/EventedSet"],(function(e,t,r,s,o,a,i,n,c,l,d,h,p,u,y,m){"use strict";e.StreamGraphic=class extends r{constructor(e){super(e)}getObjectId(){return this.objectId}},t.__decorate([n.property({type:Number,json:{read:!0}})],e.StreamGraphic.prototype,"objectId",void 0),e.StreamGraphic=t.__decorate([h.subclass("esri.layers.graphics.controllers.StreamController.StreamGraphic")],e.StreamGraphic);class _{constructor(e){this.onUpdate=e,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(e){this._idToGraphic.set(e.objectId,e)}get(e){return this._idToGraphic.get(e)}forEach(e){this._idToGraphic.forEach(e)}removeById(e){const t=this._idToGraphic.get(e);return t?(t.sourceLayer=t.layer=null,this._idToGraphic.delete(e),t):null}update(e,t){this.onUpdate(e,t)}get size(){return this._idToGraphic.size}}e.StreamController=class extends(a.EsriPromiseMixin(s)){constructor(){super(...arguments),this.isPaused=!1,this.graphics=new m.EventedSet,this._updateInfo={websocket:0,client:0},this._updateIntervalId=null,this._outSpatialReference=null}initialize(){this.addResolvingPromise(this.layer.when((()=>this._startup())))}destroy(){this.clear()}_clearInterval(){null!==this._updateIntervalId&&(clearInterval(this._updateIntervalId),this._updateIntervalId=null)}clear(){this._shutdown(),this.graphics.clear()}get updating(){return!this.connection||"connected"===this.connection.connectionStatus}_shutdown(){this._clearInterval(),this.connection=o.destroyMaybe(this.connection),this.store=o.destroyMaybe(this.store),this.removeAllHandles()}_startup(){const{layer:e,layerView:t}=this,{spatialReference:r,definitionExpression:s,geometryDefinition:o,timeInfo:a,purgeOptions:n,maxReconnectionAttempts:c,maxReconnectionInterval:l,customParameters:d}=e,h=e.geometryType?p.featureGeometryTypeKebabDictionary.toJSON(e.geometryType):null,m=r,g=t.view.spatialReference,f={type:"object-id",fieldName:e.objectIdField};this.clear(),this._set("connection",y.createConnection(e.parsedUrl,m,g,h,s,o,c,l,d??void 0)),this._outSpatialReference=g.toJSON(),this.store=new _(this._onUpdate.bind(this)),this.featuresManager=new u.StreamFeatureManager(this.store,f,a.toJSON(),n);const I="startup-watches";this.removeHandles(I),this.addHandles([e.on("send-message-to-socket",(e=>this.connection.sendMessageToSocket(e))),e.on("send-message-to-client",(e=>this.connection.sendMessageToClient(e))),this.connection.on("data-received",(e=>this._onFeature(e))),this.connection.on("message-received",(e=>this._onWebSocketMessage(e))),i.watch((()=>[e.definitionExpression,e.geometryDefinition,e.purgeOptions]),(()=>this._startup()))],I),this.isPaused||this._initUpdateInterval()}_onWebSocketMessage(e){if(this.layerView.emit("message-received",e),"type"in e)switch(e.type){case"delete":if(e.objectIds)for(const t of e.objectIds)this.featuresManager.removeById(t);if(e.trackIds)for(const t of e.trackIds)this.featuresManager.removeByTrackId(t);break;case"clear":this.store.forEach((e=>this.featuresManager.removeById(e.objectId)))}}_onFeature(t){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:t.attributes,centroid:t.centroid,geometry:t.geometry});try{null==t.geometry||t.geometry.spatialReference||(t.geometry.spatialReference=this._outSpatialReference);const r=e.StreamGraphic.fromJSON(t);r.sourceLayer=r.layer=this.layer,this.featuresManager.add(r)}catch{}}_onUpdate(e,t){null!=t&&this.graphics.removeMany(t),null!=e&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}_initUpdateInterval(){this._clearInterval();const{updateInterval:e}=this.layer;let t=performance.now();this._updateIntervalId=setInterval((()=>{const e=performance.now(),r=e-t;if(r>2500){t=e;const s=Math.round(this._updateInfo.client/(r/1e3)),o=Math.round(this._updateInfo.websocket/(r/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:s,websocket:o})}this.featuresManager.checkForUpdates()}),e)}pauseStream(){this.isPaused=!0,this._clearInterval()}resumeStream(){this.isPaused=!1,this._initUpdateInterval()}disconnect(){this._shutdown()}connect(){null==this.connection&&this._startup()}clearGraphics(){this.graphics.clear()}},t.__decorate([n.property()],e.StreamController.prototype,"isPaused",void 0),t.__decorate([n.property({constructOnly:!0})],e.StreamController.prototype,"layer",void 0),t.__decorate([n.property({constructOnly:!0})],e.StreamController.prototype,"layerView",void 0),t.__decorate([n.property()],e.StreamController.prototype,"connection",void 0),t.__decorate([n.property({readOnly:!0})],e.StreamController.prototype,"updating",null),e.StreamController=t.__decorate([h.subclass("esri.layers.graphics.controllers.StreamController")],e.StreamController),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));