// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../request","./loadParquetModule","../../chunks/bundle"],(function(e,t,a,n){"use strict";const r=e=>async function(a,n,r){const o=e(),{data:i}=await t(a,{responseType:"array-buffer",query:o,headers:{range:`bytes=${n}-${r}`},useRequestQueue:!0});return i},o=e=>async function(a){const n=e(),{data:r}=await t(a,{responseType:"native",method:"head",query:n,useRequestQueue:!0}),o=r.headers.get("Content-Length");if(null==o)throw new Error("Unable to parse content length");return parseInt(o,10)};class i{static async create(e,t){const n=await a.loadParquetModule(),s=await n.readMetadata(e,r(t),o(t));return i.fromFileMetadata(s)}static fromFileMetadata(e){const t=[];for(let a=0;a<e.numFields();a++){const n=e.getFieldByIndex(a);t.push({name:n.name,type:n.type,alias:n.name,index:n.index}),n.free()}return new i(e,t)}constructor(e,t){this._inner=e,this.fields=t}destroy(){this._inner.free()}[Symbol.dispose](){this.destroy()}get size(){return this._inner.numRows()}getFieldIndex(e){return this._inner.getFieldIndex(e)}tryReadGeoMetadata(){const e=this._inner.keyValueMetadata("geo");return null==e?null:JSON.parse(e)}tryReadEsriMetadata(){const e=this._inner.keyValueMetadata("esri");return null==e?null:JSON.parse(e)}}function s(e,t,a){const r=n.GeometryInfoDescriptor.new();if(r.geometryType=function(e){switch(e){case"esriGeometryPoint":return n.GeometryType.Point;case"esriGeometryPolygon":return n.GeometryType.Polygon;case"esriGeometryPolyline":return n.GeometryType.Polyline;case"esriGeometryMultipoint":return n.GeometryType.Multipoint;default:throw new Error(`InternalError: Found unexpected GeometryType: ${e}`)}}(e.geometryType),"location"===e.encoding.type)r.latIndex=t.getFieldIndex(e.encoding.latitudeFieldName),r.lngIndex=t.getFieldIndex(e.encoding.longitudeFieldName);else if(r.wkbIndex=t.getFieldIndex(e.encoding.primaryFieldName),e.encoding.multiscale){const a=n.MultiScaleInfo.new();for(const n of e.encoding.multiscale.levels){const[e,r]=n.transform.translate,[o,i]=n.transform.scale,s=t.getFieldIndex(n.column);a.push(s,e,r,o,i)}r.setMultiscaleInfo(a)}return r.inWkid=e.spatialReference.wkid,a&&(r.outWkid=a.wkid),r}class d{static async create(e,t){const n=await a.loadParquetModule(),l=r(t.getCustomParameters),u=o(t.getCustomParameters),c=await n.readMetadata(e,l,u),y=s(t.geometryInfo,c,t.outSpatialReference),m=await n.readFile(e,l,u,c,y);return new d(m,i.fromFileMetadata(m.metadata()))}static async fromFile(e,t,n){const r=await a.loadParquetModule(),o=await r.readMetadataFromFile(e),l=t?s(t,o,n):void 0,u=await r.readFileFromBinary(l,e);return new d(u,i.fromFileMetadata(u.metadata()))}constructor(e,t){this.inner=e,this.metadata=t}destroy(){this.inner.free(),this.metadata.destroy()}[Symbol.dispose](){this.destroy()}}e.ParquetFile=d,e.ParquetMetadata=i,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));