// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","../chunks/tslib.es6","../Graphic","../core/MapUtils","../core/accessorSupport/decorators/property","../core/has","../core/Logger","../core/RandomLCG","../core/accessorSupport/decorators/subclass","../layers/FeatureLayer","../layers/support/featureQueryAll","./Network","./RulesTable","./support/NamedTraceConfiguration","./support/networkFieldUtils","./support/NetworkSystemLayers","./support/TerminalConfiguration","./support/TraceJobInfo","./support/typeUtils","./support/utils","../rest/support/Query"],(function(e,t,r,s,a,i,o,n,l,u,d,c,m,y,p,h,f,g,w,I,b){"use strict";const T=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"}));let S=class extends c{constructor(e){super(e),this.sharedNamedTraceConfigurations=[],this.type="utility",this._terminalById=new Map,this._circuitManagerMap=new Map,this._unitIdentifierManager=null}get serviceTerritoryFeatureLayerId(){return this.dataElement?.serviceTerritoryFeatureLayerId??null}get networkSystemLayers(){return new h({rulesTableId:this.sourceJSON?.systemLayers.rulesTableId,rulesTableUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.sourceJSON?.systemLayers.rulesTableId}`:null,subnetworksTableId:this.sourceJSON?.systemLayers.subnetworksTableId,subnetworksTableUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.sourceJSON?.systemLayers.subnetworksTableId}`:null,dirtyAreasLayerId:this.sourceJSON?.systemLayers.dirtyAreasLayerId,dirtyAreasLayerUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.sourceJSON?.systemLayers.dirtyAreasLayerId}`:null,associationsTableId:this.sourceJSON?.systemLayers.associationsTableId,associationsTableUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.sourceJSON?.systemLayers.associationsTableId}`:null})}get terminalConfigurations(){return this.dataElement?.terminalConfigurations.map((e=>f.fromJSON(e)))||[]}get domainNetworkNames(){return this.dataElement?.domainNetworks.map((e=>e.domainNetworkName))||[]}get _utilityLayerList(){const e=new Set;return this.dataElement?.domainNetworks?.map((t=>{t?.edgeSources?.map((({layerId:t,sourceId:r})=>{this._layerIdBySourceId.set(r,t),this._sourceIdByLayerId.set(t,r),e.add(t)})),t?.junctionSources?.map((({layerId:t,sourceId:r})=>{this._layerIdBySourceId.set(r,t),this._sourceIdByLayerId.set(t,r),e.add(t)}))})),e}get hasTelecomNetwork(){return this.dataElement?.domainNetworks.some((e=>e.isTelecomNetwork))??!1}async load(e){return this.addResolvingPromise(super.load(e)),this.addResolvingPromise(this._loadNamedTraceConfigurationsFromNetwork(e)),this}getTerminalConfiguration(e){let t=null,r=null;const s=e.sourceLayer;let a=null;if("feature"===s?.type){if(a=s.layerId,null===a)return null}else{if("subtype-sublayer"!==s?.type)return null;if(a=s?.parent?.layerId??null,null===a)return null}const i=e.attributes;if(null==i)return null;for(const s of Object.keys(i))"ASSETGROUP"===s.toUpperCase()&&(t=e.getAttribute(s)),"ASSETTYPE"===s.toUpperCase()&&(r=e.getAttribute(s));if(!this.dataElement)return null;let o=null;const n=this.dataElement.domainNetworks;for(const e of n){const s=e.junctionSources?.find((e=>e.layerId===a));if(s){const e=s.assetGroups?.find((e=>e.assetGroupCode===t));if(e){const t=e.assetTypes?.find((e=>e.assetTypeCode===r));if(t?.isTerminalConfigurationSupported){o=t.terminalConfigurationId;break}}}}if(null!=o){const e=this.dataElement.terminalConfigurations,t=e?.find((e=>e.terminalConfigurationId===o));return t?f.fromJSON(t):null}return null}getTierNames(e){const t=this.dataElement?.domainNetworks.find((t=>t.domainNetworkName===e));return t?.tiers?.map((e=>e.name))||[]}async getRulesTable(){return this._sharedRulesTable||(this._sharedRulesTable=this._createRulesTable()),await this._sharedRulesTable}async getCircuitManager(t){if(!this.hasTelecomNetwork)return null;const r=this.dataElement?.domainNetworks.find((e=>e.domainNetworkName===t&&e.isTelecomNetwork));if(!r)return null;const{default:a}=await new Promise(((t,r)=>e(["./CircuitManager"],(e=>t(T(e))),r)));return s.getOrCreateMapValue(this._circuitManagerMap,t,(()=>new a({utilityNetwork:this,telecomDomainNetwork:r})))}async getUnitIdentifierManager(){if(!this.hasTelecomNetwork)return null;if(this._unitIdentifierManager)return this._unitIdentifierManager;const{default:t}=await new Promise(((t,r)=>e(["./UnitIdentifierManager"],(e=>t(T(e))),r)));return this._unitIdentifierManager=new t({utilityNetwork:this}),this._unitIdentifierManager}getTerminalById(e){if(!this.dataElement||null==e)return null;const t=this._terminalById.get(e);return null!=t?t:(this.terminalConfigurations.forEach((e=>{e.terminals.forEach((e=>{this._terminalById.set(e.id,e)}))})),this._terminalById.get(e))}isUtilityLayer(e){return"layerId"in e?this._utilityLayerList.has(e?.layerId)&&(e.url?.startsWith(this.featureServiceUrl)??!1):!("subtype-sublayer"!==e.type||!e.parent)&&this._utilityLayerList.has(e.parent.layerId)&&(e.parent.url?.startsWith(this.featureServiceUrl)??!1)}async queryAssociations(t,r){const[{queryAssociations:s},{default:a}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/queryAssociations"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/QueryAssociationsParameters"],(e=>t(T(e))),r)))]),i=a.from(t);return i.gdbVersion=this.gdbVersion,i.moment=this.historicMoment,(await s(this.networkServiceUrl,i,r)).associations}async synthesizeAssociationGeometries(t){const[{synthesizeAssociationGeometries:r},{default:s}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/synthesizeAssociationGeometries"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/SynthesizeAssociationGeometriesParameters"],(e=>t(T(e))),r)))]),a=s.from(t);return a.gdbVersion=this.gdbVersion,a.moment=this.historicMoment,r(this.networkServiceUrl,a)}async trace(t){const[{trace:r},{default:s}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/trace"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/TraceParameters"],(e=>t(T(e))),r)))]),a=s.from(t);return a.gdbVersion=this.gdbVersion,a.moment=this.historicMoment,r(this.networkServiceUrl,a)}async submitTraceJob(t){const[{submitTraceJob:r},{default:s}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/trace"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/TraceParameters"],(e=>t(T(e))),r)))]),a=s.from(t);a.gdbVersion=this.gdbVersion,a.moment=this.historicMoment;const i=await r(this.networkServiceUrl,a);return new g({statusUrl:i})}async canAddAssociation(e){const t=await this.getRulesTable();if(!t)return!1;const{fromNetworkElement:r,toNetworkElement:s}=e;if(!r||!s)return!1;await t.load();let a=null;switch(e.associationType){case"containment":a=t.rulesCategorized.containment;break;case"attachment":a=t.rulesCategorized.attachment;break;default:a=t.rulesCategorized.connectivity}return a.some((e=>I.doesRuleAllowAssociation(e,r,s)))}generateAddAssociations(e){const{associationsTable:t}=this.networkSystemLayers,{fromNetworkSourceId:s,fromGlobalId:a,fromTerminalId:i,toNetworkSourceId:o,toGlobalId:n,toTerminalId:l,associationType:u,isContentVisible:d,percentAlong:c,globalId:m}=p.getAssociationsTableFields(t);return{addFeatures:e.map((e=>new r({attributes:{[s]:e.fromNetworkElement?.networkSourceId,[a]:e.fromNetworkElement?.globalId,[i]:e.fromNetworkElement?.terminalId,[o]:e.toNetworkElement?.networkSourceId,[n]:e.toNetworkElement?.globalId,[l]:e.toNetworkElement?.terminalId,[u]:w.AssociationTypeEnum[e.associationType],[d]:null==e.isContentVisible?void 0:e.isContentVisible?1:0,[c]:e.percentAlong,[m]:e.globalId}}))),id:this.networkSystemLayers.associationsTableId,identifierFields:{globalIdField:t?.globalIdField??"globalid",objectIdField:t?.objectIdField??"objectid"}}}generateDeleteAssociations(e){const{associationsTable:t,associationsTableId:r}=this.networkSystemLayers;return{deleteFeatures:e.map((e=>({globalId:e.globalId}))),id:r,identifierFields:{globalIdField:t?.globalIdField??"globalid",objectIdField:t?.objectIdField??"objectid"}}}async loadAssociationsTable(){return this.networkSystemLayers.loadAssociationsTable()}async _loadNamedTraceConfigurationsFromNetwork(e){if(0===this.sharedNamedTraceConfigurations?.length)return;const t=this.sharedNamedTraceConfigurations.map((e=>e.globalId)),r=await this.queryNamedTraceConfigurations({globalIds:t},e);for(const e of this.sharedNamedTraceConfigurations){const t=r?.find((t=>t.globalId===e.globalId));if(t){const r=t.write({},{origin:"service"});e.read(r,{origin:"service"})}}}async _createRulesTable(){const e=this.networkSystemLayers.rulesTableUrl,t=new u({url:e});await t.load();const r=this.dataElement?.domainNetworks;if(!r)return null;const s=r.flatMap((e=>[...e.edgeSources||[],...e.junctionSources||[]])),a=(await async function(e){const t=new b({where:"1=1",outFields:["*"]});return(await d.queryAllJSON(e,t)).features}(t)).map((e=>this._hydrateRuleInfo(t,s,e)));return new m({rulesLayer:t,rules:a})}_hydrateRuleInfo(e,t,r){const s=e.fieldsIndex,a=s.get("RULETYPE"),i=s.get("CREATIONDATE"),o=s.get("FROMNETWORKSOURCEID"),n=s.get("FROMASSETGROUP"),l=s.get("FROMASSETTYPE"),u=s.get("FROMTERMINALID"),d=s.get("TONETWORKSOURCEID"),c=s.get("TOASSETGROUP"),m=s.get("TOASSETTYPE"),y=s.get("TOTERMINALID"),p=s.get("VIANETWORKSOURCEID"),h=s.get("VIAASSETGROUP"),f=s.get("VIAASSETTYPE"),g=s.get("VIATERMINALID"),I=r.attributes[a.name],b=new Date(r.attributes[i.name]),T=[{networkSourceId:r.attributes[o.name],assetGroupId:r.attributes[n.name],assetTypeId:r.attributes[l.name],terminalId:r.attributes[u.name]},{networkSourceId:r.attributes[d.name],assetGroupId:r.attributes[c.name],assetTypeId:r.attributes[m.name],terminalId:r.attributes[y.name]},{networkSourceId:r.attributes[p.name],assetGroupId:r.attributes[h.name],assetTypeId:r.attributes[f.name],terminalId:r.attributes[g.name]}];let S;!function(e){e[e.from=0]="from",e[e.to=1]="to",e[e.via=2]="via"}(S||(S={}));const k={ruleType:I,creationDate:b};for(const e of[S.from,S.to,S.via]){if(I!==w.RuleType.RTEdgeJunctionEdgeConnectivity&&e===S.via)continue;const r=T[e],s=t.find((e=>e.sourceId===r.networkSourceId)),a=s?.assetGroups.find((e=>e.assetGroupCode===r.assetGroupId)),i=a?.assetTypes.find((e=>e.assetTypeCode===r.assetTypeId)),o=this._getTerminal(i,r);let n="";switch(e){case S.from:n="from";break;case S.to:n="to";break;case S.via:n="via"}k[`${n}NetworkSource`]=s,k[`${n}AssetGroup`]=a,k[`${n}AssetType`]=i,k[`${n}Terminal`]=o?.toJSON()}return k}_getTerminal(e,t){const r=e?.terminalConfigurationId,s=this.terminalConfigurations?.find((e=>e.id===r));return s?.terminals?.find((e=>e.id===t.terminalId))??null}};return t.__decorate([a.property({type:[y],json:{origins:{"web-map":{read:{source:"traceConfigurations"},write:{target:"traceConfigurations"}},service:{read:{source:"traceConfigurations"}}},read:!1}})],S.prototype,"sharedNamedTraceConfigurations",void 0),t.__decorate([a.property({type:["utility"],readOnly:!0,json:{read:!1,write:!1}})],S.prototype,"type",void 0),t.__decorate([a.property({readOnly:!0})],S.prototype,"serviceTerritoryFeatureLayerId",null),t.__decorate([a.property({readOnly:!0})],S.prototype,"networkSystemLayers",null),t.__decorate([a.property({readOnly:!0})],S.prototype,"terminalConfigurations",null),t.__decorate([a.property({readOnly:!0})],S.prototype,"domainNetworkNames",null),t.__decorate([a.property({readOnly:!0})],S.prototype,"hasTelecomNetwork",null),S=t.__decorate([l.subclass("esri.networks.UtilityNetwork")],S),S}));