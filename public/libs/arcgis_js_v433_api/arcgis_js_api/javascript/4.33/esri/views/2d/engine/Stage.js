// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../core/Error","../../../core/has","../../../core/maybe","../../../core/scheduling","../../../core/signal","../../../core/libs/gl-matrix-2/factories/mat3f32","../../../symbols/cim/cimAnalyzer","./Container","./webgl/definitions","./webgl/enums","./webgl/Painter","./webgl/PooledUint32Array","./webgl/Profiler","./webgl/TileReshuffleManager","./webgl/shaderGraph/techniques/TechniqueRegistry","./webgl/shaderGraph/techniques/mesh/MeshWriterRegistry","../support/Timeline","../../webgl/enums","../../webgl/FramebufferObject","../../webgl/RenderbufferDescriptor","../../webgl/RenderingContext","../../webgl/TextureDescriptor"],(function(e,t,r,s,i,a,n,o,h,d,l,u,c,g,m,p,_,f,b,w,R,y,P,x){"use strict";class C extends d.Container{constructor(e,t,i){super(),this.meshWriterRegistry=new f.MeshWriterRegistry,this._trash=new Set,this._renderRemainingTime=0,this._lastFrameRenderTime=0,this._renderRequested=n.signal(!1),this.stage=this,this._stationary=!0,this._reshuffleManager=new p.TileReshuffleManager,this._managedCanvas=i,this.context=new P.RenderingContext(this._managedCanvas.gl,t.contextOptions??{}),this.painter=new c(this.context,this),this._cimAnalyzer=new h.CIMAnalyzer(this.painter.textureManager.resourceManager),s("esri-2d-profiler")&&null!=e&&(this._debugOutput=document.createElement("div"),this._debugOutput.setAttribute("style","margin: 24px 64px; position: absolute; color: red;"),e.appendChild(this._debugOutput));const o=()=>this.highlightGradient;this._renderParameters={drawPhase:0,state:this.state,pixelRatio:window.devicePixelRatio,stationary:!1,globalOpacity:1,blendMode:null,deltaTime:-1,time:0,inFadeTransition:!1,effects:null,context:this.context,painter:this.painter,timeline:t.timeline||new b.Timeline,renderingOptions:t.renderingOptions,requestRender:()=>this.requestRender(),allowDelayedRender:!1,requireFBO:!1,profiler:new m.Profiler(this.context,this._debugOutput),dataUploadCounter:0,get highlightGradient(){return o()},reshuffleManager:this._reshuffleManager,backgroundColor:t.backgroundColor};let d=e=>this.renderFrame(e);null!=t.renderFrame&&(d=t.renderFrame),this._taskHandle=a.addFrameTask({render:e=>d(e)}),this._taskHandle.pause(),this._lostWebGLContextHandle=this._managedCanvas.events.on("webgl-context-lost",(e=>this.emit("webgl-error",{error:new r("webgl-context-lost",e.statusMessage)}))),this._bufferPool=new g.ArrayBufferPool,_.startup()}destroy(){_.shutdown(this.context),this.removeAllChildren(),this._emptyTrash(),this._taskHandle=i.removeMaybe(this._taskHandle),this._lostWebGLContextHandle=i.removeMaybe(this._lostWebGLContextHandle),this._managedCanvas.destroy(),this._debugOutput?.parentNode?.removeChild(this._debugOutput),this._bufferPool.destroy(),this.painter.dispose(),this.context.dispose(),this._managedCanvas=null}get textureManager(){return this.painter.textureManager}get backgroundColor(){return this._renderParameters.backgroundColor}set backgroundColor(e){this._renderParameters.backgroundColor=e,this.requestRender()}get canvas(){return this._managedCanvas.canvas}get bufferPool(){return this._bufferPool}get cimAnalyzer(){return this._cimAnalyzer}get renderingOptions(){return this._renderingOptions}set renderingOptions(e){this._renderingOptions=e,this.requestRender()}get renderRequested(){return this._renderRequested.value}get state(){return this._state}set state(e){this._state=e,this.requestRender()}get stationary(){return this._stationary}set stationary(e){this._stationary!==e&&(this._stationary=e,this.requestRender())}trashDisplayObject(e){this._trash.add(e),this.requestRender()}untrashDisplayObject(e){return this._trash.delete(e)}requestRender(){this._renderRemainingTime=2e3,this.renderRequested||(this._renderRequested.value=!0,this._taskHandle.resume())}renderFrame(e){const t=this._lastFrameRenderTime?e.time-this._lastFrameRenderTime:0;this._renderRemainingTime-=t,this._renderRemainingTime<=0&&this._taskHandle.pause(),this._lastFrameRenderTime=e.time,this._renderRequested.value=!1,this._renderParameters.state=this._state,this._renderParameters.stationary=this.stationary,this._renderParameters.pixelRatio=window.devicePixelRatio,this._renderParameters.globalOpacity=1,this._renderParameters.time=e.time,this._renderParameters.deltaTime=e.deltaTime,this._renderParameters.effects=null,this.processRender(this._renderParameters),this._emptyTrash()}_createTransforms(){return{displayViewScreenMat3:o.create()}}renderChildren(e){for(const t of this.children)t.beforeRender(e);this._reshuffleManager.reshuffle(l.MAX_TILE_RESHUFFLES_PER_FRAME),this._managedCanvas.render(e,(()=>this._renderChildren(this.children,e)));for(const t of this.children)t.afterRender(e)}_renderChildren(e,t){const r=this.context;this.painter.textureUploadManager.upload(),r.resetInfo(),t.profiler.recordStart("drawLayers"),t.dataUploadCounter=0,this.painter.beforeRenderPhases(t,t.backgroundColor,this.state.padding),t.drawPhase=u.WGLDrawPhase.MAP;for(const r of e)r.processRender(t);if(this.children.some((e=>e.hasHighlight))){t.drawPhase=u.WGLDrawPhase.HIGHLIGHT;for(const r of e)r.processRender(t)}if(this.children.some((e=>e.hasLabels))){t.drawPhase=u.WGLDrawPhase.LABEL;for(const r of e)r.processRender(t)}if(s("esri-tiles-debug")){t.drawPhase=u.WGLDrawPhase.DEBUG;for(const r of e)r.processRender(t)}this.painter.afterRenderPhases(t),t.profiler.recordEnd("drawLayers"),r.logInfo()}doRender(e){const t=this.context,{state:r,pixelRatio:s}=e;this._managedCanvas.resize(e),t.setViewport(0,0,s*r.size[0],s*r.size[1]),t.setDepthWriteEnabled(!0),t.setStencilWriteMask(255),this.renderChildren(e)}async takeScreenshot(t,r,s,i){const a=Math.round(this.state.size[0]*t.resolutionScale),n=Math.round(this.state.size[1]*t.resolutionScale),o=t.resolutionScale,h=this.context,d=this._state.clone();if(null!=i){const e=d.viewpoint;d.viewpoint.rotation=i,d.viewpoint=e}const l={...this._renderParameters,drawPhase:null,globalOpacity:1,stationary:!0,state:d,pixelRatio:o,time:performance.now(),deltaTime:0,blendMode:null,effects:null,inFadeTransition:!1,backgroundColor:s},u=new x.TextureDescriptor(a,n);u.wrapMode=w.TextureWrapMode.CLAMP_TO_EDGE,u.internalFormat=w.SizedPixelFormat.RGBA8,u.isImmutable=!0;const c=new R.FramebufferObject(h,u,new y.RenderbufferDescriptor(w.SizedDepthStencilFormat.DEPTH24_STENCIL8,a,n)),g=h.getBoundFramebufferObject(),m=h.getViewport();h.bindFramebuffer(c),h.setViewport(0,0,a,n),this._renderChildren(r??this.children,l);const p=this._readbackScreenshot(c,{...t.cropArea,y:n-(t.cropArea.y+t.cropArea.height)});h.bindFramebuffer(g),h.setViewport(m.x,m.y,m.width,m.height),this.requestRender();const _=await p;let f;return 1===t.outputScale?f=_:(f=new ImageData(Math.round(_.width*t.outputScale),Math.round(_.height*t.outputScale)),(await new Promise(((t,r)=>e(["../../support/screenshotUtils"],t,r)))).resampleHermite(_,f,!0)),c.dispose(),f}async _readbackScreenshot(t,r){const s=(await new Promise(((t,r)=>e(["../../support/screenshotUtils"],t,r)))).createEmptyImageData(r.width,r.height,document.createElement("canvas"));return await t.readPixelsAsync(r.x,r.y,r.width,r.height,w.PixelFormat.RGBA,w.PixelType.UNSIGNED_BYTE,new Uint8Array(s.data.buffer)),s}_emptyTrash(){for(;this._trash.size>0;){const e=Array.from(this._trash);this._trash.clear();for(const t of e)t.processDetach()}}}t.Stage=C,t.extraRenderTime=2e3,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));