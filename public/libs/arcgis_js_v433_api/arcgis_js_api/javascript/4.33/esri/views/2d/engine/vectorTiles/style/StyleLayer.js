// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../geometry/support/aaBoundingRect","../constants","../enums","../GeometryUtils","../shaders/VTLBackgroundMaterial","../shaders/VTLCircleMaterial","../shaders/VTLFillMaterial","../shaders/VTLLineMaterial","../shaders/VTLSymbolMaterial","./Filter","./StyleDefinition","./StyleProperty","../../webgl/definitions"],(function(t,i,e,a,r,n,o,s,l,h,u,y,p,g){"use strict";var c;t.CapType=void 0,(c=t.CapType||(t.CapType={}))[c.BUTT=0]="BUTT",c[c.ROUND=1]="ROUND",c[c.SQUARE=2]="SQUARE",c[c.UNKNOWN=4]="UNKNOWN";class P{constructor(t,i,e,a){switch(this.type=t,this.typeName=i.type,this.id=i.id,this.source=i.source,this.sourceLayer=i["source-layer"],this.minzoom=i.minzoom,this.maxzoom=i.maxzoom,this.filter=i.filter,this.layout=i.layout,this.paint=i.paint,this.z=e,this.uid=a,t){case y.StyleLayerType.BACKGROUND:this._layoutDefinition=y.StyleDefinition.backgroundLayoutDefinition,this._paintDefinition=y.StyleDefinition.backgroundPaintDefinition;break;case y.StyleLayerType.FILL:this._layoutDefinition=y.StyleDefinition.fillLayoutDefinition,this._paintDefinition=y.StyleDefinition.fillPaintDefinition;break;case y.StyleLayerType.LINE:this._layoutDefinition=y.StyleDefinition.lineLayoutDefinition,this._paintDefinition=y.StyleDefinition.linePaintDefinition;break;case y.StyleLayerType.SYMBOL:this._layoutDefinition=y.StyleDefinition.symbolLayoutDefinition,this._paintDefinition=y.StyleDefinition.symbolPaintDefinition;break;case y.StyleLayerType.CIRCLE:this._layoutDefinition=y.StyleDefinition.circleLayoutDefinition,this._paintDefinition=y.StyleDefinition.circlePaintDefinition}this._layoutProperties=this._parseLayout(this.layout),this._paintProperties=this._parsePaint(this.paint)}getFeatureFilter(){return void 0!==this._featureFilter?this._featureFilter:this._featureFilter=u.createFilter(this.filter)}getLayoutProperty(t){return this._layoutProperties[t]}getPaintProperty(t){return this._paintProperties[t]}getLayoutValue(t,i,e){let a;const r=this._layoutProperties[t];return r&&(a=r.getValue(i,e)),void 0===a&&(a=this._layoutDefinition[t].default),a}getPaintValue(t,i,e){let a;const r=this._paintProperties[t];return r&&(a=r.getValue(i,e)),void 0===a&&(a=this._paintDefinition[t].default),a}isPainterDataDriven(){const t=this._paintProperties;if(t)for(const i in t)if(t[i].isDataDriven)return!0;return!1}isIntersectingFeature(t,i,e,a,r,n,o){return!1}getFeatureInflatedBounds(t,i,e,a){return null}_parseLayout(t){const i={};for(const e in t){const a=this._layoutDefinition[e];a&&(i[e]=new p(a,t[e]))}return i}_parsePaint(t){const i={};for(const e in t){const a=this._paintDefinition[e];a&&(i[e]=new p(a,t[e]))}return i}computeAttributesKey(t,i,e,a){let r=0,n=0;for(const t of i){let i=3;if(!t||t!==a){const a=e[t],{isLayout:r,isOptional:n}=a,o=r?this.getLayoutProperty(t):this.getPaintProperty(t);i=o?.interpolator?2:o?.isDataDriven?1:n&&!o?3:0}n|=i<<r,r+=2}return n<<3|t}}function D(t){const e=t?.getGeometry();if(null==e)return null;let a=1/0,r=1/0,n=-1/0,o=-1/0;for(const t of e)if(t)for(const i of t)a=Math.min(a,i.x),r=Math.min(r,i.y),n=Math.max(n,i.x),o=Math.max(o,i.y);return i.fromValues(a,r,n,o)}t.BackgroundStyleLayer=class extends P{constructor(t,i,e,r){super(t,i,e,r),this.backgroundMaterial=new n.VTLBackgroundMaterial(this.computeAttributesKey(a.ShaderProgramType.BACKGROUND,n.VTLBackgroundMaterial.ATTRIBUTES,n.VTLBackgroundMaterial.ATTRIBUTES_INFO))}},t.CircleStyleLayer=class extends P{constructor(t,i,e,r){super(t,i,e,r),this.circleMaterial=new o.VTLCircleMaterial(this.computeAttributesKey(a.ShaderProgramType.CIRCLE,o.VTLCircleMaterial.ATTRIBUTES,o.VTLCircleMaterial.ATTRIBUTES_INFO))}getFeatureInflatedBounds(t,i,a,r){const n=D(t);if(!n)return null;const o=this.getPaintValue("circle-translate",i,t),s=Math.max(o[0],o[1]);n[0]-=s,n[2]-=s,n[1]+=s,n[3]+=s;const l=r*(e.tilePixelRatio*(this.getPaintValue("circle-radius",i,t)+this.getPaintValue("circle-stroke-width",i,t))/2);return n[0]-=l,n[1]-=l,n[2]+=l,n[3]+=l,n}isIntersectingFeature(t,i,a,n,o,s,l){const h=n.getGeometry();if(!h)return!1;const u=e.tilePixelRatio/l.normalizationRatio;t=t/l.normalizationRatio+l.normalizationOffsetX,i=i/l.normalizationRatio+l.normalizationOffsetY,a*=u;const y=r.translateAnchor(this.getPaintValue("circle-translate",o,n),this.getPaintValue("circle-translate-anchor",o,n),s,u),p=u*(this.getPaintValue("circle-radius",o,n)+this.getPaintValue("circle-stroke-width",o,n));let g,c;for(const e of h)if(e)for(const r of e)if(g=r.x+y.x,c=r.y+y.y,Math.sqrt((t-g)*(t-g)+(i-c)*(i-c))-a<=p)return!0;return!1}},t.FillStyleLayer=class extends P{constructor(t,i,e,r){super(t,i,e,r);const n=this.getPaintProperty("fill-color"),o=this.getPaintProperty("fill-opacity"),l=this.getPaintProperty("fill-pattern");this.hasDataDrivenColor=n?.isDataDriven,this.hasDataDrivenOpacity=o?.isDataDriven,this.hasDataDrivenFill=this.hasDataDrivenColor||this.hasDataDrivenOpacity||l?.isDataDriven;const h=this.getPaintProperty("fill-outline-color");this.outlineUsesFillColor=!h,this.hasDataDrivenOutlineColor=h?.isDataDriven,this.hasDataDrivenOutline=h?h.isDataDriven:!!n&&n.isDataDriven,this.hasDataDrivenOutline=(h?this.hasDataDrivenOutlineColor:this.hasDataDrivenColor)||this.hasDataDrivenOpacity,this.fillMaterial=new s.VTLFillMaterial(this.computeAttributesKey(a.ShaderProgramType.FILL,s.VTLFillMaterial.ATTRIBUTES,s.VTLFillMaterial.ATTRIBUTES_INFO)),this.outlineMaterial=new s.VTLOutlineMaterial(this.computeAttributesKey(a.ShaderProgramType.OUTLINE,this.outlineUsesFillColor?s.VTLOutlineMaterial.ATTRIBUTES_FILL:s.VTLOutlineMaterial.ATTRIBUTES_OUTLINE,this.outlineUsesFillColor?s.VTLOutlineMaterial.ATTRIBUTES_INFO_FILL:s.VTLOutlineMaterial.ATTRIBUTES_INFO_OUTLINE),this.outlineUsesFillColor)}getFeatureInflatedBounds(t,i,e,a){const r=D(t);if(!r)return null;const n=this.getPaintValue("fill-translate",i,t),o=a*Math.max(n[0],n[1]);return r[0]-=o,r[2]-=o,r[1]+=o,r[3]+=o,r}isIntersectingFeature(t,i,a,n,o,s,l){const h=n.getGeometry();if(!h)return!1;const u=e.tilePixelRatio/l.normalizationRatio;t=t/l.normalizationRatio+l.normalizationOffsetX,i=i/l.normalizationRatio+l.normalizationOffsetY;const y=r.translateAnchor(this.getPaintValue("fill-translate",o,n),this.getPaintValue("fill-translate-anchor",o,n),s,e.tilePixelRatio);return t-=u*y.x,i-=u*y.y,!!r.pointInPolygon(t,i,h)||r.distanceFromToPolylineWithinThreshold(t,i,h,u*a)}},t.IconLayout=class{constructor(t,i,e){let a;this.allowOverlap=t.getLayoutValue("icon-allow-overlap",i),this.ignorePlacement=t.getLayoutValue("icon-ignore-placement",i),this.keepUpright=t.getLayoutValue("icon-keep-upright",i),this.optional=t.getLayoutValue("icon-optional",i),this.rotationAlignment=t.getLayoutValue("icon-rotation-alignment",i),this.rotationAlignment===y.RotationAlignment.AUTO&&(this.rotationAlignment=e?y.RotationAlignment.MAP:y.RotationAlignment.VIEWPORT),a=t.getLayoutProperty("icon-anchor"),a?.isDataDriven?this._anchorProp=a:this.anchor=t.getLayoutValue("icon-anchor",i),a=t.getLayoutProperty("icon-offset"),a?.isDataDriven?this._offsetProp=a:this.offset=t.getLayoutValue("icon-offset",i),a=t.getLayoutProperty("icon-padding"),a?.isDataDriven?this._paddingProp=a:this.padding=t.getLayoutValue("icon-padding",i),a=t.getLayoutProperty("icon-rotate"),a?.isDataDriven?this._rotateProp=a:this.rotate=t.getLayoutValue("icon-rotate",i),a=t.getLayoutProperty("icon-size"),a?.isDataDriven?this._sizeProp=a:this.size=t.getLayoutValue("icon-size",i)}update(t,i){this._anchorProp&&(this.anchor=this._anchorProp.getValue(t,i)),this._offsetProp&&(this.offset=this._offsetProp.getValue(t,i)),this._paddingProp&&(this.padding=this._paddingProp.getValue(t,i)),this._rotateProp&&(this.rotate=this._rotateProp.getValue(t,i)),this._sizeProp&&(this.size=this._sizeProp.getValue(t,i))}},t.IndexItem=class{constructor(t,i,e,a,r,n){this.layer=t,this.feature=i,this.bounds=e,this.normalizationRatio=a,this.normalizationOffsetX=r,this.normalizationOffsetY=n}},t.LineStyleLayer=class extends P{constructor(t,i,e,r){super(t,i,e,r);const n=this.getPaintProperty("line-pattern");if(this.lineMaterial=new l.VTLLineMaterial(this.computeAttributesKey(a.ShaderProgramType.LINE,l.VTLLineMaterial.ATTRIBUTES,l.VTLLineMaterial.ATTRIBUTES_INFO,n?"line-dasharray":"")),this.hasDataDrivenLine=this.getPaintProperty("line-blur")?.isDataDriven||this.getPaintProperty("line-color")?.isDataDriven||this.getPaintProperty("line-gap-width")?.isDataDriven||this.getPaintProperty("line-offset")?.isDataDriven||this.getPaintProperty("line-opacity")?.isDataDriven||this.getPaintProperty("line-pattern")?.isDataDriven||this.getPaintProperty("line-dasharray")?.isDataDriven||this.getLayoutProperty("line-cap")?.isDataDriven||this.getPaintProperty("line-width")?.isDataDriven,this.canUseThinTessellation=!1,!this.hasDataDrivenLine){const t=this.getPaintProperty("line-width");if(!t||"number"==typeof t&&.5*t<g.thinLineHalfWidthThreshold){const t=this.getPaintProperty("line-offset");(!t||"number"==typeof t&&0===t)&&(this.canUseThinTessellation=!0)}}}getDashKey(i,e){let a;switch(e){case t.CapType.BUTT:a="Butt";break;case t.CapType.ROUND:a="Round";break;case t.CapType.SQUARE:a="Square";break;default:a="Butt"}return`dasharray-[${i.toString()}]-${a}`}getFeatureInflatedBounds(t,i,e,a){const r=D(t);if(!r)return null;const n=this.getPaintValue("line-translate",i,t),o=a*Math.max(n[0],n[1]);r[0]-=o,r[2]-=o,r[1]+=o,r[3]+=o;const s=a*Math.abs(this.getPaintValue("line-offset",i,t)||0),l=a*(this.getPaintValue("line-width",i,t)/2);return r[0]-=s+l,r[1]-=s+l,r[2]+=s+l,r[3]+=s+l,r}isIntersectingFeature(t,i,a,n,o,s,l){let h=n.getGeometry();if(!h)return!1;const u=e.tilePixelRatio/l.normalizationRatio;t=t/l.normalizationRatio+l.normalizationOffsetX,i=i/l.normalizationRatio+l.normalizationOffsetY;const y=r.translateAnchor(this.getPaintValue("line-translate",o,n),this.getPaintValue("line-translate-anchor",o,n),s,e.tilePixelRatio);t-=u*y.x,i-=u*y.y;const p=u*this.getPaintValue("line-offset",o,n)||0;0!==p&&(h=r.offsetLine(h,-p));const g=this.getPaintValue("line-width",o,n)/2;return r.distanceFromToPolylineWithinThreshold(t,i,h,u*(a+g))}},t.StyleLayer=P,t.SymbolStyleLayer=class extends P{constructor(t,i,e,r){super(t,i,e,r),this.iconMaterial=new h.VTLIconMaterial(this.computeAttributesKey(a.ShaderProgramType.ICON,h.VTLIconMaterial.ATTRIBUTES,h.VTLIconMaterial.ATTRIBUTES_INFO)),this.textMaterial=new h.VTLTextMaterial(this.computeAttributesKey(a.ShaderProgramType.TEXT,h.VTLTextMaterial.ATTRIBUTES,h.VTLTextMaterial.ATTRIBUTES_INFO)),this.hasDataDrivenIcon=this.getPaintProperty("icon-color")?.isDataDriven||this.getPaintProperty("icon-halo-blur")?.isDataDriven||this.getPaintProperty("icon-halo-color")?.isDataDriven||this.getPaintProperty("icon-halo-width")?.isDataDriven||this.getPaintProperty("icon-opacity")?.isDataDriven||this.getLayoutProperty("icon-size")?.isDataDriven,this.hasDataDrivenText=this.getPaintProperty("text-color")?.isDataDriven||this.getPaintProperty("text-halo-blur")?.isDataDriven||this.getPaintProperty("text-halo-color")?.isDataDriven||this.getPaintProperty("text-halo-width")?.isDataDriven||this.getPaintProperty("text-opacity")?.isDataDriven||this.getLayoutProperty("text-size")?.isDataDriven}},t.TextLayout=class{constructor(t,i,e){let a;this.allowOverlap=t.getLayoutValue("text-allow-overlap",i),this.ignorePlacement=t.getLayoutValue("text-ignore-placement",i),this.keepUpright=t.getLayoutValue("text-keep-upright",i),this.optional=t.getLayoutValue("text-optional",i),this.rotationAlignment=t.getLayoutValue("text-rotation-alignment",i),this.rotationAlignment===y.RotationAlignment.AUTO&&(this.rotationAlignment=e?y.RotationAlignment.MAP:y.RotationAlignment.VIEWPORT),a=t.getLayoutProperty("text-anchor"),a?.isDataDriven?this._anchorProp=a:this.anchor=t.getLayoutValue("text-anchor",i),a=t.getLayoutProperty("text-justify"),a?.isDataDriven?this._justifyProp=a:this.justify=t.getLayoutValue("text-justify",i),a=t.getLayoutProperty("text-letter-spacing"),a?.isDataDriven?this._letterSpacingProp=a:this.letterSpacing=t.getLayoutValue("text-letter-spacing",i),a=t.getLayoutProperty("text-line-height"),a?.isDataDriven?this._lineHeightProp=a:this.lineHeight=t.getLayoutValue("text-line-height",i),a=t.getLayoutProperty("text-max-angle"),a?.isDataDriven?this._maxAngleProp=a:this.maxAngle=t.getLayoutValue("text-max-angle",i),a=t.getLayoutProperty("text-max-width"),a?.isDataDriven?this._maxWidthProp=a:this.maxWidth=t.getLayoutValue("text-max-width",i),a=t.getLayoutProperty("text-offset"),a?.isDataDriven?this._offsetProp=a:this.offset=t.getLayoutValue("text-offset",i),a=t.getLayoutProperty("text-padding"),a?.isDataDriven?this._paddingProp=a:this.padding=t.getLayoutValue("text-padding",i),a=t.getLayoutProperty("text-rotate"),a?.isDataDriven?this._rotateProp=a:this.rotate=t.getLayoutValue("text-rotate",i),a=t.getLayoutProperty("text-size"),a?.isDataDriven?this._sizeProp=a:this.size=t.getLayoutValue("text-size",i),a=t.getLayoutProperty("text-writing-mode"),a?.isDataDriven?this._writingModeProp=a:this.writingMode=t.getLayoutValue("text-writing-mode",i)}update(t,i){this._anchorProp&&(this.anchor=this._anchorProp.getValue(t,i)),this._justifyProp&&(this.justify=this._justifyProp.getValue(t,i)),this._letterSpacingProp&&(this.letterSpacing=this._letterSpacingProp.getValue(t,i)),this._lineHeightProp&&(this.lineHeight=this._lineHeightProp.getValue(t,i)),this._maxAngleProp&&(this.maxAngle=this._maxAngleProp.getValue(t,i)),this._maxWidthProp&&(this.maxWidth=this._maxWidthProp.getValue(t,i)),this._offsetProp&&(this.offset=this._offsetProp.getValue(t,i)),this._paddingProp&&(this.padding=this._paddingProp.getValue(t,i)),this._rotateProp&&(this.rotate=this._rotateProp.getValue(t,i)),this._sizeProp&&(this.size=this._sizeProp.getValue(t,i)),this._writingModeProp&&(this.writingMode=this._writingModeProp.getValue(t,i))}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));