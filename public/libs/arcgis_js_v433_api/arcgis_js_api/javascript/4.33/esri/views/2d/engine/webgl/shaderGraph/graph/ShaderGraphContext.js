// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","./ShaderGraphNode"],(function(e,t){"use strict";class d{constructor(e,t,d){this.variableName=e,this.variableInputType=t,this.node=d,this.type="shader-input",this.isUsed=!1}clone(){return new d(this.variableName,this.variableInputType,t.cloneShaderNode(this.node))}}class o{constructor(e,t,d){this.outVariableName=e,this.outVariableType=t,this.node=d,this.type="shader-output"}clone(){const e=new o(this.outVariableName,this.outVariableType,t.cloneShaderNode(this.node));return e.variableName=this.variableName,e}}class a{static createVertex(e,t,n,i,r,s){const u=[];for(const t in e){const o=e[t],a=n.get(t);a?u.push(new d(a,"builtin",o)):u.push(new d("a_"+t,"in",o))}for(const e of i){const t=e.uniformHydrated;u.push(new d(e.uniformName,"uniform",t))}const p=[];for(const e in t){const d=t[e];"glPosition"===e?p.push(new o("gl_Position","builtin",d)):"glPointSize"===e?p.push(new o("gl_PointSize","builtin",d)):p.push(new o("v_"+e,"out",d))}return new a(u,p,r,s)}static createFragment(e,t,n,i,r,s){const u=[],p=Array.from(r.rootOutputNodes());for(const t in e){const o=e[t],a=n.get(t);if(a){u.push(new d(a,"builtin",o));continue}const i=p.find((e=>e.node===o));i&&u.push(new d(i.outVariableName,"in",o))}for(const e of i){const t=e.uniformHydrated;u.push(new d(e.uniformName,"uniform",t))}const h=[];for(const e in t){const d=t[e],a=n.get(e);"discard"===e?h.push(new o(null,"discard",d)):a?h.push(new o(a,"builtin",d)):h.push(new o(e,"out",d))}return new a(u,h,s)}constructor(e,t,d,o){this.type="shader-graph-context",this.indent=0,this.body="",this.varCount=0,this._inputShaderTypesByNodeUid=new Map,this._nodeEmitMap=new Map;for(const t of e)this._inputShaderTypesByNodeUid.set(t.node.uid,t);this._outputShaderTypes=t,this._transformFeedbackBindings=d,this._transformFeedbackNames=new Set(d.map((e=>"v_"+e.propertyKey))),this._usedInFragmentShader=o}shouldPruneOutputNode(e){return!!this._usedInFragmentShader&&"builtin"!==e.outVariableType&&!this._transformFeedbackNames.has(e.outVariableName)&&!this._usedInFragmentShader.has(e.node.uid)}setEmit(e,t){this._nodeEmitMap.set(e.uid,t)}getEmit(e){return this._nodeEmitMap.get(e.uid)}inputs(){return this._inputShaderTypesByNodeUid.values()}getInput(e){return this._inputShaderTypesByNodeUid.get(e.uid)}*rootOutputNodes(){for(const e of this._outputShaderTypes)yield e}*nodes(){const e=[];for(const t of this._outputShaderTypes.values())e.push(t.node);for(;e.length;){const t=e.pop();"number"!=typeof t&&"boolean"!=typeof t&&e.push(...t.children.filter(Boolean)),yield t}}*nodesOfTypeOrFunction(){for(const e of this.nodes())"number"!=typeof e&&"boolean"!=typeof e&&(yield e)}createSubgraphContext(){const e=this.clone();return e.body="",e.indent=this.indent+2,e._nodeEmitMap=new Map(this._nodeEmitMap),e}clone(){const e=new a([],this._outputShaderTypes,this._transformFeedbackBindings,this._usedInFragmentShader);return e._inputShaderTypesByNodeUid=this._inputShaderTypesByNodeUid,e.indent=this.indent,e.body=this.body,e.varCount=this.varCount,e._nodeEmitMap=this._nodeEmitMap,e}insertVertexShader(e){e.vertex.code.add(""),this._insertInputs(e,"vertex"),e.vertex.code.add(""),e.vertex.code.add("// OUTPUTS: "),e.vertex.code.add("// --------------------------------------------------------- ");for(const t of this.rootOutputNodes()){const d="builtin"===t.outVariableType;this.shouldPruneOutputNode(t)||(d?e.vertex.code.add(`// ${t.outVariableType.padEnd(7)} ${t.node.type.padEnd(9)} ${t.outVariableName};`):e.vertex.code.add(`${t.outVariableType.padEnd(10)} ${t.node.type.padEnd(9)} ${t.outVariableName};`))}e.vertex.code.add(""),e.vertex.code.add("void main() {"),e.vertex.code.add("  "+this.body.split("\n").join("\n  "));for(const t of this.rootOutputNodes())this.shouldPruneOutputNode(t)||e.vertex.code.add(`  ${t.outVariableName} = ${t.variableName};`);e.vertex.code.add("}")}insertFragmentShader(e){this._insertInputs(e,"fragment"),e.fragment.code.add(""),e.fragment.code.add("// OUTPUTS: "),e.fragment.code.add("// --------------------------------------------------------- ");let t=0;for(const d of this.rootOutputNodes())"builtin"===d.outVariableType?e.fragment.code.add(`// ${d.outVariableType.padEnd(7)} ${d.node.type.padEnd(9)} ${d.outVariableName};`):e.outputs.add(d.outVariableName,d.node.type,t++);e.fragment.code.add(""),e.fragment.code.add("void main() {"),e.fragment.code.add("  "+this.body.split("\n").join("\n  "));for(const t of this.rootOutputNodes())"discard"===t.outVariableType?(e.fragment.code.add("  // TODO: Should ensure codegen for discard appears first in fragment shader"),e.fragment.code.add(`  if (${t.variableName}) {`),e.fragment.code.add("    discard;"),e.fragment.code.add("  }"),e.fragment.code.add("  ")):e.fragment.code.add(`  ${t.outVariableName} = ${t.variableName};`);e.fragment.code.add("}")}_insertInputs(e,t){e[t].code.add("// INPUTS: "),e[t].code.add("// --------------------------------------------------------- ");for(const d of this.inputs())d.isUsed&&"builtin"!==d.variableInputType&&("array"===d.node.type?e[t].code.add(`${d.variableInputType.padEnd(10)} ${d.node.elementType.type.padEnd(9)} ${d.variableName}[${d.node.size}];`):"array-2d"===d.node.type?e[t].code.add(`${d.variableInputType.padEnd(10)} ${d.node.elementType.type.padEnd(9)} ${d.variableName}[${d.node.size}]; // Emulated 2D Array. Not supported by ES3.0`):e[t].code.add(`${d.variableInputType.padEnd(10)} ${d.node.type.padEnd(9)} ${d.variableName};`))}}e.ShaderGraphContext=a,e.ShaderInput=d,e.ShaderOutput=o,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));