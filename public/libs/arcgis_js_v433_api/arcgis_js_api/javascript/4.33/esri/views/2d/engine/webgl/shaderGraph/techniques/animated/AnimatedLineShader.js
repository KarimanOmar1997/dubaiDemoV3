// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../GraphShaderModule","../../graph/glsl","./AAnimatedPolyShader","./AAnimatedShader","./enums","../shaders/hittestUtils","../shaders/LineShader"],(function(t,e,i,o,a,n,s,l,r){"use strict";class d extends a.PolyVertexInput{}e.__decorate([i.location(10,o.Float)],d.prototype,"accumulatedDistance",void 0),e.__decorate([i.location(11,o.Vec2)],d.prototype,"normal",void 0),e.__decorate([i.location(12,o.Vec2)],d.prototype,"segmentDirection",void 0);class c extends a.PolyFragmentInput{}class m extends a.AAnimatedPolyShader{constructor(){super(...arguments),this.type="AnimatedLineShader",this.computeAttributes={pos:["nextPos1","nextPos2"]}}vertex(t,e){const{animationPointerAndBaseSizeAndReferenceSize:i}=t,a=i.xy,{distanceToPx:l,ndc:r,z:d,color:c,isOutline:m,strokeWidth:u,isSDF:p,baseSize:y,scale:h,scaleSymbolsProportionally:x,evalParams:P}=this._vertexPoly(t),S=t.sizing.xy,v=S.x.multiply(y).divide(S.y),g=n.getValue(a,s.AnimationParamIndex.shift,P).a,w=t.accumulatedDistance.subtract(g),{normal:_}=t,b=t.normal.y,F=w.divide(this.view.displayZoomFactor).add(o.dot(t.segmentDirection,t.offset)).divide(v),f=b.add(1).divide(2),A=new o.Vec2(F,f),z=t.tlbr.divide(this.mosaicInfo.size.xyxy);return{glPosition:new o.Vec4(r,d,1),tlbr:z,uv:A,color:c.multiply(new o.Float(1).subtract(m)),outlineColor:c.multiply(m),distanceToPx:l,strokeWidth:u.multiply(o.mix(new o.Float(1),h,x)),isOutline:m,isSDF:p,halfWidth:y.divide(2),normal:_,...this.maybeRunHittest(t,e,{pos:t.pos,size:y,sizeCorrection:new o.Float(1),isMapAligned:new o.Float(1),vvRotationMat3:new o.Mat3(1,0,0,0,1,0,0,0,1),placementMat3:new o.Mat3(1,0,0,0,1,0,0,0,1),outlineSize:new o.Float(1),distanceToPx:l,isSDF:p})}}fragment(t){const e=this._fragmentPoly(t),{halfWidth:i,normal:a}=t,n=r.getLineThinFactor(i),s=o.length(a).multiply(i),l=o.clamp(n.multiply(i.subtract(s)).divide(n.subtract(new o.Float(1))),new o.Float(0),new o.Float(1));return this.getFragmentOutput(e.multiply(l),t)}hittest(t,e,i){const{viewMat3:a,tileMat3:n}=this.view,s=a.multiply(n),r=s.multiply(new o.Vec3(t.pos,1)),d=s.multiply(new o.Vec3(e.nextPos1,1)),c=s.multiply(new o.Vec3(e.nextPos2,1)),{distance:m,smallSymbolDistance:u,smallSymbolSizeThreshold:p}=this.hittestRequest,y=o.step(i,p.multiply(.5)).multiply(m.subtract(u)),h=this.hittestRequest.position;return o.min(l.distPointSegment(h,r.xy,d.xy),l.distPointSegment(h,r.xy,c.xy)).subtract(i).add(y)}}e.__decorate([e.__param(0,i.input(d)),e.__param(1,i.input(a.PolyHittestVertexInput))],m.prototype,"vertex",null),e.__decorate([e.__param(0,i.input(c))],m.prototype,"fragment",null),t.AnimatedLineShader=m,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));