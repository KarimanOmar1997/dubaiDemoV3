// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../core/screenUtils","../../../../../../../geometry/GeometryCursor","../../../../../../../symbols/cim/constants","../../../../../../../symbols/cim/enums","../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper","../../../definitions","./AnimatedMeshWriter","./attributes","./ComputedAnimatedParams","../mesh/loadGeometryEngine","../shaders/constants"],(function(e,t,i,r,s,n,a,o,l,c,d,m){"use strict";class u extends o.AAnimatedMeshWriter{get vertexSpec(){return{createComputedParams:c.createComputedAnimatedMeshParams,optionalAttributes:{zoomRange:l.zoomRange,value1Position2Value2:l.value1Position2Value2,lineLength:l.lineLength},attributes:{id:l.id,bitset:l.bitset,pos:l.pos,offset:l.offset.marker,uv:l.uv.marker,animationPointerAndBaseSizeAndReferenceSize:l.animationPointerAndBaseSizeAndReferenceSize,sizing:l.sizing,angle:l.angle}}}_write(e,t){const i=this.evaluatedMeshParams.sprite,{textureBinding:r}=i;e.recordStart(this.instanceId,this.attributeLayout,r);const s=t.getDisplayId();if(this.shift&&"esriGeometryPolyline"===t.geometryType)this._writeParticles(e,t);else if(null!=this.evaluatedMeshParams.placement)this._writePlacedMarkers(e,t);else if("esriGeometryPolygon"===t.geometryType){const i=t.readCentroidForDisplay();if(!i)return;const[r,n]=i.coords;this._writeQuad(e,s,r,n)}else if("esriGeometryPoint"===t.geometryType){const i=t.readXForDisplay(),r=t.readYForDisplay();this._writeQuad(e,s,i,r)}else{const i=t.readGeometryForDisplay();i&&i.forEachVertex(((t,i)=>{this._writeQuad(e,s,t,i)}))}e.recordEnd()}_writePlacedMarkers(e,s){const a=i.GeometryCursor.fromFeatureSetReaderCIM(s)?.clone();if(!a)return;const o=n.CIMMarkerPlacementHelper.getPlacement(a,-1,this.evaluatedMeshParams.placement,t.pt2px(1),e.id,d.getGeometryEngine());if(!o)return;const l=s.getDisplayId();let c=o.next(),m=null;for(;null!=c;){const t=c.tx,i=-c.ty;if(Math.abs(t)>r.maxTileCoordValue||Math.abs(i)>r.maxTileCoordValue){c=o.next();continue}const s=-c.getAngle();e.recordBounds(t,i,64,64),this.shift?m&&this._writeQuad(e,l,m[0],m[1],void 0,s):this._writeQuad(e,l,t,i,void 0,s),m=[t,i],c=o.next()}}_writeParticles(e,t){const i=t.getDisplayId(),r=t.readGeometryForDisplay();if(!r)return;const n=[];r.forEachVertex(((e,t)=>{n.push([e,t])}));const a=function(e){const t=[];let i=0;for(let r=1;r<e.length;r++){const s=e[r-1],n=e[r],a=n[0]-s[0],o=n[1]-s[1],l=Math.sqrt(a*a+o*o),c=a/l,d=o/l;t.push({a:{position:s,distance:i,direction:[c,d]},b:{position:n,distance:i+l,direction:[c,d]}}),i+=l}return t}(n);let o=0;for(let e=1;e<n.length;e++){const t=n[e][0]-n[e-1][0],i=n[e][1]-n[e-1][1],r=Math.sqrt(t*t+i*i);o+=r}const l=t=>{for(const r of a){const{a:s,b:n}=r;this._writeQuad(e,i,s.position[0],s.position[1],[s.distance-t,n.position[0],n.position[1],n.distance-t],this.evaluatedMeshParams.angleToLine?Math.atan2(s.direction[1],s.direction[0]):0,o,!0)}},{placement:c}=this.evaluatedMeshParams;if(!c||"placementTemplate"in c||"CIMMarkerPlacementOnVertices"===c.type){let e;if(c&&"CIMMarkerPlacementOnVertices"!==c.type)e=c.placementTemplate;else{e=[0];for(const t of a){const{a:i,b:r}=t,s=i.position[0]-r.position[0],n=i.position[1]-r.position[1],a=Math.sqrt(s*s+n*n);e.push(a)}}let t=-1*o;for(;t<2*o;)for(const i of e)t+=i,l(t)}else"CIMMarkerPlacementAtExtremities"===c.type?c.extremityPlacement===s.ExtremityPlacement.JustBegin?l(1):c.extremityPlacement===s.ExtremityPlacement.JustEnd?(l(o-1),l(-1)):c.extremityPlacement===s.ExtremityPlacement.Both&&(l(1),l(o-1)):"CIMMarkerPlacementOnLine"===c.type&&l(o/2)}_writeQuad(e,t,i,r,s,n=0,o=0,l=!1){const c=this.evaluatedMeshParams.sprite,{rect:d}=c,u=d.x+a.spritePadding,h=d.y+a.spritePadding,p=d.x+d.width-a.spritePadding,y=d.y+d.height-a.spritePadding,f=e.vertexCount();l||e.recordBounds(i,r,64,64);const x={texXmin:u,texYmin:h,texXmax:p,texYmax:y,value1Position2Value2:s,angle:n/m.c256ToRad,lineLength:o};for(let s=0;s<4;s++)this._writeVertex(e,t,i,r,x);e.indexEnsureSize(6),e.indexWrite(f),e.indexWrite(f+1),e.indexWrite(f+2),e.indexWrite(f+1),e.indexWrite(f+3),e.indexWrite(f+2)}}e.AnimatedMarkerMeshWriter=class extends u{constructor(){super(...arguments),this.shift=!1}},e.AnimatedMarkerShiftMeshWriter=class extends u{constructor(){super(...arguments),this.shift=!0}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));