// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../utils","../Technique","../TechniqueType","../shaders/BlendShader","../shaders/OpacityShader","../../../../../../webgl/enums","../../../../../../webgl/Texture","../../../../../../webgl/TextureDescriptor"],(function(e,t,r,u,i,s,n,a,o){"use strict";class c extends r.Technique{constructor(){super(...arguments),this.type=u.TechniqueType.Blend,this._backBufferTexture=null,this.shaders={blend:new i.BlendShader,opacity:new s.OpacityShader}}shutdown(){super.shutdown(),null!==this._backBufferTexture&&(this._backBufferTexture.dispose(),this._backBufferTexture=null)}render(e,r){const{context:u,state:i,pixelRatio:s,inFadeTransition:a,painter:o}=e,{size:c}=i,l=u.getBoundFramebufferObject();let d,h;null!=l?(d=l.width,h=l.height):(d=Math.round(s*c[0]),h=Math.round(s*c[1]));const{blendMode:f}=r;if("normal"===f){const e={shader:this.shaders.opacity,uniforms:{config:{layerTexture:{texture:r.colorTexture,unit:0},opacity:r.config.opacity}},defines:null,optionalAttributes:null,useComputeBuffer:!1};return o.setPipelineState(t.simplePipelineState),void o.submitDrawMesh(u,e,o.quadMesh)}const T=this._createOrResizeTexture(e,d,h);l.copyToTexture(0,0,d,h,0,0,T);const p={color:{write:[!0,!0,!0,!0],blendMode:"custom",blendParameters:{srcRGB:n.BlendFactor.ONE,dstRGB:n.BlendFactor.ZERO,srcAlpha:n.BlendFactor.ONE,dstAlpha:n.BlendFactor.ZERO}},depth:!1,stencil:!1};o.setPipelineState(p);const x={backbufferTexture:{texture:T,unit:0},layerTexture:{texture:r.colorTexture,unit:1},inFadeOpacity:a?1:0,...r.config},b={shader:this.shaders.blend,uniforms:{config:x},defines:{blendMode:f},optionalAttributes:null,useComputeBuffer:!1};o.submitDrawMesh(u,b,o.quadMesh)}_createOrResizeTexture(e,t,r){const{context:u}=e;if(null!==this._backBufferTexture&&this._backBufferTexture.descriptor?.width===t&&this._backBufferTexture.descriptor?.height===r)return this._backBufferTexture;if(null===this._backBufferTexture){const e=new o.TextureDescriptor;e.internalFormat=n.PixelFormat.RGBA,e.wrapMode=n.TextureWrapMode.CLAMP_TO_EDGE,e.width=t,e.height=r,this._backBufferTexture=new a.Texture(u,e)}else this._backBufferTexture.resize(t,r);return this._backBufferTexture}}e.BlendTechnique=c,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));