// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../core/Handles","../../../../../core/libs/gl-matrix-2/math/vec2","../../../../../core/libs/gl-matrix-2/factories/vec2f64","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../chunks/boundedPlane","../../../../../geometry/support/spatialReferenceUtils","./Manipulation","./utils","../../../../interactive/dragEventPipeline","../../../../interactive/GraphicManipulator","../../../../interactive/editGeometry/interfaces","../../../../interactive/editGeometry/operations/UpdateVertices","../../../../interactive/editGeometry/support/editPlaneUtils"],(function(t,e,i,a,r,n,s,l,o,c,h,p,u,d,_){"use strict";const g=1e-6;function v(t){const e=r.length(t.basis1),i=r.length(t.basis2);return.3*Math.min(e,i)}class m extends o.Manipulation{constructor(t){super(),this._handles=new e,this._planeStart=s.create(),this._displayPlaneStart=s.create(),this._originCache=n.create(),this._axisCache=a.create(),this._renderStartCache=n.create(),this._renderEndCache=n.create(),this._resizeOriginCache=n.create(),this._view=t.view,this._tool=t.tool,this._graphic=t.graphic,this._direction=t.direction,this._preserveAspectRatio=t.preserveAspectRatio,this._manipulator=this._createManipulator(),this._handles.add([this._manipulator.events.on("grab-changed",(t=>c.onGrabChangedHandle(t,this._manipulator)))]),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this._handles.destroy(),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._graphic=null,this._manipulator=null,this._direction=null,this._handles=null,this._planeStart=null,this._displayPlaneStart=null,this._originCache=null,this._axisCache=null,this._renderStartCache=null,this._renderEndCache=null,this._resizeOriginCache=null,this._preserveAspectRatio=null}forEachManipulator(t){t(this._manipulator,o.ManipulatorType.SCALE)}createDragPipeline(t,e){let a=null,n=null,o=null,c=0,p=null,m=null;const y=this._planeStart,b=this._displayPlaneStart,f=this._direction;return h.createManipulatorDragEventPipeline(this._manipulator,((x,A)=>{A.next((e=>{if("start"===e.action){x.cursor="grabbing";const e=t();a=e.plane,n=e.displayPlane,o=e.editGeometryOperations,c=10*this._view.resolution,s.copy(a,y),s.copy(n,b);const i=l.getInfo(o.data.spatialReference);p=i?i.valid[1]-i.valid[0]-30*this._view.resolution:null}return e})).next(h.screenToMap(this._view)).next((t=>{const e=r.copy(this._renderStartCache,[t.mapStart.x,t.mapStart.y,0]),i=r.copy(this._renderEndCache,[t.mapEnd.x,t.mapEnd.y,0]),a=r.copy(this._resizeOriginCache,b.origin);r.scaleAndAdd(a,a,b.basis1,-f[0]),r.scaleAndAdd(a,a,b.basis2,-f[1]),r.subtract(i,i,a),r.subtract(e,e,a);const s=0!==f[0]&&0!==f[1],l=v(b),o=v(n)/l,h=(t,a)=>{if(0===t)return 1;let n=r.length(a),l=.5*t*r.dot(a,i)/n;const h=l<0?-1:1;s&&(l+=(n-.5*t*r.dot(a,e)/n)*h*o);const p=n<1.5*c?1:g;return n=Math.max(n-c,g),h>0&&(l-=10*this._view.resolution),h*Math.max(h*(l/n),p)},p=h(f[0],b.basis1),u=h(f[1],b.basis2);return{...t,direction:f,factor1:p,factor2:u}})).next(this._preserveAspectRatio.createDragEventPipelineStep(),this._preserveAspectRatio.next).next((t=>{const n=r.copy(this._originCache,y.origin);r.scaleAndAdd(n,n,y.basis1,-f[0]),r.scaleAndAdd(n,n,y.basis2,-f[1]);const l=i.set(this._axisCache,y.basis1[0],y.basis1[1]);i.normalize(l,l);const c=o.data.allVertices,h="start"===t.action?u.AccumulationBehavior.NEW_STEP:u.AccumulationBehavior.ACCUMULATE_STEPS,g=o.scaleVertices(c,n,l,t.factor1,t.factor2,h,d.AccumulationType.REPLACE);return p&&p<o.data.geometry.extent.width&&m?o.updateVertices(c,m):(s.copy(y,a),_.apply(g,a),m=g.operation,e(t,g)),t})).next((t=>("end"===t.action&&(x.cursor="grab"),t)))}))}_createManipulator(){return new p.GraphicManipulator({view:this._view,graphic:this._graphic,selectable:!0,cursor:"grab"})}}t.ScaleManipulation=m,t.calculateDiagonalResizeHandleScale=v,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));