// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/asyncUtils","../../../core/Collection","../../../core/Error","../../../core/handleUtils","../../../core/has","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/scheduling","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass"],(function(e,s,t,i,a,n,r,o,l,c,d,h,w,y){"use strict";const u=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"})),_="analyses-owner-handles";var m,V;!function(e){e[e.PENDING=0]="PENDING",e[e.CREATED=1]="CREATED"}(m||(m={})),function(e){e[e.ADDED=0]="ADDED",e[e.REMOVED=1]="REMOVED"}(V||(V={}));let A=class extends t{constructor(e){super(e),this._allAnalysisViews=new a,this._creatingViewCount=0,this._items=new Map,this._scheduledUpdateHandle=null,this._attachedToViewResolver=v(),this._analysisModules={"area-measurement":{module:null},dimension:{module:null},"direct-line-measurement":{module:null},"line-of-sight":{module:null},slice:{module:null},viewshed:{module:null}},this._emitOnView=(e,s)=>this.view.emit(e,s)}destroy(){this._disconnectOwners(),this._attachedToViewResolver.reject(d.createAbortError("AnalysisViewManager was destroyed"))}attach(){this._connectOwners(),this._attachedToViewResolver.resolve()}detach(){this._disconnectOwners(),this._attachedToViewResolver.reject(d.createAbortError()),this._attachedToViewResolver=v()}get updating(){return!this.view.ready||0!==this._creatingViewCount||this._allAnalysisViews.some((e=>e.updating))}get testInfo(){}async whenAnalysisView(e){await this._attachedToViewResolver.promise;const s=this._items.get(e);if(null==s||s.state.list===V.REMOVED)throw new n("AnalysisViewManager:no-analysisview-for-analysis","The analysis has not been added to view.analyses",{analysis:e});return s.createAnalysisViewTask.promise}_connectOwners(){this.addHandles(this._connectAnalysesCollection(this.view.analyses),_)}_disconnectOwners(){this.removeHandles(_),this._update(),this._creatingViewCount=0}_connectAnalysesCollection(e){for(const s of e)this._addAnalysis(s);const s=e.on("after-add",(e=>this._addAnalysis(e.item))),t=e.on("after-remove",(e=>this._removeAnalysis(e.item)));return r.makeHandle((()=>{s.remove(),t.remove();for(const s of e)this._removeAnalysis(s)}))}_addAnalysis(e){const s=this._items.get(e);if(null==s){const s={state:{view:m.PENDING,list:V.ADDED},analysis:e,view:null,createAnalysisViewTask:null};this._items.set(e,s),s.createAnalysisViewTask=i.createTask((t=>this._createAnalysisViewPromise(s,t).then((s=>(this._emitOnView("analysis-view-create",{analysis:e,analysisView:s}),s)),(s=>{throw this._emitOnView("analysis-view-create-error",{analysis:e,error:s}),s}))))}else s.state.list=V.ADDED}_removeAnalysis(e){const s=this._items.get(e);null!=s?(s.state.list=V.REMOVED,this._scheduleUpdate()):l.getLogger(this).error("Trying to remove analysis which was not added")}_scheduleUpdate(){null==this._scheduledUpdateHandle&&(this._scheduledUpdateHandle=h.schedule((()=>this._update())))}_update(){this._scheduledUpdateHandle=c.removeMaybe(this._scheduledUpdateHandle),this._items.forEach((e=>{if(e.state.list!==V.REMOVED)return;const{analysis:s,view:t}=e;switch(this._items.delete(s),e.state.view){case m.PENDING:e.createAnalysisViewTask=c.abortMaybe(e.createAnalysisViewTask);break;case m.CREATED:null!=t&&(this._allAnalysisViews.remove(t),e.view=c.destroyMaybe(t),e.createAnalysisViewTask=null,this._emitOnView("analysis-view-destroy",{analysis:s,analysisView:t}))}}))}async _createAnalysisViewPromise(e,s){const t=e.analysis,i=t.type,a=this._analysisModules[i];if(this._creatingViewCount+=1,null==a.module)try{a.module=await this._loadAnalysisModule(i)}catch(e){throw this._creatingViewCount-=1,e}if(d.isAborted(s))throw this._creatingViewCount-=1,d.createAbortError("AnalysisView creation aborted");const n=new a.module.default({analysis:t,view:this.view});let r=!0;d.onAbort(s,(()=>{r&&this._destroyAnalysisView(t,n)}));try{await n.when()}catch(e){throw r=!1,this._destroyAnalysisView(t,n),e}if(d.isAborted(s))throw d.createAbortError();return r=!1,e.view=n,e.state.view=m.CREATED,this._allAnalysisViews.add(n),this._creatingViewCount-=1,n}_destroyAnalysisView(e,s){s.destroyed||(this._creatingViewCount-=1,s.destroy(),this._emitOnView("analysis-view-destroy",{analysis:e,analysisView:s}))}_loadAnalysisModule(s){switch(s){case"area-measurement":return new Promise(((s,t)=>e(["./AreaMeasurementAnalysisView3D"],(e=>s(u(e))),t)));case"dimension":return new Promise(((s,t)=>e(["./DimensionAnalysisView3D"],(e=>s(u(e))),t)));case"direct-line-measurement":return new Promise(((s,t)=>e(["./DirectLineMeasurementAnalysisView3D"],(e=>s(u(e))),t)));case"line-of-sight":return new Promise(((s,t)=>e(["./LineOfSightAnalysisView3D"],(e=>s(u(e))),t)));case"slice":return new Promise(((s,t)=>e(["./SliceAnalysisView3D"],(e=>s(u(e))),t)));case"viewshed":return new Promise(((s,t)=>e(["./ViewshedAnalysisView3D"],(e=>s(u(e))),t)))}}};function v(){const e=d.createResolver();return e.promise.catch((()=>{})),e}return s.__decorate([w.property()],A.prototype,"updating",null),s.__decorate([w.property({constructOnly:!0})],A.prototype,"view",void 0),s.__decorate([w.property()],A.prototype,"_allAnalysisViews",void 0),s.__decorate([w.property()],A.prototype,"_creatingViewCount",void 0),A=s.__decorate([y.subclass("esri.views.3d.analysis.AnalysisViewManager3D")],A),A}));