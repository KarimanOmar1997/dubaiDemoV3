// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../analysis/featureReferenceUtils","../../../../core/Accessor","../../../../core/asyncUtils","../../../../core/Evented","../../../../core/Handles","../../../../core/handleUtils","../../../../core/Logger","../../../../core/maybe","../../../../core/promiseUtils","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/support/UpdatingHandles","../../../../geometry/Point","../../../../geometry/projectionUtils","../../../../geometry/projection/projectBoundingRect","../../../../geometry/support/aaBoundingBox","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/ray","../../../../support/elevationInfoUtils","../LineOfSightAnalysisResult","./LineOfSightComputation","./LineOfSightRayIntersector","../support/projectionUtils","../../webgl-engine/lib/IntersectorInterfaces","../../webgl-engine/lib/intersectorUtilsConversions","../../../support/Scheduler"],(function(e,t,o,n,i,r,s,a,l,c,d,u,p,g,h,v,_,m,f,y,b,C,O,T,P,S,I,L,R,w,A,H,E){"use strict";function j(e,t){return e.hasZ?t??{mode:"absolute-height",offset:0}:{mode:"on-the-ground",offset:0}}e.LineOfSightController=class extends(r.EventedMixin(n)){constructor(e){super(e),this.updateOnCameraChange=!0,this._observerGroundOffsetRenderSpace=0,this._effectiveObserverElevationMode="absolute-height",this._observerFeatureId=null,this._updatingHandles=new f.UpdatingHandles,this._frameTask=E.ImmediateTask,this._computationHandles=new s,this._externalObserverUpdate=!0}initialize(){const e=this.view.resourceController?.scheduler;this._frameTask=e?e.registerTask(E.TaskPriority.LINE_OF_SIGHT_TOOL):E.ImmediateTask,this._intersector=new R.LineOfSightRayIntersector({view:this.view}),this.addHandles([this._connectObserver(),this._connectComputations(),this._connectTargets()])}destroy(){this._computationHandles.destroy(),this._computations.removeAll(),this._updatingHandles.destroy()}get updating(){return this._frameTask.updating||this._updatingHandles.updating}get priority(){return this._frameTask.priority}set priority(e){this._frameTask.priority=e}get _computations(){return this.analysisViewData.computations}get _elevationAlignedObserverPositionRenderSpace(){return this.analysisViewData.observerEngineLocation}set _elevationAlignedObserverPositionRenderSpace(e){this.analysisViewData.observerEngineLocation=e}get _screenPixelSize(){return this.view.state.camera.computeScreenPixelSizeAt(this._elevationAlignedObserverPositionRenderSpace)}_computeResult(e){const t=e.computation,{inputPoints:o,computationResult:n}=t,{observerAdjusted:i,targetAdjusted:r}=o,{start:s,end:a}=n;_.copy(s,i),_.copy(a,r),this._canCompute(t)?this._computeIntersection(e):function({computation:e,interpolationInfo:t}){const{computationResult:o,inputPoints:n}=e,{start:i,end:r,intersection:s}=o,{originalIntersection:a,originalObserver:l,originalTarget:c}=t;if(_.copy(s,a),n.isValid){const e=V,t=_.dist(l,a)/_.dist(l,c);_.sub(e,i,l),_.scale(e,e,1-t),_.add(s,s,e),_.sub(e,r,c),_.scale(e,e,t),_.add(s,s,e),o.isValid=!0}else e.result=null,o.isValid=!1,o.isTargetVisible=!1}(e),t.notifyResultChanged(),this.emit("result-changed",{target:e.computation.target,result:t.result})}_adjustStartEndPositions(e){const{view:t}=this,{inputPoints:n}=e,{observer:i,target:r,observerAdjusted:s,targetAdjusted:a}=n;_.copy(s,i),_.copy(a,r),o.updatePointsFromFeatureReference(t,this._intersector.intersector,n);const{observerSurfaceNormal:l,targetSurfaceNormal:c}=n,d=this._screenPixelSize,u=V;null!=l?_.copy(u,l):_.subtract(u,a,s);const p=d;_.normalize(u,u),_.scale(u,u,Math.min(p,1)),_.add(s,s,u),null!=c?_.copy(u,c):_.subtract(u,s,a);const g=t.state.camera.computeScreenPixelSizeAt(a);_.normalize(u,u),_.scale(u,u,Math.min(g,1)),_.add(a,a,u)}_computeIntersection({computation:e,interpolationInfo:t}){const{view:o}=this,{sceneIntersectionHelper:n,renderCoordsHelper:i}=o;if(null==n)return;const r=this._intersector.intersector,{computationResult:s,inputPoints:a}=e,{observer:l,target:c}=a,{start:d,end:u}=s,p=P.fromPoints(d,u,G);r.options.store=A.StoreResults.MIN,n.intersectToolIntersectorRay(p,r);const g=r.results.min,h=s.intersection,v=V;let m=!0;if(null!=g&&g.getIntersectionPoint(h)){_.copy(t.originalIntersection,h),_.copy(t.originalObserver,d),_.copy(t.originalTarget,u),i.fromRenderCoords(h,v,o.spatialReference);const e=1-_.dist(u,c)/_.dist(d,c);m=_.dist(l,h)>=e*_.dist(l,c)}const f=new y(v,o.spatialReference);{const{result:t,target:n}=e;null!=t?(t.target=n,t.intersectedGraphic=m?null:H.toGraphic(g,o),t.intersectedLocation=m?null:f,t.visible=m):e.result=new I({target:n,elevationAlignedTargetLocation:e.elevationAlignedTargetLocation,intersectedGraphic:m?null:H.toGraphic(g,o),intersectedLocation:m?null:f,visible:m})}s.isValid=a.isValid=!0,s.isTargetVisible=m}_canCompute(e){const t=this.analysisViewData.elevationAlignedObserver,o=this.view.frustum;if(null==t||null==e.elevationAlignedTargetLocation||null==o)return!1;const{observerAdjusted:n,targetAdjusted:i}=e.inputPoints,r=o.intersectsPoint(n),s=o.intersectsPoint(i);return r&&s}_onObserverPositionChange(e,t,n,i,r){if(this._externalObserverUpdate=r,null==e)return this.analysisViewData.elevationAlignedObserver=null,void(this._observerFeatureId=null);if(null==t)return w.logFailedGeometryProjectionError(this.analysis,e.spatialReference,l.getLogger(this)),void(this.analysisViewData.elevationAlignedObserver=null);const s=j(t,n),{absoluteZ:a,elevation:c}=S.zValueInAbsoluteHeightMode(t.x,t.y,t.z,this.view.spatialReference,this.view,s),d=t.clone();d.z=a,this._effectiveObserverElevationMode=s.mode,this.analysisViewData.elevationAlignedObserver=d;const u=m.create();this.view.renderCoordsHelper.toRenderCoords(d,u),this._elevationAlignedObserverPositionRenderSpace=u,this._observerGroundOffsetRenderSpace=a-c,this._observerFeatureId=o.getFeatureId(i),this.priority=E.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE}_onObserverRenderSpacePositionChangeForComputation(e,t,o,n,i){const{inputPoints:r}=e;switch(_.copy(r.observer,t),r.observerFeatureId=i,r.observerSurfaceNormal=null,n){case"on-the-ground":case"relative-to-ground":{const e=this._intersector.updateFromGroundIntersection(r.observer,o,r.observer);null==r.observerFeatureId&&(r.observerSurfaceNormal=e)}}this._adjustStartEndPositions(e),e.notifyInputPointsChanged(),this.priority=E.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE}_onTargetPositionChange(e,t,n,i,r,s=!0){const a=e.inputPoints;if(s&&(a.isValid=!1),null==n)return null!=t&&w.logFailedGeometryProjectionError(this.analysis,t.spatialReference,l.getLogger(this)),e.elevationAlignedTargetLocation=null,void e.notifyInputPointsChanged();const c=j(n,i),{absoluteZ:d,elevation:u}=S.zValueInAbsoluteHeightMode(n.x,n.y,n.z,this.view.spatialReference,this.view,c),p=n.clone();switch(p.z=d,e.elevationAlignedTargetLocation=p,this.view.renderCoordsHelper.toRenderCoords(e.elevationAlignedTargetLocation,a.target),a.targetFeatureId=o.getFeatureId(r),a.targetSurfaceNormal=null,c.mode){case"on-the-ground":case"relative-to-ground":{const e=this._intersector.updateFromGroundIntersection(a.target,d-u,a.target);null==a.targetFeatureId&&(a.targetSurfaceNormal=e)}}this._adjustStartEndPositions(e),e.notifyInputPointsChanged(),this.priority=E.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE}_connectComputationToTarget(e){return a.handlesGroup([this._updatingHandles.add((()=>({computation:e,targetPosition:e.target.position,targetElevationInfo:e.target.elevationInfo,targetFeatureInfo:e.target.feature,projectedTargetPosition:b.projectOrLoad(e.target.position,this.view.spatialReference)})),(({computation:e,targetPosition:t,targetElevationInfo:o,targetFeatureInfo:n,projectedTargetPosition:i})=>{null==i.pending?this._onTargetPositionChange(e,t,i.geometry,o,n):this._updatingHandles.addPromise(i.pending)}),u.initial)])}_connectComputationToObserver(e){return this._updatingHandles.add((()=>({computation:e,observer:this.analysisViewData.elevationAlignedObserver})),(({computation:e})=>{this._externalObserverUpdate&&(e.inputPoints.isValid=!1,e.notifyInputPointsChanged())}),u.initial)}_connectComputationToRenderSpaceObserver(e){return this._updatingHandles.add((()=>({computation:e,observer:this._elevationAlignedObserverPositionRenderSpace,observerGroundOffset:this._observerGroundOffsetRenderSpace,observerElevationMode:this._effectiveObserverElevationMode,observerFeatureId:this._observerFeatureId})),(({computation:e,observer:t,observerGroundOffset:o,observerElevationMode:n,observerFeatureId:i})=>{this._onObserverRenderSpacePositionChangeForComputation(e,t,o,n,i)}),u.initial)}_connectComputationToCamera(e){return this._updatingHandles.add((()=>({camera:this.view.state.camera,isDirty:this._isCameraDirty})),(({isDirty:t})=>{!this.updateOnCameraChange||e.inputPoints.isValid&&!t||e.notifyInputPointsChanged()}))}_connectComputationToSlicePlane(e){return this._updatingHandles.add((()=>this.view.slice.plane),(()=>{e.inputPoints.isValid=!1,e.notifyInputPointsChanged()}))}_connectComputationToElevation(e){const t=(o,n)=>{const i=this.analysis.observer,r=e.target;let s=null,a=null,l=null,c=null,d=null,u=null;if(null!=i?.position){const e=b.projectOrLoad(i.position,this.view.spatialReference);if(null!=e.pending)return this._updatingHandles.addPromise(e.pending),void e.pending.finally((()=>t(o,n)));s=e.geometry,a=i.elevationInfo,l=i.feature}if(null!=r.position){const e=b.projectOrLoad(r.position,this.view.spatialReference);if(null!=e.pending)return this._updatingHandles.addPromise(e.pending),void e.pending.finally((()=>t(o,n)));c=e.geometry,d=r.elevationInfo,u=r.feature}null==s&&null==c||(C.projectBoundingRect(o,n,k,this.view.spatialReference),null!=s&&T.containsPointObject(k,s)&&this._onObserverPositionChange(null!=i?i.position:null,s,a,l,!1),null!=c&&T.containsPointObject(k,c)&&this._onTargetPositionChange(e,r.position,c,d,u,!1),null!=s&&null!=c&&T.intersectsSegment(k,s,c)&&e.notifyInputPointsChanged())};return this.view.elevationProvider.on("elevation-change",(({extent:e,spatialReference:o})=>t(e,o)))}_connectComputationToTask(e){let t=null;const o={computation:e,interpolationInfo:{originalIntersection:m.create(),originalObserver:m.create(),originalTarget:m.create()}};return a.handlesGroup([this._updatingHandles.add((()=>e.inputPoints),(()=>{t=c.abortMaybe(t),t=i.createTask((async e=>{await d.ignoreAbortErrors(this._frameTask.schedule((()=>this._computeResult(o)),e))}))}),{initial:!0,equals:()=>!1}),a.makeHandle((()=>t=c.abortMaybe(t)))])}_connectComputationToContent(e){return u.on((()=>this.view.pointsOfInterest?.contentGeometryUpdates.events),"request-update",(t=>{const o=t?.renderBounds,{observerAdjusted:n,targetAdjusted:i}=e.inputPoints;(null==o||O.intersectsSegment(o,n,i))&&(e.inputPoints.isValid=!1,e.notifyInputPointsChanged())}))}_connectComputation(e){const t=this._computationHandles;t.has(e)||t.add([this._connectComputationToTarget(e),this._connectComputationToObserver(e),this._connectComputationToRenderSpaceObserver(e),this._connectComputationToCamera(e),this._connectComputationToSlicePlane(e),this._connectComputationToElevation(e),this._connectComputationToTask(e),this._connectComputationToContent(e)],e)}_disconnectComputation(e){this._computationHandles.remove(e)}_onComputationCollectionChange({added:e,removed:t}){for(const e of t)this._disconnectComputation(e);for(const t of e)this._connectComputation(t)}_onTargetCollectionChange({added:e,removed:t}){for(const e of t)this._removeTarget(e);for(const t of e)this._addTarget(t)}_onCursorTargetChange(e,t){null!=t&&this._removeTarget(t),null!=e&&this._addTarget(e)}_addTarget(e){this._computations.some((t=>t.target===e))||this._computations.add(new L.LineOfSightComputation({target:e}))}_removeTarget(e){const t=this._computations.findIndex((t=>t.target===e));this._computations.removeAt(t)}_connectObserver(){return a.handlesGroup([this._updatingHandles.add((()=>({observerPosition:null!=this.analysis.observer?this.analysis.observer.position:null,projectedObserverPosition:b.projectOrLoad(null!=this.analysis.observer?this.analysis.observer.position:null,this.view.spatialReference),observerElevationInfo:null!=this.analysis.observer?this.analysis.observer.elevationInfo:null,observerFeatureInfo:null!=this.analysis.observer?this.analysis.observer.feature:null})),(({observerPosition:e,projectedObserverPosition:t,observerElevationInfo:o,observerFeatureInfo:n})=>{null==t.pending?this._onObserverPositionChange(e,t.geometry,o,n,!0):this._updatingHandles.addPromise(t.pending)}),u.initial)])}_connectComputations(){return this._updatingHandles.addOnCollectionChange((()=>this._computations),(e=>this._onComputationCollectionChange(e)),{initial:!0,final:!0})}_connectTargets(){return a.handlesGroup([this._updatingHandles.addOnCollectionChange((()=>this.analysis.targets),(e=>this._onTargetCollectionChange(e)),{initial:!0,final:!0}),this._updatingHandles.add((()=>this.analysisViewData.cursorTarget),((e,t)=>{this._onCursorTargetChange(e,t)}))])}get _isCameraDirty(){const e=this.analysisViewData.elevationAlignedObserver,{view:t}=this,{renderCoordsHelper:o}=t;if(null==e||null==o)return!1;const n=V;o.toRenderCoords(e,n);const i=t.state.camera.computeScreenPixelSizeAt(n);return Math.abs((i-this._screenPixelSize)/this._screenPixelSize)>F}},t.__decorate([p.property({constructOnly:!0})],e.LineOfSightController.prototype,"analysis",void 0),t.__decorate([p.property({constructOnly:!0})],e.LineOfSightController.prototype,"analysisViewData",void 0),t.__decorate([p.property({constructOnly:!0})],e.LineOfSightController.prototype,"view",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"updating",null),t.__decorate([p.property()],e.LineOfSightController.prototype,"priority",null),t.__decorate([p.property()],e.LineOfSightController.prototype,"updateOnCameraChange",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_computations",null),t.__decorate([p.property()],e.LineOfSightController.prototype,"_elevationAlignedObserverPositionRenderSpace",null),t.__decorate([p.property()],e.LineOfSightController.prototype,"_observerGroundOffsetRenderSpace",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_effectiveObserverElevationMode",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_observerFeatureId",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_screenPixelSize",null),t.__decorate([p.property({readOnly:!0})],e.LineOfSightController.prototype,"_updatingHandles",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_frameTask",void 0),t.__decorate([p.property()],e.LineOfSightController.prototype,"_isCameraDirty",null),e.LineOfSightController=t.__decorate([v.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightController")],e.LineOfSightController);const F=.1,V=m.create(),G=P.create(),k=T.empty();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));