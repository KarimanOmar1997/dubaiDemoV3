// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/Point","../../../../geometry/support/ray","../../../../geometry/support/vectorStacks","../../../../layers/graphics/dehydratedFeatures","./LineOfSightIntersectionResult","../../support/geometryUtils/ray","../../terrain/Intersector","../../webgl-engine/lib/Intersector","../../webgl-engine/lib/IntersectorInterfaces","../../webgl-engine/lib/IntersectorType","../../webgl-engine/lib/intersectorUtilsConversions"],(function(e,t,r,n,s,o,i,c,a,l,u,p,d,y,g,h,I,f,m,R,b,S){"use strict";e.LineOfSightRayIntersector=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=new m.Intersector(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=R.StoreResults.MIN}getScreenPointIntersection(e){const t=n.screenPointObjectToArray(e,y.sv2d.get()),r=I.fromScreen(this.view.state.camera,t,P);return this._getRayIntersection(r)}_getRayIntersection(e,t){const{view:r,intersector:n}=this;if(null==e||null==r.sceneIntersectionHelper)return null;n.options.store=R.StoreResults.MIN,r.sceneIntersectionHelper.intersectToolIntersectorRay(e,n,t);const s=n.results.min;if(null==s.target)return null;const o=u.create();if(!s.getIntersectionPoint(o))return null;if(null!=t?.maxDistance&&!s.withinDistance(t.maxDistance))return null;const i=r.renderCoordsHelper.fromRenderCoords(o,new p({spatialReference:r.spatialReference})),c=u.clone(s.normal);if(f.isTerrainIntersectorResult(s))return new h.LineOfSightIntersectionResult({type:b.IntersectorType.TERRAIN,id:s.target.lij.slice(),mapPoint:i,renderPoint:o,normal:c,ray:d.copy(e),graphic:null});const a=S.toGraphic(s,r);if(null==a)return null;const{layer:l,sourceLayer:y}=a,I="scene"===y?.type?g.getObjectId(a,y.objectIdField):a.uid;return new h.LineOfSightIntersectionResult({type:b.IntersectorType.OBJECT,id:`${l?.uid}/${I}`,mapPoint:i,renderPoint:o,normal:c,ray:d.copy(e),graphic:a})}updateFromGroundIntersection(e,t,r){const n=w,s=v,o=O,i=L;l.copy(s,e),this.view.renderCoordsHelper.worldUpAtPosition(s,o),l.normalize(o,o);const c=this.view.basemapTerrain.visibleElevationBounds,a=(t>=0?1:-1)*((c?Math.abs(c.max-c.min):100)+Math.abs(t));l.scale(i,o,a),l.add(n,s,i),d.fromPoints(n,s,P);const p=this._getRayIntersection(P,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:a});if(null!=p){const e=L;return l.scale(e,o,t),l.add(r,p.renderPoint,e),u.clone(p.normal)}return l.copy(r,e),null}},t.__decorate([s.property()],e.LineOfSightRayIntersector.prototype,"view",void 0),t.__decorate([s.property()],e.LineOfSightRayIntersector.prototype,"intersector",void 0),e.LineOfSightRayIntersector=t.__decorate([a.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],e.LineOfSightRayIntersector);const w=u.create(),v=u.create(),O=u.create(),L=u.create(),P=d.create();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));