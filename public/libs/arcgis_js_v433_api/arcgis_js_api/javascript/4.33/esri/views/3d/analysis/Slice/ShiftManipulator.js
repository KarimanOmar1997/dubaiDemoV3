// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../Color","../../../../core/colorUtils","../../../../core/reactiveUtils","../../../../core/libs/gl-matrix-2/math/mat4","../../../../core/libs/gl-matrix-2/factories/mat4f64","../../../../core/libs/gl-matrix-2/math/quat","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/support/vectorStacks","./sliceToolConfig","./sliceToolUtils","../../interactive/Manipulator3D","../../interactive/RenderObject","../../webgl-engine/lib/basicInterfaces","../../webgl-engine/lib/GeometryUtil","../../webgl-engine/lib/Material","../../webgl-engine/materials/ColorMaterial","../../webgl-engine/materials/RibbonLineMaterial","../../../interactive/interfaces"],(function(e,t,a,r,n,i,o,l,s,c,d,u,f,g,p,m,h,R,O,M){"use strict";var b;e.OffsetMode=void 0,(b=e.OffsetMode||(e.OffsetMode={}))[b.CENTER_ON_CALLOUT=0]="CENTER_ON_CALLOUT",b[b.CENTER_ON_ARROW=1]="CENTER_ON_ARROW";class F extends f.Manipulator3D{constructor(e,n){const i=new O.RibbonLineMaterial({width:1,renderOccluded:h.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!0}),o=new R.ColorMaterial({cullFace:p.CullFaceOptions.Back,renderOccluded:h.RenderOccludedFlag.Opaque,isDecoration:!0}),l=new R.ColorMaterial({cullFace:p.CullFaceOptions.Back,renderOccluded:h.RenderOccludedFlag.Opaque,isDecoration:!0}),s=new R.ColorMaterial({cullFace:p.CullFaceOptions.Back,renderOccluded:h.RenderOccludedFlag.Opaque,isDecoration:!0}),c=new R.ColorMaterial({writeDepth:!1,cullFace:p.CullFaceOptions.Front,renderOccluded:h.RenderOccludedFlag.Transparent,isDecoration:!0});super({view:e,...v({offsetMode:n,tubeMaterial:o,tipMaterial:l,capMaterial:s,outlineMaterial:c,calloutMaterial:i})}),this._themeHandle=r.watch((()=>e.effectiveTheme.accentColor),(e=>{const r=a.getContrast(e),n=t.toUnitRGBA(e),d=t.toUnitRGBA(r),u=t.toUnitRGBA(t.blendColors(r,e,.4)),f=t.toUnitRGBA(t.blendColors(r,e,.14));i.setParameters({color:n}),o.setParameters({color:f}),l.setParameters({color:d}),s.setParameters({color:u}),c.setParameters({color:n})}),r.initial)}destroy(){this._themeHandle.remove(),super.destroy()}}function v({offsetMode:t,tubeMaterial:a,tipMaterial:r,capMaterial:n,outlineMaterial:i,calloutMaterial:o}){const c=t===e.OffsetMode.CENTER_ON_CALLOUT?d.shiftRestartOffsetDistance:0,f=[s.fromValues(c,0,-24),s.fromValues(c,0,d.shiftRestartArrowLength/2)],p=function(e){const t=l.subtract(s.create(),e[e.length-1],e[e.length-2]);l.normalize(t,t),l.scale(t,t,d.shiftRestartTipLength),l.add(t,t,e[e.length-1]);{const a=l.subtract(s.create(),e[0],e[1]);return l.normalize(a,a),l.scale(a,a,d.shiftRestartTipLength),l.add(a,a,e[0]),[a,...e,t]}}(f),h=y({vertices:f,padding:0,materials:{tube:a,tip:r,cap:n}}),R=y({vertices:f,padding:d.shiftRestartArrowOutlineWidth,materials:{tube:i,tip:i,cap:i}}),O=m.createPolylineGeometry(o,[[c,0,0],[c-d.shiftRestartOffsetDistance,0,0]]),b=m.createPolylineGeometry(o,[[c,0,0],[c-d.shiftRestartOffsetDistance,0,0]]);return{renderObjects:[...h.normal.map((e=>new g.RenderObject(e,M.ManipulatorStateFlags.Unfocused|u.DidPointerMoveRecentlyFlag))),...R.normal.map((e=>new g.RenderObject(e,M.ManipulatorStateFlags.Unfocused|u.DidPointerMoveRecentlyFlag))),new g.RenderObject(O,M.ManipulatorStateFlags.Unfocused|u.DidPointerMoveRecentlyFlag|u.IsShiftEdgeOnScreenFlag),...h.focused.map((e=>new g.RenderObject(e,M.ManipulatorStateFlags.Focused|u.DidPointerMoveRecentlyFlag))),...R.focused.map((e=>new g.RenderObject(e,M.ManipulatorStateFlags.Focused|u.DidPointerMoveRecentlyFlag))),new g.RenderObject(b,M.ManipulatorStateFlags.Focused|u.DidPointerMoveRecentlyFlag|u.IsShiftEdgeOnScreenFlag)],autoScaleRenderObjects:!1,collisionType:{type:"line",paths:[p]},collisionPriority:1,radius:d.shiftRestartTipRadius,state:u.DidPointerMoveRecentlyFlag}}function y({vertices:e,padding:t,materials:a}){const r=r=>{const u=e.slice(),f=l.subtract(c.sv3d.get(),u[0],u[1]);l.normalize(f,f);const g=l.subtract(c.sv3d.get(),u[u.length-1],u[u.length-2]);if(l.normalize(g,g),t>0){const e=l.scale(s.create(),g,-t);u[u.length-1]=l.add(e,e,u[u.length-1]);const a=l.scale(s.create(),f,-t);u[0]=l.add(a,a,u[0])}const p=r?d.shiftRestartTipFocusMultiplier:1,h=d.shiftRestartTipLength*p,R=d.shiftRestartTipRadius*p,O=n.identity(c.sm4d.get());if(t>0){const e=h/4,a=l.set(c.sv3d.get(),0,e,0),r=1+t/e;n.translate(O,O,a),n.scale(O,O,l.set(c.sv3d.get(),r,r,r)),n.translate(O,O,l.scale(a,a,-1/r))}const M=n.identity(i.create()),b=s.fromValues(0,1,0),F=n.fromQuat(i.create(),o.rotationTo(c.sq4d.get(),b,g));F[12]=u[u.length-1][0],F[13]=u[u.length-1][1],F[14]=u[u.length-1][2],n.multiply(F,F,O);const v=a.tube,y=function(e,t,a){const r=[];for(let t=0;t<12;t++){const a=t/12*2*Math.PI;r.push([Math.cos(a)*e,Math.sin(a)*e])}return m.createPathExtrusionGeometry(a,r,t,[],[],!1)}(d.shiftRestartTubeRadius*(r?d.shiftRestartTubeFocusMultiplier:1)+t,u,v);y.transformation=M;const C=[y],T=a.tip,w=m.createConeGeometry(T,h,R,24,!1,!1,!0);w.transformation=F,C.push(w);const D=a.cap,P=m.createConeGeometry(D,h,R,24,!1,!0,!1);P.transformation=F,C.push(P);const S=n.fromQuat(i.create(),o.rotationTo(c.sq4d.get(),b,f));return S[12]=u[0][0],S[13]=u[0][1],S[14]=u[0][2],n.multiply(S,S,O),C.push(w.instantiate({transformation:S})),C.push(P.instantiate({transformation:S})),C};return{normal:r(!1),focused:r(!0)}}e.ShiftManipulator=F,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));