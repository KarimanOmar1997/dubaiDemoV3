// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/compilerUtils","../../../core/mathUtils","../../../core/maybe","../../../core/reactiveUtils","../../../core/signal","../../../core/accessorSupport/decorators/property","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../core/libs/gl-matrix-2/math/mat3","../../../core/libs/gl-matrix-2/math/mat4","../../../core/libs/gl-matrix-2/factories/mat4f64","../../../core/libs/gl-matrix-2/math/vec2","../../../core/libs/gl-matrix-2/factories/vec2f64","../../../core/libs/gl-matrix-2/factories/vec3f32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/ellipsoidUtils","./Clouds","../../../chunks/Clouds.glsl","./CloudsPresets","./CloudsTechnique","./CloudsTechniqueConfiguration","./NoiseTextureAtlas","../../support/Scheduler","../../support/Yield","../../webgl/enums","../../webgl/FramebufferObject","../../webgl/TextureDescriptor"],(function(e,t,s,i,r,o,a,n,l,h,c,u,d,p,_,m,g,f,y,x,C,T,b,S,P,v,w,R,M,z,q){"use strict";e.CloudsRenderer=class extends s{constructor(e){super(e),this._state=n.signal(C.CubeMapState.Idle),this._passParameters=new T.CloudsPassParameters,this._weatherTileCount=128,this._sliceIndex=0,this._tileIndex=0,this._tilesPerSlice=1,this.coverage=r.lerp(b.cloudPresets.default.coverage[0],b.cloudPresets.default.coverage[1],.5),this.density=r.lerp(b.cloudPresets.default.density[0],b.cloudPresets.default.density[1],.5),this.absorption=r.lerp(b.cloudPresets.default.absorption[0],b.cloudPresets.default.absorption[1],.5),this.cloudSize=r.lerp(b.cloudPresets.default.cloudSize[0],b.cloudPresets.default.cloudSize[1],.5),this.detailSize=r.lerp(b.cloudPresets.default.detailSize[0],b.cloudPresets.default.detailSize[1],.5),this.smoothness=r.lerp(b.cloudPresets.default.smoothness[0],b.cloudPresets.default.smoothness[1],.5),this.cloudHeight=r.lerp(b.cloudPresets.default.cloudHeight[0],b.cloudPresets.default.cloudHeight[1],.5),this.raymarchingSteps=b.cloudPresets.default.raymarchingSteps,this._viewMatrix=_.create(),this._dirty=!0,this.running=!0,this._configuration=new P.CloudsTechniqueConfiguration}initialize(){const e=x.getReferenceEllipsoid(this.view.spatialReference);this._passParameters.cloudRadius=.5*e.radius;const t=()=>this.setDirty();this.addHandles([this.view.resourceController.scheduler.registerTask(w.TaskPriority.CLOUDS_GENERATOR,this),a.watch((()=>this.coverage),t,a.initial),a.watch((()=>this.density),t,a.initial),a.watch((()=>this.absorption),t,a.initial),a.watch((()=>this.cloudSize),t,a.initial),a.watch((()=>this.detailSize),t,a.initial),a.watch((()=>this.smoothness),t,a.initial),a.watch((()=>this.cloudHeight),t,a.initial),a.watch((()=>this.raymarchingSteps),t,a.initial)]);const s=g.clone(this._computeWeatherTile());let i=0;this.addHandles(a.watch((()=>{const e=this._computeWeatherTile();return m.equals(s,e)||(++i,m.copy(s,e)),i}),t))}destroy(){this.destroyCubeMap(),this._passParameters.noiseTexture=o.destroyMaybe(this._passParameters.noiseTexture)}_precompileTechniques(){this._configuration.steps=this.raymarchingSteps,this._configuration.writeTextureChannels=C.CloudsTextureChannels.RG,this.context.techniques.precompile(S.CloudsTechnique,this._configuration),this._configuration.writeTextureChannels=C.CloudsTextureChannels.BA,this.context.techniques.precompile(S.CloudsTechnique,this._configuration)}_acquireTechnique(){switch(this.raymarchingSteps){case P.RayMarchingSteps.SIXTEEN:this._tilesPerSlice=1;break;case P.RayMarchingSteps.HUNDRED:this._tilesPerSlice=4;break;case P.RayMarchingSteps.COUNT:case P.RayMarchingSteps.TWOHUNDRED:this._tilesPerSlice=8;break;default:i.neverReached(this.raymarchingSteps)}return this._configuration.writeTextureChannels=1-this.parameters.readChannels,this._configuration.steps=this.raymarchingSteps,this.context.techniques.get(S.CloudsTechnique,this._configuration)}_computeWeatherTile(){const{camera:e,environment:t}=this.view,{latitude:s,longitude:i}=e.position;if(null==s||null==i)return g.ZEROS;m.set(V,(s+90)/180,(i+180)/360);const r=Math.floor(this._weatherTileCount*Math.abs(2*V[0]-1));V[0]=Math.floor(2*this._weatherTileCount*V[0]),V[1]=Math.floor(4*(this._weatherTileCount-r)*V[1]);let o=0,a=0;if("virtual"!==t?.lighting?.type&&null!=t?.lighting?.date){const e=new Date(t.lighting.date);e.setUTCHours(t.lighting.date.getUTCHours()+(t.lighting.displayUTCOffset??0)),o=31*e.getUTCMonth()+e.getUTCDate(),a=e.getUTCFullYear()}return V[0]=(V[0]+o)%(2*this._weatherTileCount),V[1]=(V[1]+a%100)%(4*this._weatherTileCount),V}get state(){return this._state.value}set state(e){this._state.value=e}get usedMemory(){return(this._fbo?.usedMemory??0)+(this._passParameters.noiseTexture?.textureAtlas?.usedMemory??0)}_ensureNoiseTexture(){return this._passParameters.noiseTexture??=new v.NoiseTextureAtlas({context:this.context}),this._passParameters.noiseTexture}_ensureFrameBufferCube(e){const t=this.context.renderContext.rctx;if(null==this._fbo){const s=new q.TextureDescriptor(e,e/2);s.target=M.TextureType.TEXTURE_2D_ARRAY,s.depth=6,s.wrapMode=M.TextureWrapMode.CLAMP_TO_EDGE,this._fbo=new z.FramebufferObject(t,s),this.parameters.data=this,this.parameters.absorption=this.absorption,this.parameters.coverage=this.coverage}return t.unbindTexture(this._fbo.colorTexture),this._fbo}get cubeMap(){return this._fbo}get parameters(){return this.context.renderContext.bind.clouds}destroyCubeMap(){this._fbo=o.disposeMaybe(this._fbo),this.parameters.data=null}applyPreset(e,t){const s=e.median,i=e=>{const i=r.lerp(e[0],e[1],s);return t<.5?r.lerp(e[0],i,2*t):r.lerp(i,e[1],2*(t-.5))};this.coverage=i(e.coverage),this.density=i(e.density),this.absorption=i(e.absorption),this.cloudSize=i(e.cloudSize),this.detailSize=i(e.detailSize),this.smoothness=i(e.smoothness),this.cloudHeight=i(e.cloudHeight),this.raymarchingSteps=e.raymarchingSteps,this._precompileTechniques()}setDirty(){this._dirty=this.running=!0}runTask(e){if(this.state===C.CubeMapState.Fading)return R.Yield;this._dirty&&(this._sliceIndex=this._tileIndex=0,this.state=C.CubeMapState.Rendering,this._passParameters.absorption=this.absorption,this._passParameters.density=this.density,this._passParameters.cloudSize=this.cloudSize,this._passParameters.detailSize=this.detailSize,this._passParameters.smoothness=this.smoothness,this._passParameters.cloudHeight=this.cloudHeight,this._passParameters.coverage=this.coverage,this._ensureNoiseTexture().updateWeatherMap(this._computeWeatherTile()),this._dirty=!1);const t=this._acquireTechnique();if(!this._ensureNoiseTexture().textureAtlas||!t.compiled)return R.Yield;const s=I[this._sliceIndex],i=U[this._sliceIndex];p.targetTo(this._viewMatrix,H,s,i),d.fromMat4(this._passParameters.viewMatrix,this._viewMatrix);const r=this.context.renderContext.rctx,o=r.getViewport(),a=T.cubeMapSize/this._tilesPerSlice,n=this._tileIndex*a;r.setViewport(0,n,T.cubeMapSize,a);const l=this._ensureFrameBufferCube(T.cubeMapSize);r.bindFramebuffer(l),this._passParameters.lastSlice=5===this._sliceIndex,r.bindTechnique(t,this.context.renderContext.bind,this._passParameters);const h=M.TextureType.TEXTURE_2D_ARRAY;return l.setColorTextureTarget(h,M.ColorAttachment0,this._sliceIndex),r.screen.draw(),r.gl.flush(),r.setViewport(o.x,o.y,o.width,o.height),this.requestRender(),++this._tileIndex,5===this._sliceIndex&&this._tileIndex===this._tilesPerSlice?(this._sliceIndex=this._tileIndex=0,this.state=C.CubeMapState.Ready,this.running=!1):this._tileIndex===this._tilesPerSlice&&(++this._sliceIndex,this._tileIndex=0),e.madeProgress(),R.Yield}},t.__decorate([l.property({constructOnly:!0})],e.CloudsRenderer.prototype,"context",void 0),t.__decorate([l.property({constructOnly:!0})],e.CloudsRenderer.prototype,"view",void 0),t.__decorate([l.property({constructOnly:!0})],e.CloudsRenderer.prototype,"requestRender",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"coverage",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"density",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"absorption",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"cloudSize",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"detailSize",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"smoothness",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"cloudHeight",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"raymarchingSteps",void 0),t.__decorate([l.property()],e.CloudsRenderer.prototype,"running",void 0),e.CloudsRenderer=t.__decorate([u.subclass("esri.views.3d.environment.CloudsRenderer")],e.CloudsRenderer);const I=[f.fromValues(1,0,0),f.fromValues(-1,0,0),f.fromValues(0,1,0),f.fromValues(0,-1,0),f.fromValues(0,0,1),f.fromValues(0,0,1)],U=[f.fromValues(0,0,-1),f.fromValues(0,0,-1),f.fromValues(0,0,-1),f.fromValues(0,0,-1),f.fromValues(0,1,0),f.fromValues(0,1,0)],H=y.zeros(),V=g.zeros();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));