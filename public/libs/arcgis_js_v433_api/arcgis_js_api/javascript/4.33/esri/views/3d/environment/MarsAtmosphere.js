// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/mathUtils","../../../core/maybe","../../../core/reactiveUtils","../../../core/Logger","../../../core/has","../../../core/RandomLCG","../../../core/Error","../../../core/accessorSupport/decorators/subclass","../../../core/libs/gl-matrix-2/math/mat4","../../../core/libs/gl-matrix-2/factories/mat4f64","../../../core/libs/gl-matrix-2/math/vec2","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/ellipsoidUtils","../../../geometry/support/FloatArray","../webgl","./atmosphereUtils","../../../chunks/SimpleAtmosphere.glsl","./SimpleAtmosphereTechnique","./SimpleAtmosphereTechniqueConfiguration","./resources/MarsAtmosphereTexture","../support/mathUtils","../support/buffer/glUtil","../support/buffer/InterleavedLayout","../webgl-engine/effects/OpaqueEnvironment","../webgl-engine/lib/basicInterfaces","../webgl-engine/lib/DefaultVertexAttributeLocations","../webgl-engine/lib/glUtil3D","../webgl-engine/lib/Util","../webgl-engine/lib/VertexArrayObject","../webgl-engine/lib/VertexAttribute","../../webgl/BufferObject","../../webgl/enums","../../webgl/Texture","../../webgl/TextureDescriptor","../../webgl/Util"],(function(e,t,s,r,i,a,o,n,h,c,l,u,m,p,d,_,g,f,b,x,A,y,V,w,v,P,R,T,S,q,M,C,F,U,E,O,I){"use strict";const L=-1e4,D=V.makePiecewiseLinearFunction([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);let j=class extends P.OpaqueEnvironment{constructor(e){super(e),this._passParameters=new b.SimpleAtmospherePassParameters,this._configuration=new A.SimpleAtmosphereTechniqueConfiguration,this._vao=null,this._vaoCount=0,this._fadeVao=null,this._fadeVaoCount=0,this._texV1=1;const t=e.view,s=d.getReferenceEllipsoid(t.spatialReference),{outerAtmosphereRimWidth:r,radius:i}=s;this._planetRadius=i,this._innerRimFactor=1+L/i,this._middleRimFactor=1+0/i,this._outerRimFactor=1+r/i,this._texV0=0/r,this._texVScale=this._texV1-this._texV0;const a=t.stage.renderView.techniques;a.precompile(x.SimpleAtmosphereTechnique,this._configuration),this._configuration.geometry=A.SimpleAtmosphereGeometry.Underground,a.precompile(x.SimpleAtmosphereTechnique,this._configuration)}initialize(){this.addHandles(r.watch((()=>this.view.environment.atmosphereEnabled),(e=>e?this._enable():this._disable()),r.initial))}destroy(){this._passParameters.texture=s.disposeMaybe(this._passParameters.texture),this._fadeVao=s.disposeMaybe(this._fadeVao),this._vao=s.disposeMaybe(this._vao)}render(e){const t=e.find((({name:e})=>e===g.InternalRenderCategory.OPAQUE_ENVIRONMENT));this._update();const s=this.renderingContext;if(!this._passParameters.texture){const e=new O.TextureDescriptor;e.wrapMode=U.TextureWrapMode.CLAMP_TO_EDGE,e.flipped=!0,e.width=1,e.height=512,this._passParameters.texture=new E.Texture(s,e,y.marsAtmosphereTextureSimple)}if(this._passParameters.undergroundFadeAlpha<1){this._vao||(this._vao=this._createRibbon(s),this._vaoCount=I.vertexCount(this._vao,"geometry")),this._configuration.geometry=A.SimpleAtmosphereGeometry.Cone;const e=this.techniques.get(x.SimpleAtmosphereTechnique,this._configuration);if(!e.compiled)return this.requestRender(R.RenderRequestType.UPDATE),t;s.bindTechnique(e,this.bindParameters,this._passParameters),s.bindVAO(this._vao),s.drawArrays(U.PrimitiveType.TRIANGLES,0,this._vaoCount)}if(this._passParameters.undergroundFadeAlpha>0){this._fadeVao||(this._fadeVao=S.createQuadVAO(s),this._fadeVaoCount=I.vertexCount(this._fadeVao,"geometry")),this._configuration.geometry=A.SimpleAtmosphereGeometry.Underground;const e=this.techniques.get(x.SimpleAtmosphereTechnique,this._configuration);if(!e.compiled)return this.requestRender(R.RenderRequestType.UPDATE),t;s.bindTechnique(e,this.bindParameters,this._passParameters),s.bindVAO(this._fadeVao),s.drawArrays(U.PrimitiveType.TRIANGLE_STRIP,0,this._fadeVaoCount)}return t}_update(){const e=this.bindParameters.camera,s=p.create(),r=this._planetRadius,i=m.length(e.eye),a=i-r;if(a<0){const e=Math.min(-a/5e3,1);this._passParameters.undergroundFadeAlpha=e}else this._passParameters.undergroundFadeAlpha=0;const o=Math.max(50,a),n=r+L;var h,c,l;this._passParameters.innerScale=(c=r,l=n,(h=r+o)*h/(Math.sqrt(h*h-c*c)*Math.sqrt(h*h-l*l)+c*l)-1),this._passParameters.altitudeFade=f.computeInnerAltitudeFade(a),m.scale(s,e.eye,(r+50)/i),G(s,e.center,e.up,r,this._passParameters.silhouette);const d=this._computeScreenRimWidth(e,s,e.up,this._passParameters.silhouette),_=1-511/512,g=D(a);let b=this._texV0+_*this._texVScale,x=this._texV0+d*g*this._texVScale;if(a>50){G(e.eye,e.center,e.up,r,this._passParameters.silhouette);const s=this._computeScreenRimWidth(e,e.eye,e.up,this._passParameters.silhouette),i=t.clamp((s-1.5)/(d-1.5),0,1);b=this._texV0+i*_*this._texVScale,x=this._texV0+t.lerp(this._texV1,d*g,i)*this._texVScale}u.set(this._passParameters.texV,b,x)}_createRibbon(e){const t=_.newFloatArray(1155),s=new Uint32Array(1920);t[0]=0,t[1]=0,t[2]=-1;for(let e=0;e<128;e++){const r=9*e+3;t[r]=e,t[r+1]=this._innerRimFactor,t[r+2]=-1,t[r+3]=e,t[r+4]=this._middleRimFactor,t[r+5]=0,t[r+6]=e,t[r+7]=this._outerRimFactor,t[r+8]=1;const i=3*e+1,a=127===e?1:i+3,o=15*e;s[o]=i,s[o+1]=i+1,s[o+2]=a+1,s[o+3]=a+1,s[o+4]=a,s[o+5]=i,s[o+6]=i+1,s[o+7]=i+2,s[o+8]=a+2,s[o+9]=a+2,s[o+10]=a+1,s[o+11]=i+1,s[o+12]=i,s[o+13]=a,s[o+14]=0}const r=B.createBuffer(s.length),i=r.position;for(let e=0;e<s.length;++e){const r=3*s[e];i.set(e,0,t[r]),i.set(e,1,t[r+1]),i.set(e,2,t[r+2])}return new M.VertexArrayObject(e,T.Default3D,new Map([["geometry",w.glLayout(B)]]),new Map([["geometry",F.BufferObject.createVertex(e,U.Usage.STATIC_DRAW,r.buffer)]]))}_computeScreenRimWidth(e,t,s,r){return m.add(W,r.center,r.v2),m.scale(k,W,this._outerRimFactor),c.lookAt(N,t,W,s),q.project(W,N,e.projectionMatrix,e.viewport,W),q.project(k,N,e.projectionMatrix,e.viewport,k),m.distance(W,k)/e.height}};function G(e,t,s,r,i){const a=m.length(e),o=r*Math.sqrt(a*a-r*r)/a,n=Math.sqrt(r*r-o*o),h=i.v1,c=i.v2;return m.scale(i.center,e,n/a),m.cross(h,e,t),m.squaredLength(h)<1&&m.cross(h,e,s),m.scale(h,h,o/m.length(h)),m.cross(c,h,e),m.scale(c,c,o/m.length(c)),o}j=e.__decorate([h.subclass("esri.views.3d.environment.MarsAtmosphere")],j);const N=l.create(),W=p.create(),k=p.create(),B=v.newLayout().vec3f(C.VertexAttribute.POSITION);return j}));