// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/has","../../webgl-engine/lib/basicInterfaces"],(function(e,t,n){"use strict";class r{constructor(e){this.data=e,this.type="encoded-mesh-texture",this.encoding=n.TextureEncodingMimeType.KTX2_ENCODING}}e.EncodedMeshTexture=r,e.imageFromBinaryData=async function(e,o){if(o===n.TextureEncodingMimeType.KTX2_ENCODING)return new r(e);const c=new Blob([e],{type:o});let i=URL.createObjectURL(c);switch(o){case"image/jpeg":i+="#.jpg";break;case"image/png":i+="#.png"}const a=new Image;if(t("esri-iPhone"))return new Promise(((e,t)=>{const n=()=>{o(),e(a)},r=e=>{o(),t(e)},o=()=>{URL.revokeObjectURL(i),a.removeEventListener("load",n),a.removeEventListener("error",r)};a.addEventListener("load",n),a.addEventListener("error",r),a.src=i}));try{a.src=i,await a.decode()}catch(e){console.warn("Failed decoding HTMLImageElement")}return URL.revokeObjectURL(i),a},e.isEncodedMeshTexture=function(e){return"encoded-mesh-texture"===e?.type},e.jsonFromBinaryData=async function(e){const t=new Blob([e]),n=await t.text();return JSON.parse(n)},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));