// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/mathUtils","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../chunks/vec42","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../geometry/projection/projectVectorToVector","../../../../geometry/support/aaBoundingBox","../../../../geometry/support/vectorStacks","../../../ViewingMode","./Object3DVisualElement","../../layers/graphics/elevationAlignmentUtils","../../layers/graphics/ElevationContext","../../support/engineContent/sdfPrimitives","../../webgl-engine/lib/GeometryUtil","../../webgl-engine/lib/VertexAttribute","../../webgl-engine/materials/HUDMaterial"],(function(e,t,i,r,s,o,n,l,a,u,h,c,p,_,d,g,m){"use strict";class x extends h.Object3DVisualElement{constructor(e){super(e),this._material=null,this._texture=null,this._geometry=null,this._size=3,this._color=o.fromValues(1,0,1,1),this._pixelSnappingEnabled=!0,this._primitive="square",this._outlineSize=1,this._outlineColor=o.fromValues(1,1,1,1),this._elevationInfo=null,this.applyProperties(e)}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){if(e!==this._size){const t=this._preferredTextureSize;this._size=e,t<this._preferredTextureSize?this.recreate():this._updateSizeAttribute()}}get color(){return this._color}set color(e){s.exactEquals(e,this._color)||(s.copy(this._color,e),this._updateMaterial())}get pixelSnappingEnabled(){return this._pixelSnappingEnabled}set pixelSnappingEnabled(e){this._pixelSnappingEnabled!==e&&(this._pixelSnappingEnabled=e,this._updateMaterial())}get primitive(){return this._primitive}set primitive(e){this._primitive!==e&&(this._primitive=e,this.recreate())}get outlineSize(){return this._outlineSize}set outlineSize(e){e!==this._outlineSize&&(this._outlineSize=e,this._updateMaterial())}get outlineColor(){return this._outlineColor}set outlineColor(e){s.exactEquals(e,this._outlineColor)||(s.copy(this._outlineColor,e),this._updateMaterial())}get elevationInfo(){return this._elevationInfo}set elevationInfo(e){this._elevationInfo=e,this.recreateGeometry()}_updateMaterial(){this._material?.setParameters(this._materialParameters)}_updateSizeAttribute(){const e=this.object;if(null==e)return;const t=e.geometries[0];if(null==t)return;const i=t.getMutableAttribute(g.VertexAttribute.SIZE).data,r=this._geometrySize;i[0]=r,i[1]=r,e.geometryVertexAttributeUpdated(e.geometries[0],g.VertexAttribute.SIZE)}get _materialParameters(){return{color:this._color,textureIsSignedDistanceField:!0,sampleSignedDistanceFieldTexelCenter:_.requiresHalfTexelOffset(this._primitive),distanceFieldBoundingBox:_.defaultBoundingBox,occlusionTest:!1,outlineColor:this._outlineColor,outlineSize:this._outlineSize,textureId:this._texture?.id,polygonOffset:!1,shaderPolygonOffset:0,drawAsLabel:!0,depthEnabled:!1,pixelSnappingEnabled:this.pixelSnappingEnabled,isDecoration:this.isDecoration}}get _geometrySize(){return this._size/_.defaultSymbolSizeRatio}createExternalResources(){this._texture=_.createTexture(this._primitive,this._preferredTextureSize),this._material=new m.HUDMaterial(this._materialParameters,this.view.state.viewingMode===u.ViewingMode.Global);const e=this.view.stage;this._texture.load(e.renderView.renderingContext),e.addTexture(this._texture)}destroyExternalResources(){this._texture&&(this.view.stage.removeTexture(this._texture),this._texture.dispose(),this._texture=null),this._material=null}createGeometries(e){const t=this._createRenderGeometry();null!=t&&e.addGeometry(t)}forEachMaterial(e){e(this._material)}get _preferredTextureSize(){return t.clamp(2*this._geometrySize,16,128)}calculateMapBounds(e){const t=this.object?.geometries[0];if(!t)return!1;const i=t.attributes.get(g.VertexAttribute.POSITION).data;return n.projectVectorToVector(i,this.view.renderCoordsHelper.spatialReference,f,this.view.spatialReference),l.expandWithBuffer(e,f),!0}_createRenderGeometry(){const{geometry:e,_material:t}=this;if(null==e||null==t)return null;const{renderCoordsHelper:r,elevationProvider:s}=this.view,o=c.evaluateElevationAlignmentAtPoint(e,s,p.ElevationContext.fromElevationInfo(this.elevationInfo),r),l=i.set(a.sv3d.get(),e.x,e.y,o),u=a.sv3d.get();n.projectVectorToVector(l,e.spatialReference,u,r.spatialReference);const h=this._geometrySize;return d.createPointGeometry(t,{position:u,size:[h,h],centerOffsetAndDistance:[0,0,0,1]})}}const f=r.create();e.PointVisualElement=x,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));