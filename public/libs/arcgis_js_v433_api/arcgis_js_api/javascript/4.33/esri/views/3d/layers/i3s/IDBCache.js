// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/ByteSizeUnit","../../../../core/Error","../../../../core/promiseUtils"],(function(e,t,s,r){"use strict";function o(e){return new Promise(((t,s)=>{e.oncomplete=()=>t(),e.onerror=()=>s(e.error),e.onabort=()=>s(e.error)}))}function i(e){return new Promise(((t,s)=>{"done"===e.readyState?null!=e.error?s(e.error):t(e.result):(e.onsuccess=()=>t(e.result),e.onerror=()=>s(e.error))}))}e.IDBCache=class{constructor(e,s,r=14){this._version=r,this._db=null,this._quotaReductionPromise=null,this._gcCounter=0,this._hit=0,this._miss=0,this._destroyed=!1,this.gcFrequency=50,this.maxByteSize=t.ByteSizeUnit.GIGABYTES,this.quotaReductionFactor=.2,this._dbName=e,this._storeName=s}init(){return Promise.resolve().then((()=>{const e=indexedDB.open(this._dbName,this._version);return e.onupgradeneeded=t=>{const s=e.result,r=e.transaction,o=s.objectStoreNames.contains(this._storeName)?r.objectStore(this._storeName):s.createObjectStore(this._storeName),i=s.objectStoreNames.contains("last_access")?r.objectStore("last_access"):s.createObjectStore("last_access");i.indexNames.contains("date")||i.createIndex("date","date",{unique:!1}),i.indexNames.contains("byteSize")||i.createIndex("byteSize","byteSize",{unique:!1}),t.oldVersion<this._version&&(o.clear(),i.clear())},i(e)})).then((e=>{this._destroyed?e.close():this._db=e}))}destroy(){this._db&&(this._db.close(),this._db=null),this._destroyed=!0}get initialized(){return null!=this._db}getHitRate(){return this._hit/(this._hit+this._miss)}put(e,t){return null==this._db?Promise.reject(new s("indexedb:not-initialized","IndexedDB Cache is not initialized")):(null!=this._quotaReductionPromise?this._quotaReductionPromise:Promise.resolve()).then((()=>this._put(e,t))).catch((s=>{if(s&&"QuotaExceededError"===s.name)return null==this._quotaReductionPromise&&(this._quotaReductionPromise=this._getCacheSize().then((e=>this._removeLeastRecentlyAccessed(t.byteSize+Math.ceil(e*this.quotaReductionFactor)))),this._quotaReductionPromise.then((()=>this._quotaReductionPromise=null),(()=>this._quotaReductionPromise=null))),this._quotaReductionPromise.then((()=>this._put(e,t)));throw s})).then((()=>{this._gcCounter--,this._gcCounter<0&&null!=this._db&&(this._gcCounter=this.gcFrequency,this._getCacheSize().then((e=>this._removeLeastRecentlyAccessed(e-this.maxByteSize))))}))}get(e,t){const s=this._db;if(null==s)return Promise.resolve(void 0);let o=null;return Promise.resolve().then((()=>{const n=s.transaction(this._storeName,"readonly");return o=r.onAbort(t,(()=>{n.abort()})),i(n.objectStore(this._storeName).get(e))})).then((t=>(null==t?++this._miss:this._db&&(++this._hit,this._db.transaction("last_access","readwrite").objectStore("last_access").put({date:Date.now(),byteSize:t.byteSize},e)),null!=o&&o.remove(),t))).catch((()=>{++this._miss,r.throwIfAborted(t),null!=o&&o.remove()}))}remove(e){const t=this._db;return null==t?Promise.resolve():Promise.resolve().then((async()=>{const s=t.transaction([this._storeName,"last_access"],"readwrite"),r=s.objectStore(this._storeName),n=s.objectStore("last_access"),c=r.delete(e),a=n.delete(e);await Promise.all([i(c),i(a),o(s)])}))}_put(e,t){const s=this._db;if(null==s)return Promise.resolve();const r=s.transaction([this._storeName,"last_access"],"readwrite"),n=r.objectStore(this._storeName),c=r.objectStore("last_access"),a=n.put(t,e),l=c.put({date:Date.now(),byteSize:t.byteSize},e);return Promise.all([i(a),i(l),o(r)])}_removeLeastRecentlyAccessed(e){if(e<=0||!this._db)return Promise.resolve();const t=this._db.transaction([this._storeName,"last_access"],"readwrite"),s=t.objectStore(this._storeName),r=t.objectStore("last_access");let i=0;const n=r.index("date").openCursor(null,"next");return n.onsuccess=()=>{const t=n.result;null!=t&&(null!=t.value.byteSize&&(i+=t.value.byteSize),s.delete(t.primaryKey),r.delete(t.primaryKey),i<e&&t.continue())},o(t)}_getCacheSize(){const e=this._db;if(null==e)return Promise.resolve(0);const t=e.transaction("last_access"),s=t.objectStore("last_access");let r=0;const i=s.index("byteSize").openKeyCursor();return i.onsuccess=()=>{const e=i.result;if(!e)return;const t=e.key;null!=t&&(r+=t),e.continue()},o(t).then((()=>r))}},e.whenRequest=i,e.whenTransaction=o,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));