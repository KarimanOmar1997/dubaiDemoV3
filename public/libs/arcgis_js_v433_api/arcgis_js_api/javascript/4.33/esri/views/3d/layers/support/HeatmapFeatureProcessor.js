// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/arrayUtils","../../../../core/handleUtils","../../../../core/has","../../../../core/Logger","../../../../core/memoryEstimations","../../../../core/Promise","../../../../core/reactiveUtils","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/decorators/subclass","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/support/UpdatingHandles","../../../../geometry/projection/projectPointToVector","../../../../geometry/support/Indices","../../../../geometry/support/scaleUtils","../../../../layers/graphics/dehydratedFeatures","../../../../layers/graphics/featureConversionUtils","../../../../layers/graphics/OptimizedFeature","../../../../layers/graphics/OptimizedGeometry","../../../../layers/graphics/data/FeatureStore","../../../../layers/support/fieldUtils","../../../../renderers/support/heatmapUtils","../interfaces","../graphics/DisplayFeatureLimit","../graphics/GraphicsCorePerformanceInfo","./FeatureVisibilityFilter","./highlightUtils","../../terrain/OverlayRenderer","../../webgl-engine/lib/Attribute","../../webgl-engine/lib/DrapedHeatmapRenderer","../../webgl-engine/lib/Geometry","../../webgl-engine/lib/ModelDirtyTypes","../../webgl-engine/lib/RenderGeometry","../../webgl-engine/lib/UpdatePolicy","../../webgl-engine/lib/VertexAttribute","../../webgl-engine/materials/HeatmapDensityMaterial","../../../support/layerViewUtils","../../../webgl/enums","../../../webgl/heatmapTextureUtils","../../webgl-engine/lib/IntersectableGeometry"],(function(e,t,r,a,i,o,s,n,l,p,d,u,c,m,h,y,_,g,F,P,f,R,b,H,S,v,w,T,x,V,G,M,I,A,N,O,D,U,L,C,E,j){"use strict";e.HeatmapFeatureProcessor=class extends n{constructor(e){super(e),this.type="heatmap",this.preferredUpdatePolicy=O.UpdatePolicy.ASYNC,this.dataExtent=null,this.drapeSourceType=S.DrapeSourceType.Features,this._renderGeometries=new Map,this._fieldTotal=0,this._drapeSourceRenderer=null,this._dataType=C.PixelType.HALF_FLOAT,this._pixelFormat=C.PixelFormat.RGBA,this._updatingHandles=new m.UpdatingHandles}initialize(){let e;try{e=E.loadHeatmapTextureConfiguration(this._renderView.renderingContext,o.getLogger(this))}catch(t){this.addResolvingPromise(Promise.reject(t)),e=E.fallBackHeatmapConfiguration}const{dataType:t,samplingMode:r,pixelFormat:i,internalFormat:s}=e;this._featureStore=new R({geometryType:"esriGeometryPoint",hasZ:this.hasZ,hasM:this.hasM}),this._dataType=t,this._pixelFormat=i;const n=t!==C.PixelType.FLOAT,p=this.view.basemapTerrain.overlayManager,d={...this._rendererParameters,stage:this.view.stage,dataType:t,samplingMode:r,pixelFormat:i,internalFormat:s,rendererContext:p.renderer,drapeSource:this};this._drapeSourceRenderer=new M.DrapedHeatmapRenderer(d),p.registerDrapeSource(this,this._drapeSourceRenderer),this._material=new U.HeatmapDensityMaterial({usesHalfFloats:n}),this._materialWithField=new U.HeatmapDensityMaterial({usesHalfFloats:n,isAttributeDriven:!0}),this._filterVisibility=new T.FeatureVisibilityFilter({context:{configuration:this.owner,featureStore:this.featureStore,getFeatureCount:()=>this._loadedPointGraphics.length,setAllFeaturesVisibility:e=>this._setAllFeaturesVisibility(e),clearFeaturesVisibility:()=>this._setAllFeaturesVisibility(!0),updateFeatureVisibilities:e=>this._updateFeatureVisibilities(e)}}),this._updatingHandles.addOnCollectionChange((()=>this._loadedPointGraphics),(e=>this._onLoadedFeaturesChange(e)),l.initial),this._updatingHandles.addWhen((()=>this._materialParameters),(e=>this._forEachMaterial((t=>t.setParameters(e)))),l.initial),this._updatingHandles.add((()=>this._rendererParameters),(e=>this._drapeSourceRenderer.set(e))),this._updatingHandles.add((()=>this._heatmapRendererField),(()=>{this._recreate()}),l.sync),this._updatingHandles.add((()=>({fieldName:this._heatmapRendererFieldName,numeric:this._heatmapRendererFieldIsNumeric})),(({fieldName:e,numeric:t})=>{if(null!=e&&t){let t=0;this._featureStore.forEach((r=>t+=r.attributes[e]??0)),this._fieldTotal=t}else this._fieldTotal=this._featureStore.numFeatures}),l.initial),this.addHandles([l.watch((()=>({fieldName:this._heatmapRendererFieldName,field:this._heatmapRendererField})),(({fieldName:e,field:t})=>{e&&!t&&o.getLogger(this).warn(`Heatmap renderer field '${e}' for layer '${this.layer.title??this.layer.id}' not found`)})),l.watch((()=>({field:this._heatmapRendererField,numeric:this._heatmapRendererFieldIsNumeric})),(({field:e,numeric:t})=>{null==e||t||o.getLogger(this).warn(`Heatmap renderer field '${e.name}' for layer '${this.layer.title??this.layer.id}' does not contain numeric values and cannot be used to drive the heatmap density`)})),a.makeHandle((()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)))])}destroy(){this._renderGeometries.clear(),this._material=null,this._materialWithField=null,this._featureStore.clear(),this._featureStore=null,this._updatingHandles.destroy()}get layer(){return this.owner.layer}get featureStore(){return this._featureStore}get updating(){return this._updatingHandles.updating||this.filterVisibility.updating}get updatingRemaining(){return 0}get suspendInfo(){return{}}get legendEnabled(){return!0}get filterVisibility(){return this._filterVisibility}get displayFeatureLimit(){const e=this.owner?.view?.quality??1,t=this.owner?.view?.qualitySettings,r=t?Math.ceil(t.heatmap.maxTotalNumberOfFeatures*e):0,a=6*r,i=r;return new v.DisplayFeatureLimit(a,i)}get hasZ(){return"hasZ"in this.layer&&this.layer.hasZ}get hasM(){return"hasM"in this.layer&&this.layer.hasM}get view(){return this.owner.view}get fullOpacity(){return this.owner.fullOpacity}get updatePolicy(){return this.owner.updatePolicy}get scaleVisibilitySuspended(){if(!this._isScaleRangeActive)return!1;const{minScale:e,maxScale:t}=this.layer.effectiveScaleRange,{scale:r}=this.view;return!L.scaleBoundsPredicate(r,e??0,t??0)}get usedMemory(){const e=this.usedMemoryPerFeature*this._featureStore.numFeatures,t=this._pixelFormat===C.PixelFormat.RED?1:4,r=this._dataType===C.PixelType.FLOAT?4:2,a=Math.ceil((this._overlayRenderer?.overlays[0]?.resolution??0)*this._densityMapPixelRatio)??0;return a*a*t*r+e}get usedMemoryPerFeature(){const e=this._loadedPointGraphics.find((()=>!0));if(null==e)return 0;const t=s.estimateAttributesMemory(e);return 6*s.estimateFixedArrayMemory([0,0,0],s.estimateNumberMemory)+6*s.estimateFixedArrayMemory([0,0],s.estimateNumberMemory)+(this._heatmapRendererFieldIsNumeric?6*s.estimateNumberMemory:0)+t}get loadedFeatures(){return this._featureStore.numFeatures}get unprocessedMemoryEstimate(){return 0}get performanceInfo(){return new w.GraphicsCorePerformanceInfo(this._renderGeometries.size,this._visibleFeatures,0,0)}get renderer(){return this._heatmapRenderer}get _overlayRenderer(){return this.view.basemapTerrain.overlayManager.renderer}get _overlaySpatialReference(){return this._overlayRenderer.spatialReference}get _rendererParameters(){return{...this._radiusParameter,...this._densityParameters,...this._colorRampParameter,...this._pixelRatioParameter}}get _materialParameters(){return{...this._radiusParameter,...this._resolutionForScaleParameter}}get _densityParameters(){const e=this._heatmapRenderer;if(null==e)return null;const{minDensity:t,maxDensity:r}=e;return{minDensity:t,maxDensity:r,fieldTotal:this._fieldTotal}}get _radiusParameter(){const e=this._heatmapRenderer;return e?{searchRadius:p.pt2px(this._clampSearchRadius(e.radius))}:null}get _resolutionForScaleParameter(){const e=this._heatmapRenderer;if(!e)return null;const{referenceScale:t}=e;return{resolutionForScale:0===t?0:_.getResolutionForScale(t,this.view.spatialReference)}}get _colorRampParameter(){const e=this._heatmapRenderer;return e?{colorRampData:H.generateGradient(e.colorStops)}:null}get _pixelRatioParameter(){return{pixelRatio:this._densityMapPixelRatio}}get _densityMapPixelRatio(){return this.owner?.view?.qualitySettings.heatmap.pixelRatio??1}get _renderView(){return this.view.stage.renderView}get _featuresArePoints(){return"point"===this.layer.geometryType}get _loadedPointGraphics(){return this.owner.loadedGraphics}get _heatmapRenderer(){const e=this.layer.renderer;return"heatmap"===e?.type?e:null}get _heatmapRendererFieldName(){return this._heatmapRenderer?.field}get _heatmapRendererField(){const e=this._heatmapRendererFieldName;return null!=e?this.layer.fieldsIndex.get(e):null}get _heatmapRendererFieldIsNumeric(){const e=this._heatmapRendererField;return null!=e&&b.isNumericField(e)}get _isScaleRangeActive(){const{layer:e}=this;if(!("effectiveScaleRange"in e))return!1;const{minScale:t,maxScale:r}=e.effectiveScaleRange;return L.isScaleRangeActive(t,r)}get _visibleFeatures(){return Array.from(this._renderGeometries.values()).reduce(((e,{visible:t})=>e+(t?1:0)),0)}async whenGraphicBounds(){return null}computeAttachmentOrigin(){return null}highlight(){return x.emptyHighlightHandle}maskOccludee(){return a.makeHandle()}setObjectIdVisibility(){}refreshFilter(){this.filterVisibility.reapply()}_onLoadedFeaturesChange(e){if(!this._featuresArePoints)return;const{objectIdField:t}=this.layer;this._featureStore.removeManyById(e.removed.map((e=>g.getObjectId(e,t)))),this._featureStore.addMany(e.added.map((e=>{const{attributes:r,centroid:a,geometry:i}=e,o=new P.OptimizedFeature(F.convertFromPoint(new f,i),r,a?F.convertFromPoint(new f,a):null,g.getObjectId(e,t));return o.displayId=e.uid,o})));const a=e.added,i=e.removed;this._fieldTotal+=this._computeFieldTotalChange(a,i);const o=i.map((({uid:e})=>{const t=this._renderGeometries.get(e);return this._renderGeometries.delete(e),t})).filter(r.isSome),s=a.map((e=>{const t=this._pointGraphicToRenderGeometry(e);return this._renderGeometries.set(e.uid,t),t}));o.length>0&&this._drapeSourceRenderer.removeGeometries(o,A.DirtyOperation.REMOVE),s.length>0&&this._drapeSourceRenderer.addGeometries(s,A.DirtyOperation.ADD),(s.length>0||o.length>0)&&(this.filterVisibility.reapply(),this._renderView.requestRender())}_recreate(){if(!this._loadedPointGraphics)return;const e=this._loadedPointGraphics.toArray();this._onLoadedFeaturesChange({added:e,removed:e})}_pointGraphicToRenderGeometry(e){const t=this._heatmapRendererFieldName,r=null!=t?this._materialWithField:this._material,a=c.create();h.projectPointToVector(e.geometry,a,this._overlaySpatialReference),a[2]=V.drapedZ;const i=y.getContinuousIndexArray(1),o=[[D.VertexAttribute.POSITION,new G.Attribute(a,i,a.length)]],s=this._heatmapRendererFieldIsNumeric;null!=t&&o.push([D.VertexAttribute.FEATUREATTRIBUTE,new G.Attribute([s?e.attributes[t]??0:0],i,1)]);const n=new N.RenderGeometry(new I.Geometry(r,o,null,j.GeometryType.Point),{layerViewUid:this.owner.layerViewUid,graphicUid:e.uid});return n.visible=this.filterVisibility.defaultVisibility,n}_forEachMaterial(e){e(this._material),e(this._materialWithField)}_computeFieldTotalChange(e,t){if(null==this._heatmapRendererFieldName||!this._heatmapRendererFieldIsNumeric)return e.length-t.length;const r=this._heatmapRendererFieldName,a=(e,t)=>e+(t.attributes[r]??0);return e.reduce(a,0)-t.reduce(a,0)}_clampSearchRadius(e){return e>112&&o.getLogger(this).warnOnce("SceneView supports a maximum radius of 112 pt for HeatmapRenderer."),Math.min(e,112)}_updateFeatureVisibilities(e){const t=[];this._featureStore.forEach((({objectId:r,displayId:a})=>{const i=e(r),o=this._renderGeometries.get(a);o&&o.visible!==i&&(t.push(o),o.visible=i)})),this._drapeSourceRenderer.modifyGeometries(t,A.DirtyState.VISIBILITY)}_setAllFeaturesVisibility(e){const t=[];for(const r of this._renderGeometries.values())r.visible!==e&&(t.push(r),r.visible=e);this._drapeSourceRenderer.modifyGeometries(t,A.DirtyState.VISIBILITY)}get test(){}},t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"type",void 0),t.__decorate([d.property({constructOnly:!0})],e.HeatmapFeatureProcessor.prototype,"owner",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"layer",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"featureStore",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"updating",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"updatingRemaining",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"suspendInfo",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"legendEnabled",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"filterVisibility",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"displayFeatureLimit",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"preferredUpdatePolicy",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"hasZ",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"hasM",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"dataExtent",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"view",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"fullOpacity",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"updatePolicy",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"drapeSourceType",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"scaleVisibilitySuspended",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"renderer",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_featureStore",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_filterVisibility",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_overlayRenderer",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_overlaySpatialReference",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_rendererParameters",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_materialParameters",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_densityParameters",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_radiusParameter",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_resolutionForScaleParameter",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_colorRampParameter",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_pixelRatioParameter",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_densityMapPixelRatio",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_renderGeometries",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_material",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_materialWithField",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_renderView",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_featuresArePoints",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_loadedPointGraphics",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_heatmapRenderer",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_heatmapRendererFieldName",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_heatmapRendererField",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_heatmapRendererFieldIsNumeric",null),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_fieldTotal",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_drapeSourceRenderer",void 0),t.__decorate([d.property()],e.HeatmapFeatureProcessor.prototype,"_isScaleRangeActive",null),e.HeatmapFeatureProcessor=t.__decorate([u.subclass("esri.views.3d.layers.support.HeatmapFeatureProcessor")],e.HeatmapFeatureProcessor),e.maxRadiusPt=112,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));