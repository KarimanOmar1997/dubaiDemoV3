// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/mathUtils","../../../core/unitUtils","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/ellipsoidUtils","../../../geometry/Extent","../../../geometry/support/ray","../../../chunks/sphere","../../ViewingMode","../environment/atmosphereUtils","../webgl-engine/lib/DepthRange"],(function(e,t,i,n,r,a,s,o,l,c,m,h){"use strict";class u{constructor(e,t){this._elevationProvider=e,this._referenceEllipsoid=a.getReferenceEllipsoid(t),this._unitInMeters=i.getMetersPerUnitForSR(t,this._referenceEllipsoid.metersPerDegree)}compute(e,i,r,a){const{eye:o,center:l}=e;let c=o[2]*this._unitInMeters;const m=c,h=c-a,u=this._elevationProvider?.visibleElevationBounds;u&&(c=h>=0?m-this._unitInMeters*u.min:this._unitInMeters*u.max-m),i??=new s({xmin:0,ymin:0,zmin:0,xmax:0,ymax:0,zmax:0});const d={x:i.xmax-i.xmin,y:i.ymax-i.ymin,z:4*Math.max(i.xmax-i.xmin,i.ymax-i.ymin)},M=Math.max(d.x,d.y,d.z);n.subtract(E,l,o),b[0]=E[0]>0?i.xmax:i.xmin,b[1]=E[1]>0?i.ymax:i.ymin,b[2]=E[2]>0?M/2:-M/2,n.subtract(b,b,o),n.normalize(E,E);const p=1.1*n.dot(b,E)*this._unitInMeters,y=Math.sqrt(c*(c+2*this._referenceEllipsoid.radius)),_=Math.max(i.xmax-i.xmin,i.ymax-i.ymin),w=_*g*this._unitInMeters,z=_*v*this._unitInMeters,R=t.clamp((c-z)/(w-z),0,1)**3,P=Math.min(t.lerp(y,p,R),y)*Math.max(Math.log(Math.abs(h)),1);return x(Math.min(P,Math.max(34064e4,M))/this._unitInMeters,f,this._unitInMeters,I)}}class d{constructor(e,t){this._elevationProvider=e,this._referenceEllipsoid=a.getReferenceEllipsoid(t)}compute(e,i,r,a){const{eye:s}=e,c=n.length(s),u=c-this._referenceEllipsoid.radius,d=this._referenceEllipsoid.radius+Math.min(0,a),g=Math.abs(u-a),v=Math.max(g,Math.abs(u)),R=this._elevationProvider?.visibleElevationBounds.max??0,P=m.computeInnerAltitudeFade(v),U=Math.sqrt(v*(v+2*d)),D=c+this._referenceEllipsoid.radius,F=1.2*t.lerp(U,D,P),S=(Math.log(v)-M)/(p-M);x(F,t.clamp(f-S*(f-y),y,f),1,I);const V=this._referenceEllipsoid.radius+R,k=this._referenceEllipsoid.radius+this._referenceEllipsoid.atmosphereHeight,q=Math.max(V,k),B=c-q;if(P>0&&B>_){const i=n.normalize(b,n.scale(b,e.eye,-1)),a=n.normalize(E,e.viewForward),s=t.acosClamped(n.dot(i,a)),c=.5*e.fovY,m=Math.cos(c);let u=h.DepthRange.infinite.near;if(s<=c)u=B*m;else{const t=n.normalize(b,e.viewUp),i=Math.tan(c),r=n.scale(b,t,i),s=n.normalize(b,n.subtract(b,a,r)),h=o.fromValues(e.eye,s,z),d=l.fromRadius(w,q);if(l.intersectRay(d,h,b)){const t=n.subtract(b,b,e.eye);u=n.length(t)*m}}const d=.99*Math.min(r.near,u);if(d<h.DepthRange.infinite.near&&d>I.near){const e=t.lerp(I.near,d,P);I.near=e}}return I}}function x(e,t,i,n){const r=_/i,a=e/t;return a>r?(n.far=e,n.near=a):(n.near=r,n.far=n.near*t),n}const M=7.983,p=16.994,f=2e4,y=100,_=2,g=.001,v=1e-4,b=r.create(),E=r.create(),I={near:0,far:0},w=l.create(),z=o.create();e.createNearFarHeuristic=function(e,t,i){return e===c.ViewingMode.Global?new d(t,i):new u(t,i)},e.minNearDistanceInMeters=_,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));