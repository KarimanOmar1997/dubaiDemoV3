// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/mathUtils","../../../core/unitUtils","../../../core/libs/gl-matrix-2/math/mat4","../../../chunks/vec32","../../../geometry/ellipsoidUtils","../../../geometry/spatialReferenceEllipsoidUtils","../../../geometry/projection/projectPointToVector","../../../geometry/projection/projectVectorToPoint","../../../geometry/projection/projectVectorToVector","../../../geometry/support/aaBoundingRect","../../../geometry/support/Axis","../../../geometry/support/coordinateSystem","../../../geometry/support/plane","../../../geometry/support/vector","../../../geometry/support/vectorStacks","../../../layers/graphics/dehydratedFeatureUtils","../../ViewingMode"],(function(t,e,o,i,r,s,n,a,c,l,d,p,h,u,m,g,y,S){"use strict";class A{constructor(t,e,o,i){this.viewingMode=t,this.spatialReference=e,this.unitInMeters=o,this._coordinateSystem=i,this._tmpCoordinateSystem=h.create(i),this.referenceEllipsoid=s.getReferenceEllipsoid(e),this.sphericalPCPF=n.getSphericalPCPF(e)}set extent(t){t&&h.setExtent(this._coordinateSystem,t,this._coordinateSystem)}get extent(){return h.getExtent(this._coordinateSystem,d.create())}getAltitude(t){return h.altitudeAt(this._coordinateSystem,t)}setAltitude(t,e,o=t){return h.setAltitudeAt(this._coordinateSystem,o,e,t)}setAltitudeOfTransformation(t,e){h.setAltitudeOfTransformation(this._coordinateSystem,e,t,e)}worldUpAtPosition(t,e){return h.normalAt(this._coordinateSystem,t,e)}worldBasisAtPosition(t,e,o){return h.axisAt(this._coordinateSystem,t,e,o)}basisMatrixAtPosition(t,e){const o=this.worldBasisAtPosition(t,p.Axis.X,g.sv3d.get()),r=this.worldBasisAtPosition(t,p.Axis.Y,g.sv3d.get()),s=this.worldBasisAtPosition(t,p.Axis.Z,g.sv3d.get());return i.set(e,o[0],o[1],o[2],0,r[0],r[1],r[2],0,s[0],s[1],s[2],0,0,0,0,1),e}headingAtPosition(t,o){const i=this.worldUpAtPosition(t,g.sv3d.get()),r=this.worldBasisAtPosition(t,p.Axis.Y,g.sv3d.get()),s=m.angleAroundAxis(o,r,i);return e.rad2deg(s)}intersectManifoldClosestSilhouette(t,e,o){return h.elevate(this._coordinateSystem,e,this._tmpCoordinateSystem),h.intersectRayClosestSilhouette(this._tmpCoordinateSystem,t,o),o}intersectManifold(t,e,o){h.elevate(this._coordinateSystem,e,this._tmpCoordinateSystem);const i=g.sv3d.get();return h.intersectRay(this._tmpCoordinateSystem,t,i)?r.copy(o,i):null}intersectInfiniteManifold(t,e,o){if(this.viewingMode===S.ViewingMode.Global)return this.intersectManifold(t,e,o);h.elevate(this._coordinateSystem,e,this._tmpCoordinateSystem);const i=this._tmpCoordinateSystem.value,s=g.sv3d.get();return u.intersectRay(i.plane,t,s)?r.copy(o,s):null}toRenderCoords(t,e,o){return y.isDehydratedPoint(t)?a.projectPointToVector(t,e,this.spatialReference):l.projectVectorToVector(t,e,o,this.spatialReference)}fromRenderCoords(t,e,o=null){return y.isDehydratedPoint(e)?(null!=o&&(e.spatialReference=o),c.projectVectorToPoint(t,this.spatialReference,e)?e:null):l.projectVectorToVector(t,this.spatialReference,e,o)?e:null}static create(t,e){switch(t){case S.ViewingMode.Local:return new A(S.ViewingMode.Local,e,o.getMetersPerUnitForSR(e),h.createLocal());case S.ViewingMode.Global:return new A(S.ViewingMode.Global,e,1,h.createGlobal(e))}}static renderUnitScaleFactor(t,e){return o.getMetersPerCartesianUnitForSR(t)/o.getMetersPerCartesianUnitForSR(e)}}t.RenderCoordsHelper=A,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));