// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/libs/gl-matrix-2/math/mat3","../../../core/libs/gl-matrix-2/factories/mat3f64","../../../core/libs/gl-matrix-2/factories/mat4f64","../../../core/libs/gl-matrix-2/math/quat","../../../core/libs/gl-matrix-2/factories/quatf64","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../chunks/vec42","../../../core/libs/gl-matrix-2/factories/vec4f64","../../../geometry/ellipsoidUtils","../../../geometry/spatialReferenceEllipsoidUtils","../../../geometry/projection/computeTranslationToOriginAndRotation","../../../geometry/projection/projectBuffer","../../../geometry/projection/projectors","../../../geometry/support/plane","../../../geometry/support/spatialReferenceUtils","../../../geometry/support/vectorStacks","../../ViewingMode","./dito","../webgl-engine/lib/Attribute"],(function(t,e,a,s,r,i,n,o,h,c,d,u,l,f,g,_,m,b,p,M,S){"use strict";class Q{constructor(t=o.ZEROS,e=V,a=i.IDENTITY){this._data=[t[0],t[1],t[2],e[0],e[1],e[2],a[0],a[1],a[2],a[3]]}clone(){const t=new Q;return t._data=this._data.slice(),t}invalidate(){this._data[3]=-1}get isValid(){return this._data[3]>=0}static fromData(t){const e=new Q;return e._data=t.slice(),e}static fromJSON(t){return new Q(t.center,t.halfSize,t.quaternion)}copy(t){this._data=t.data.slice()}get center(){return n.set(b.sv3d.get(),this._data[0],this._data[1],this._data[2])}get centerX(){return this._data[0]}get centerY(){return this._data[1]}get centerZ(){return this._data[2]}getCenter(t){return t[0]=this._data[0],t[1]=this._data[1],t[2]=this._data[2],t}set center(t){this._data[0]=t[0],this._data[1]=t[1],this._data[2]=t[2]}setCenter(t,e,a){this._data[0]=t,this._data[1]=e,this._data[2]=a}get halfSize(){return n.set(b.sv3d.get(),this._data[3],this._data[4],this._data[5])}get halfSizeX(){return this._data[3]}get halfSizeY(){return this._data[4]}get halfSizeZ(){return this._data[5]}getHalfSize(t){return t[0]=this._data[3],t[1]=this._data[4],t[2]=this._data[5],t}set halfSize(t){this._data[3]=t[0],this._data[4]=t[1],this._data[5]=t[2]}get quaternion(){return r.set(b.sq4d.get(),this._data[6],this._data[7],this._data[8],this._data[9])}getQuaternion(t){return t[0]=this._data[6],t[1]=this._data[7],t[2]=this._data[8],t[3]=this._data[9],t}set quaternion(t){this._data[6]=t[0],this._data[7]=t[1],this._data[8]=t[2],this._data[9]=t[3]}get data(){return this._data}getCorners(t){const e=P,a=this._data;e[0]=a[6],e[1]=a[7],e[2]=a[8],e[3]=a[9];for(let s=0;s<8;++s){const r=t[s];r[0]=(1&s?-1:1)*a[3],r[1]=(2&s?-1:1)*a[4],r[2]=(4&s?-1:1)*a[5],n.transformQuat(r,r,e),r[0]+=a[0],r[1]+=a[1],r[2]+=a[2]}}doesIntersectFrustumConservativeApproximation(t){return this.intersectPlane(t[0])<=0&&this.intersectPlane(t[1])<=0&&this.intersectPlane(t[2])<=0&&this.intersectPlane(t[3])<=0&&this.intersectPlane(t[4])<=0&&this.intersectPlane(t[5])<=0}get radius(){const t=this._data[3],e=this._data[4],a=this._data[5];return Math.sqrt(t*t+e*e+a*a)}intersectSphere(t){z[0]=this._data[0]-t[0],z[1]=this._data[1]-t[1],z[2]=this._data[2]-t[2];const e=this.getQuaternion(j);return r.conjugate(P,e),n.transformQuat(z,z,P),n.abs(z,z),x[0]=Math.min(z[0],this._data[3]),x[1]=Math.min(z[1],this._data[4]),x[2]=Math.min(z[2],this._data[5]),n.sqrDist(x,z)<t[3]*t[3]}intersectSphereWithMBS(t,e=this.radius){const a=this._data;z[0]=a[0]-t[0],z[1]=a[1]-t[1],z[2]=a[2]-t[2];const s=t[3],r=s+e;return!(n.sqrLen(z)>r*r)&&(P[0]=-a[6],P[1]=-a[7],P[2]=-a[8],P[3]=a[9],n.transformQuat(z,z,P),n.abs(z,z),x[0]=Math.min(z[0],a[3]),x[1]=Math.min(z[1],a[4]),x[2]=Math.min(z[2],a[5]),n.sqrDist(x,z)<s*s)}intersectPlane(t){const e=t[0]*this._data[0]+t[1]*this._data[1]+t[2]*this._data[2]+t[3],a=this.projectedRadius(_.getNormal(t));return e>a?1:e<-a?-1:0}intersectRay(t,e,a=0){const s=this._data,r=P;r[0]=-s[6],r[1]=-s[7],r[2]=-s[8],r[3]=s[9],z[0]=t[0]-s[0],z[1]=t[1]-s[1],z[2]=t[2]-s[2];const i=n.transformQuat(z,z,P),o=n.transformQuat(x,e,P);let h=-1/0,c=1/0;const d=this.getHalfSize(H);for(let t=0;t<3;t++){const e=i[t],s=o[t],r=d[t]+a;if(Math.abs(s)>1e-6){const t=(r-e)/s,a=(-r-e)/s;h=Math.max(h,Math.min(t,a)),c=Math.min(c,Math.max(t,a))}else if(e>r||e<-r)return!1}return h<=c}projectedArea(t,a,s,i){const o=this.getQuaternion(j);r.conjugate(P,o),z[0]=t[0]-this._data[0],z[1]=t[1]-this._data[1],z[2]=t[2]-this._data[2],n.transformQuat(z,z,P);const c=this.getHalfSize(H),d=z[0]<-c[0]?-1:z[0]>c[0]?1:0,u=z[1]<-c[1]?-1:z[1]>c[1]?1:0,l=z[2]<-c[2]?-1:z[2]>c[2]?1:0,f=Math.abs(d)+Math.abs(u)+Math.abs(l);if(0===f)return 1/0;const g=1===f?4:6,_=6*(d+3*u+9*l+13);e.fromQuat(N,o),e.scale(N,N,c);const m=this.getCenter(T);for(let t=0;t<g;t++){const e=v[_+t];n.set(z,((1&e)<<1)-1,(2&e)-1,((4&e)>>1)-1),n.transformMat3(z,z,N),n.add(y,m,z),y[3]=1,h.transformMat4(y,y,a);const s=1/Math.max(1e-6,y[3]);q[2*t]=y[0]*s,q[2*t+1]=y[1]*s}const b=2*g-2;let p=q[0]*(q[3]-q[b+1])+q[b]*(q[1]-q[b-1]);for(let t=2;t<b;t+=2)p+=q[t]*(q[t+3]-q[t-1]);return Math.abs(p)*s*i*.125}projectedRadius(t){const e=this.getQuaternion(j);return r.conjugate(P,e),n.transformQuat(z,t,P),Math.abs(z[0]*this._data[3])+Math.abs(z[1]*this._data[4])+Math.abs(z[2]*this._data[5])}minimumDistancePlane(t){return t[0]*this._data[0]+t[1]*this._data[1]+t[2]*this._data[2]+t[3]-this.projectedRadius(_.getNormal(t))}maximumDistancePlane(t){return t[0]*this._data[0]+t[1]*this._data[1]+t[2]*this._data[2]+t[3]+this.projectedRadius(_.getNormal(t))}toAaBoundingBox(t){const a=this.getQuaternion(j),s=e.fromQuat(N,a),r=this._data[3]*Math.abs(s[0])+this._data[4]*Math.abs(s[3])+this._data[5]*Math.abs(s[6]),i=this._data[3]*Math.abs(s[1])+this._data[4]*Math.abs(s[4])+this._data[5]*Math.abs(s[7]),n=this._data[3]*Math.abs(s[2])+this._data[4]*Math.abs(s[5])+this._data[5]*Math.abs(s[8]);t[0]=this._data[0]-r,t[1]=this._data[1]-i,t[2]=this._data[2]-n,t[3]=this._data[0]+r,t[4]=this._data[1]+i,t[5]=this._data[2]+n}transform(t,e,a,s=0,i=u.getSphericalPCPF(a),o=u.getSphericalPCPF(e),h=g.getProjector(e,o)){if(a===i)e.isGeographic?function(t,e,a,s,i=u.getSphericalPCPF(a)){const o=d.getReferenceEllipsoid(a),h=1+Math.max(0,s)/(o.radius+t.centerZ);t.getCenter(O),O[2]+=s,f.projectBuffer(O,a,0,O,i,0),e.center=O;const c=t.getQuaternion(j);e.quaternion=c,r.conjugate(P,c),n.set(Z,0,0,1),n.transformQuat(Z,Z,P);const l=t.getHalfSize(H);n.set(Z,l[0]*Math.abs(Z[0]),l[1]*Math.abs(Z[1]),l[2]*Math.abs(Z[2])),n.scale(Z,Z,o.inverseFlattening),n.add(Z,l,Z),e.halfSize=n.scale(Z,Z,h)}(this,t,e,s,o):function(t,e,a,s,i=u.getSphericalPCPF(a),o=g.getProjector(a,i)){t.getCorners(I),t.getCenter(O),O[2]+=s,l.computeTranslationToOriginAndRotation(a,O,D,i),e.setCenter(D[12],D[13],D[14]);const h=2*Math.sqrt(1+D[0]+D[5]+D[10]);P[0]=(D[6]-D[9])/h,P[1]=(D[8]-D[2])/h,P[2]=(D[1]-D[4])/h,P[3]=.25*h;const c=t.getQuaternion(j);e.quaternion=r.multiply(P,P,c),r.conjugate(P,P),n.set(U,0,0,0);const d=e.getCenter(F);for(const t of I)t[2]+=s,o(t,0,t,0),n.sub(Z,t,d),n.transformQuat(Z,Z,P),n.abs(Z,Z),n.max(U,U,Z);e.halfSize=U}(this,t,e,s,o,h);else if(e.isWGS84&&(a.isWebMercator||m.isPlateCarree(a)))!function(t,e,a,s,r){e.getCenter(T),T[2]+=r;const i=u.getSphericalPCPF(a);f.projectBuffer(T,t,0,T,i,0),R(i,e,T,a,s)}(e,this,a,t,s);else if(e.isWebMercator&&m.isPlateCarree(a))!function(t,e,a,s,r){e.getCenter(T),T[2]+=r,R(t,e,T,a,s)}(e,this,a,t,s);else{const r=this.getCenter(T);r[2]+=s,f.projectBuffer(r,e,0,r,a,0),t.center=r,this!==t&&(t.quaternion=this.getQuaternion(j),t.halfSize=this.getHalfSize(H))}}}const P=i.create(),j=i.create(),C=i.create(),z=o.create(),x=o.create(),y=c.create();function A(t,e=new Q){return M.computeOBB(t,e),e}const q=[.1,.2,.3,.4,.5,.6,.7,.8,.9,1,1.1,1.2],v=(()=>{const t=new Int8Array(162);let e=0;const a=a=>{for(let s=0;s<a.length;s++)t[e+s]=a[s];e+=6};return a([6,2,3,1,5,4]),a([0,2,3,1,5,4]),a([0,2,3,7,5,4]),a([0,1,3,2,6,4]),a([0,1,3,2,0,0]),a([0,1,5,7,3,2]),a([0,1,3,7,6,4]),a([0,1,3,7,6,2]),a([0,1,5,7,6,2]),a([0,1,5,4,6,2]),a([0,1,5,4,0,0]),a([0,1,3,7,5,4]),a([0,2,6,4,0,0]),a([0,0,0,0,0,0]),a([1,3,7,5,0,0]),a([2,3,7,6,4,0]),a([2,3,7,6,0,0]),a([2,3,1,5,7,6]),a([0,1,5,7,6,2]),a([0,1,5,7,6,4]),a([0,1,3,7,6,4]),a([4,5,7,6,2,0]),a([4,5,7,6,0,0]),a([4,5,1,3,7,6]),a([0,2,3,7,5,4]),a([6,2,3,7,5,4]),a([6,2,3,1,5,4]),t})();function R(t,a,s,r,i){const n=a.getQuaternion(j),o=e.fromQuat(N,n),h=a.getHalfSize(H);for(let t=0;t<8;++t){for(let e=0;e<3;++e)O[e]=h[e]*(t&1<<e?-1:1);for(let e=0;e<3;++e){let a=s[e];for(let t=0;t<3;++t)a+=O[t]*o[3*t+e];w[3*t+e]=a}}f.projectBuffer(w,t,0,w,r,0,8),A(B,i)}const w=new Array(24),B=new S.Vertices(w,3),O=o.create(),T=o.create(),F=o.create(),H=o.create(),N=a.create(),D=s.create(),I=[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],Z=o.create(),U=o.create(),E=o.create(),V=o.freeze(-1,-1,-1);t.Obb=Q,t.compute=A,t.computeOffsetObb=function(t,e,a,s,i){const h=t.getQuaternion(j);i.quaternion=h,r.conjugate(P,h);const c=t.getCenter(T),d=t.getHalfSize(H);if(s===p.ViewingMode.Global){n.transformQuat(Z,c,P),n.abs(U,Z),n.min(E,U,d),n.sub(E,U,E);const s=n.length(E);n.add(E,U,d);const r=n.length(E);if(s<a)i.center=c,n.set(Z,a,a,a),i.halfSize=n.add(Z,d,Z);else{const o=r>0?1+e/r:1,h=s>0?1+a/s:1,c=(h+o)/2,u=(h-o)/2;n.scale(E,U,u),i.halfSize=n.scaleAndAdd(E,E,d,c),n.scale(E,U,c),n.scaleAndAdd(E,E,d,u),n.sign(Z,Z),n.multiply(Z,E,Z);const l=t.getQuaternion(C);i.center=n.transformQuat(Z,Z,l)}}else{i.center=n.scaleAndAdd(Z,c,o.UNIT_Z,(a+e)/2);const t=n.transformQuat(Z,o.UNIT_Z,P);n.abs(t,t),i.halfSize=n.scaleAndAdd(U,d,t,(a-e)/2)}return i},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));