// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/accessorSupport/decorators/property","../../../../../core/has","../../../../../core/Logger","../../../../../core/RandomLCG","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../webgl","../../../webgl/RenderNode","../../core/FBOCacheFormats","../../core/shaderModules/glsl","../../lib/DefaultVertexAttributeLocations","../../../../webgl/checkWebGLError","../../../../webgl/enums","../../../../../webscene/support/AlphaCutoff"],(function(e,r,t,o,i,n,a,c,l,s,u,d,h,p,f,m){"use strict";var F;function x(e){switch(e){case"float":return"sampler2D";case"uint":return"usampler2D";case"int":return"isampler2D"}}function g(e){if(!e)return"float";const{internalFormat:r}=e.descriptor;switch(r){case f.SizedPixelFormat.R8I:case f.SizedPixelFormat.R16I:case f.SizedPixelFormat.R32I:case f.SizedPixelFormat.RG8I:case f.SizedPixelFormat.RG16I:case f.SizedPixelFormat.RG32I:case f.SizedPixelFormat.RGB8I:case f.SizedPixelFormat.RGB16I:case f.SizedPixelFormat.RGB32I:case f.SizedPixelFormat.RGBA8I:case f.SizedPixelFormat.RGBA16I:case f.SizedPixelFormat.RGBA32I:return"int";case f.SizedPixelFormat.R8UI:case f.SizedPixelFormat.R16UI:case f.SizedPixelFormat.R32UI:case f.SizedPixelFormat.RG8UI:case f.SizedPixelFormat.RG16UI:case f.SizedPixelFormat.RG32UI:case f.SizedPixelFormat.RGB8UI:case f.SizedPixelFormat.RGB16UI:case f.SizedPixelFormat.RGB32UI:case f.SizedPixelFormat.RGBA8UI:case f.SizedPixelFormat.RGBA16UI:case f.SizedPixelFormat.RGBA32UI:return"uint";default:return"float"}}e.RenderNodeVisualizerNode=class extends s{constructor(e){super(e),this.destroyedCB=null,this.produces=l.RenderCategory.FINAL,this.consumes={required:[l.RenderCategory.FINAL]},this.clearColor=c.ZEROS,this._focusedFBOType=0,this._program=new Map}destroy(){this._program.forEach((e=>e.dispose())),this._program.clear(),this.destroyedCB()}render(e){const r=e.find((({name:e})=>e===l.RenderCategory.FINAL));if(!this._focusedFBO)return r;const t=this.renderingContext;t.bindFramebuffer(r.fbo),t.setClearColor(0,0,0,0),t.clear(f.FramebufferBit.COLOR);const o=this._focusedFBO.getTexture(),i=[g(o)],n=this._ensureShader(t,!1,i);return t.useProgram(n),t.bindTexture(o,0),n.setUniform1i("colorTex0",0),n.setUniform1i("inputType",this._focusedFBOType),3===this._focusedFBOType&&n.setUniform2fv("nearFar",this.camera.nearFar),t.screen.draw(),r}getDownscaledFBO(r,t,o,i,n){t===e.FocusState.ON&&(i=r.width,n=r.height);const a=r.colorAttachments.length,c=[],l=new Array(a);for(let e=0;e<a;++e){const t=r.getColorTexture(f.ColorAttachment0+e);if(t){const r=g(t);c.push(r);const{descriptor:o}=t;"float"!==r||o.hasMipmap||o.isImmutable||(t.generateMipmap(),l[e]=!0)}}const s=this.renderingContext,{depthStencilTexture:h}=r,m=this._ensureShader(s,null!=h,c),F=this.fboCache.acquire(i,n,"fbo visualizer");s.useProgram(m),s.bindFramebuffer(F.fbo);const x=[];for(let e=0;e<a;++e){const t=f.ColorAttachment0+e,o=`colorTex${d.glsl.int(e)}`;s.bindTexture(r.getColorTexture(t),e),m.setUniform1i(o,e),e>0&&F.acquireColor(t,u.ColorFormat.RGBA8UNORM),x.push(t)}const v=h?.descriptor.linearFilterDepth??!1;if(h){const e=a;h.setShadowFiltering(!1),s.bindTexture(h,e),m.setUniform1i("depthTex",e);const r=f.ColorAttachment0+e;r>f.ColorAttachment0&&F.acquireColor(r,u.ColorFormat.RGBA8UNORM,"depth to color"),x.push(r)}s.gl.drawBuffers(x),p.checkWebGLError(s.gl);const R=s.getViewport();s.setViewport(0,0,i,n),s.setClearColor(0,0,0,0),s.clear(f.FramebufferBit.COLOR),s.setBlendingEnabled(!0),s.setBlendFunction(f.BlendFactor.ONE,f.BlendFactor.ONE_MINUS_SRC_ALPHA);const T="linear-depth"===o||o.includes("shadow"),S="overlay highlight"===o||"highlights"===o||"highlight mix"===o,b="highlight coverage"===o,C=r.colorTexture?.descriptor,B=C?.internalFormat,z=T?3:S?5:b?6:B===f.SizedPixelFormat.R16F||B===f.SizedPixelFormat.R32F||B===f.SizedPixelFormat.R8?1:B===f.SizedPixelFormat.RG8?2:B===f.SizedPixelFormat.RGBA16F?4:B===f.SizedPixelFormat.RG8UI?7:0;m.setUniform1i("inputType",z),m.setUniform2fv("nearFar",this.camera.nearFar),s.screen.draw(),p.checkWebGLError(s.gl),s.bindFramebuffer(null),s.setViewport(R.x,R.y,R.width,R.height),t===e.FocusState.ON&&(this._focusedFBO=F,this._focusedFBOType=z);for(let e=0;e<a;++e)if(l[e]){const t=r.getColorTexture(f.ColorAttachment0+e);t?.clearMipmap()}return h&&h.setShadowFiltering(v),F}clearFocusedFBO(){this._focusedFBO=null}getPreviewContent(e,r,t,o){if(!t)return null;const i=this.renderingContext,n=this.fboCache.acquire(e,r,"fbo visualizer");i.bindFramebuffer(n?.fbo),i.setClearColor(this.clearColor[0],this.clearColor[1],this.clearColor[2],this.clearColor[3]),i.clear(f.FramebufferBit.COLOR),i.setBlendingEnabled(!0),i.setBlendFunction(f.BlendFactor.ONE,f.BlendFactor.ONE_MINUS_SRC_ALPHA);const a=t.getColorTexture(o);i.setViewport(0,0,e,r);const c=this._ensureShader(i,!1,[g(a)]);i.useProgram(c),i.bindTexture(a,0),c.setUniform1i("colorTex0",0),c.setUniform1i("inputType",0),i.screen.draw();const l=new ImageData(new Uint8ClampedArray(e*r*4),e,r);return i.gl.readPixels(0,0,e,r,f.PixelFormat.RGBA,f.DataType.UNSIGNED_BYTE,new Uint8Array(l.data.buffer)),p.checkWebGLError(i.gl),i.bindFramebuffer(null),n?.release(),l}_ensureShader(e,r,t){const o=function(e){const{hasDepthAttachment:r,colorAttachmentTypes:t}=e;return`${r?"Depth":""}${t.reduceRight(((e,r)=>e+`|C${r}`),"")}`}({hasDepthAttachment:r,colorAttachmentTypes:t}),i=this._program.get(o);if(i)return i;const n=t.length,a=`#version 300 es\n      precision highp float;\n      precision highp usampler2D;\n\n      in vec2 uv;\n      ${(e=>{let r="";for(let t=0;t<e.length;++t){const o=e[t];r+=`layout(location = ${d.glsl.int(t)}) out vec4 fragColor${d.glsl.int(t)};\n                uniform ${x(o)} colorTex${d.glsl.int(t)};`}return r})(t)}\n      ${d.If(r,`layout(location = ${d.glsl.int(n)}) out vec4 fragDepth;\n         uniform sampler2D depthTex;`)}\n\n      uniform int inputType;\n      uniform vec2 nearFar;\n\n      // Factors to convert rgba back to float\n      const vec4 RGBA_2_FLOAT_FACTORS = vec4(\n        255.0 / (256.0),\n        255.0 / (256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n      );\n\n\n      float rgbaTofloat(vec4 rgba) {\n        // Convert components from 0->1 back to 0->255 and then add the components together with their corresponding\n        // fixed point factors, i.e. (256^1, 256^2, 256^3, 256^4)\n        return dot(rgba, RGBA_2_FLOAT_FACTORS);\n      }\n\n      float linearDepthFromFloat(float depth) {\n        depth = pow(depth, 0.2);\n        return -(depth * (nearFar[1] - nearFar[0]) + nearFar[0]);\n      }\n\n      float linearDepthFromRGBA(vec4 depth) {\n        return linearDepthFromFloat(rgbaTofloat(depth));\n      }\n\n      ${"float"===t[0]?"float linearDepthFromTexture(sampler2D depthTex, vec2 uv) {\n          ivec2 iuv = ivec2(uv * vec2(textureSize(depthTex, 0)));\n          return linearDepthFromRGBA(texelFetch(depthTex, iuv, 0));\n        }":"float linearDepthFromTexture(usampler2D depthTex, vec2 uv) {\n        ivec2 iuv = ivec2(uv * vec2(textureSize(depthTex, 0)));\n        return linearDepthFromRGBA(vec4(texelFetch(depthTex, iuv, 0)) * 255.0);\n      }"}\n\n      void main() {\n        ${d.If(t.length>0,d.glsl`
        vec4 color;
        if (inputType == 1) {
          color = vec4(vec3(texture(colorTex0, uv).r), 1.0);
        } else if (inputType == 2) {
          color = vec4(texture(colorTex0, uv).rg, 0.0, 1.0);
        } else if (inputType == 3) {
          float depth = 1.0 - ((-linearDepthFromTexture(colorTex0, uv) - nearFar[0]) / (nearFar[1] - nearFar[0]));
          color = vec4(vec3(depth), depth >= 0.999 ? 0.0 : 1.0);
        } else if (inputType == 4) {
          color = vec4(texture(colorTex0, uv));
          color = vec4(color.rgb / color.a, color.a);
        } else if (inputType == 5) {
          color = vec4(texture(colorTex0, uv)) * 255.0;
          color = vec4(color.rgb / color.a, color.a);
        } else if(inputType == 6) {
          vec2 texDim =  vec2(textureSize(colorTex0, 0));
          ivec2 iuv = ivec2(uv*texDim);
          uvec2 hh = uvec2(texelFetch(colorTex0,iuv,0).rg);
          color = vec4(
             ((hh & uvec2(0x55u)) != uvec2(0u)) ? 1.0 : 0.0,
             ((hh & uvec2(0xaau)) != uvec2(0u)) ? 1.0 : 0.0,
             0.0,
             1.0);
        } else {
          color = vec4(texture(colorTex0, uv));
        }


        if(color.a < ${d.glsl.float(m.alphaCutoff)})
          discard;
        fragColor0 = color;
        ${d.If(t.length>1,(e=>{let r="";for(let t=1;t<e.length;++t){const o=e[t],i=`texture(colorTex${d.glsl.int(t)}, uv)`,n="float"===o?i:`vec4( vec2(${i}), 0.0, 1.0)`;r+=`fragColor${d.glsl.int(t)} = ${n};`}return r})(t))}
        `)}\n\n        ${d.If(r,"float depth = 1.0 - pow(texture(depthTex, uv).r, 10.0);\n            fragDepth = vec4(vec3(depth), depth < 0.000001 ? 0.0 : 1.0);")}        \n      }`,c=e.programCache.acquire("#version 300 es\n      in vec2 position;\n      out vec2 uv;\n\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n        uv = position * 0.5 + vec2(0.5);\n      }",a,h.Default3D);return this._program.set(o,c),c}},r.__decorate([t.property()],e.RenderNodeVisualizerNode.prototype,"destroyedCB",void 0),r.__decorate([t.property()],e.RenderNodeVisualizerNode.prototype,"produces",void 0),r.__decorate([t.property()],e.RenderNodeVisualizerNode.prototype,"consumes",void 0),r.__decorate([t.property()],e.RenderNodeVisualizerNode.prototype,"clearColor",void 0),e.RenderNodeVisualizerNode=r.__decorate([a.subclass("esri.views.3d.webgl-engine.effects.debug.RenderNodeVisualizerNode")],e.RenderNodeVisualizerNode),e.FocusState=void 0,(F=e.FocusState||(e.FocusState={}))[F.ON=0]="ON",F[F.OFF=1]="OFF",Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));