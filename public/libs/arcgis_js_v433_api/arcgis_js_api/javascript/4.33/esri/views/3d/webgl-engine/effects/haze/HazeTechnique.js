// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../environment/ChapmanApproximation.glsl","../../core/shaderTechnique/ReloadableShaderModule","../../core/shaderTechnique/ShaderTechnique","../../../../../chunks/Haze.glsl","../../../../webgl/enums","../../../../webgl/renderState"],(function(e,r,a,n,t,o,i,l){"use strict";class s extends a.ChapmanApproximationParameters{constructor(){super(...arguments),this.hazeStrength=1}}class c extends t.ShaderTechnique{constructor(r,a){super(r,a,new n.ReloadableShaderModule(o.Haze,(()=>new Promise(((r,a)=>e(["./Haze.glsl"],r,a))))))}initializePipeline(e){return e.reduced?l.makePipelineState({blending:l.copySource,depthTest:{func:i.CompareFunction.ALWAYS},colorWrite:l.defaultColorWrite}):l.makePipelineState({blending:l.separateBlendingParams(i.BlendFactor.ONE,i.BlendFactor.ZERO,i.BlendFactor.ONE_MINUS_SRC_COLOR,i.BlendFactor.ONE),colorWrite:l.defaultColorWrite})}}r.HazePassParameters=s,r.HazeTechnique=c,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})}));