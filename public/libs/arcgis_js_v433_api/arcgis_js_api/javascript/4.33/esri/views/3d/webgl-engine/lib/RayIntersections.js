// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/support/aaBoundingBox","./IntersectableGeometry","./Util","./VertexAttribute"],(function(t,e,n,i,o,c,s){"use strict";class r{constructor(t=!1,e=!0){this.isVerticalRay=t,this.normalRequired=e}}const a=i.create(),u=n.create();function l(t,e,n,o,c,s,r){if(null==t)return;const b=x(n,u);if(i.setMin(a,t.bbMin),i.setMax(a,t.bbMax),null!=c&&c.applyToAabb(a),T(a,e,b,o)){const{primitiveIndices:i,position:a}=t,u=i?i.length:a.indices.length/3;if(u>v){const i=t.getChildren();if(void 0!==i){for(const t of i)l(t,e,n,o,c,s,r);return}}!function(t,e,n,i,o,c,s,r,a,u,l){const b=t[0],h=t[1],m=t[2],p=e[0],y=e[1],d=e[2],{normalRequired:g}=u;for(let t=0;t<i;++t){const e=r[t],n=3*e,i=s*o[n];let u=c[i],x=c[i+1],T=c[i+2];const I=s*o[n+1];let v=c[I],V=c[I+1],q=c[I+2];const D=s*o[n+2];let A=c[D],G=c[D+1],O=c[D+2];null!=a&&([u,x,T]=a.applyToVertex(u,x,T,t),[v,V,q]=a.applyToVertex(v,V,q,t),[A,G,O]=a.applyToVertex(A,G,O,t));const B=v-u,N=V-x,P=q-T,S=A-u,W=G-x,z=O-T,F=y*z-W*d,U=d*S-z*p,j=p*W-S*y,k=B*F+N*U+P*j;if(Math.abs(k)<=R)continue;const w=b-u,C=h-x,E=m-T,H=w*F+C*U+E*j;if(k>0){if(H<0||H>k)continue}else if(H>0||H<k)continue;const J=C*P-N*E,K=E*B-P*w,L=w*N-B*C,Q=p*J+y*K+d*L;if(k>0){if(Q<0||H+Q>k)continue}else if(Q>0||H+Q<k)continue;const X=(S*J+W*K+z*L)/k;X>=0&&l(X,e,g?M(B,N,P,S,W,z,f):null)}}(e,n,0,u,a.indices,a.data,a.stride,i,c,s,r)}}const f=n.create();function b(t,n,i,o,c,s,r,a,u,l){const f=n,b=q,M=Math.abs(f[0]),d=Math.abs(f[1]),g=Math.abs(f[2]),x=M>=d?M>=g?0:2:d>=g?1:2,T=x,I=f[T]<0?2:1,v=(x+I)%3,R=(x+(3-I))%3,V=f[v]/f[T],D=f[R]/f[T],A=1/f[T],G=h,O=m,B=p,{normalRequired:N}=u;for(let n=i;n<o;++n){const i=3*n,o=r*c[i];e.set(b[0],s[o+0],s[o+1],s[o+2]);const u=r*c[i+1];e.set(b[1],s[u+0],s[u+1],s[u+2]);const f=r*c[i+2];e.set(b[2],s[f+0],s[f+1],s[f+2]),a&&(e.copy(b[0],a.applyToVertex(b[0][0],b[0][1],b[0][2],n)),e.copy(b[1],a.applyToVertex(b[1][0],b[1][1],b[1][2],n)),e.copy(b[2],a.applyToVertex(b[2][0],b[2][1],b[2][2],n))),e.sub(G,b[0],t),e.sub(O,b[1],t),e.sub(B,b[2],t);const h=G[v]-V*G[T],m=G[R]-D*G[T],p=O[v]-V*O[T],M=O[R]-D*O[T],d=B[v]-V*B[T],g=B[R]-D*B[T],x=d*M-g*p,I=h*g-m*d,q=p*m-M*h;if((x<0||I<0||q<0)&&(x>0||I>0||q>0))continue;const P=x+I+q;if(0===P)continue;const S=x*(A*G[T])+I*(A*O[T])+q*(A*B[T]);if(S*Math.sign(P)<0)continue;const W=S/P;W>=0&&l(W,n,N?y(b):null)}}const h=n.create(),m=n.create(),p=n.create();function M(t,n,i,o,c,s,r){return e.set(d,t,n,i),e.set(g,o,c,s),e.cross(r,d,g),e.normalize(r,r),r}function y(t){return e.sub(d,t[1],t[0]),e.sub(g,t[2],t[0]),e.cross(f,d,g),e.normalize(f,f),f}const d=n.create(),g=n.create();function x(t,n){return e.set(n,1/t[0],1/t[1],1/t[2])}function T(t,e,n,i){return I(t,e,n,i,1/0)}function I(t,e,n,i,o){const c=(t[0]-i-e[0])*n[0],s=(t[3]+i-e[0])*n[0];let r=Math.min(c,s),a=Math.max(c,s);const u=(t[1]-i-e[1])*n[1],l=(t[4]+i-e[1])*n[1];if(a=Math.min(a,Math.max(u,l)),a<0)return!1;if(r=Math.max(r,Math.min(u,l)),r>a)return!1;const f=(t[2]-i-e[2])*n[2],b=(t[5]+i-e[2])*n[2];return a=Math.min(a,Math.max(f,b)),!(a<0)&&(r=Math.max(r,Math.min(f,b)),!(r>a)&&r<o)}const v=1e3,R=1e-7,V=n.create(),q=[n.create(),n.create(),n.create()];t.MeshIntersectionOptions=r,t.computeInvDir=function(t,n,i){return e.set(i,1/(n[0]-t[0]),1/(n[1]-t[1]),1/(n[2]-t[2]))},t.computeInvDirFromDirection=x,t.computeNormalFromBarycentric=M,t.intersectAabbInvDir=T,t.intersectAabbInvDirBefore=I,t.intersectRayTriangles=function(t,e,n,i,o,c,s,r,a,u=null,l=0){const b=t[0],h=t[1],m=t[2],p=e[0],y=e[1],d=e[2];for(let t=n;t<i;++t){const e=l+(u?u[t]:t),n=3*e,i=s*o[n],g=c[i],x=c[i+1],T=c[i+2],I=s*o[n+1],v=c[I],V=c[I+1],q=c[I+2],D=s*o[n+2],A=v-g,G=V-x,O=q-T,B=c[D]-g,N=c[D+1]-x,P=c[D+2]-T,S=y*P-N*d,W=d*B-P*p,z=p*N-B*y,F=A*S+G*W+O*z;if(Math.abs(F)<=R)continue;const U=b-g,j=h-x,k=m-T,w=U*S+j*W+k*z;if(F>0){if(w<0||w>F)continue}else if(w>0||w<F)continue;const C=j*O-G*k,E=k*A-O*U,H=U*G-A*j,J=p*C+y*E+d*H;if(F>0){if(J<0||w+J>F)continue}else if(J>0||w+J<F)continue;const K=(B*C+N*E+P*H)/F;K>=0&&a(K,e,r?M(A,G,O,B,N,P,f):null)}},t.intersectRayTrianglesWithDisplacementWatertight=b,t.intersectRayTrianglesWithVerticalOffsetENUGlobal=function(t,e,n,i,o,c,s,r,a,u,l,b=null,h=0){const m=t[0],p=t[1],y=t[2],d=e[0],g=e[1],x=e[2];for(let t=n;t<i;++t){const e=h+(b?b[t]:t),n=3*e,i=s*o[n],T=c[i],I=c[i+1],v=c[i+2],V=s*o[n+1],q=c[V],D=c[V+1],A=c[V+2],G=s*o[n+2],O=c[G],B=c[G+1],N=c[G+2],P=v-a,S=r/Math.sqrt(T*T+I*I+P*P),W=T+T*S,z=I+I*S,F=v+P*S,U=A-a,j=r/Math.sqrt(q*q+D*D+U*U),k=q+q*j,w=D+D*j,C=A+U*j,E=N-a,H=r/Math.sqrt(O*O+B*B+E*E),J=k-W,K=w-z,L=C-F,Q=O+O*H-W,X=B+B*H-z,Y=N+E*H-F,Z=g*Y-X*x,$=x*Q-Y*d,_=d*X-Q*g,tt=J*Z+K*$+L*_;if(Math.abs(tt)<=R)continue;const et=m-W,nt=p-z,it=y-F,ot=et*Z+nt*$+it*_;if(tt>0){if(ot<0||ot>tt)continue}else if(ot>0||ot<tt)continue;const ct=nt*L-K*it,st=it*J-L*et,rt=et*K-J*nt,at=d*ct+g*st+x*rt;if(tt>0){if(at<0||ot+at>tt)continue}else if(at>0||ot+at<tt)continue;const ut=(Q*ct+X*st+Y*rt)/tt;ut>=0&&l(ut,e,u?M(J,K,L,Q,X,Y,f):null)}},t.intersectRenderGeometryTriangles=function(t,e,n,i,o,c,s,r){const a=t[0],u=t[1],l=t[2],b=e[0],h=e[1],m=e[2];for(let t=n;t<i;++t){const e=3*t,n=e+1,i=e+2,p=c*e,y=o[p],d=o[p+1],g=o[p+2],x=c*n,T=c*i,I=o[x]-y,v=o[x+1]-d,V=o[x+2]-g,q=o[T]-y,D=o[T+1]-d,A=o[T+2]-g,G=h*A-D*m,O=m*q-A*b,B=b*D-q*h,N=I*G+v*O+V*B;if(Math.abs(N)<=R)continue;const P=a-y,S=u-d,W=l-g,z=P*G+S*O+W*B;if(N>0){if(z<0||z>N)continue}else if(z>0||z<N)continue;const F=S*V-v*W,U=W*I-V*P,j=P*v-I*S,k=b*F+h*U+m*j;if(N>0){if(k<0||z+k>N)continue}else if(k>0||z+k<N)continue;const w=(q*F+D*U+A*j)/N;w>=0&&r(w,t,s?M(I,v,V,q,D,A,f):null)}},t.intersectTriangleGeometry=function(t,n,i,a,u,f){if(!t.visible)return;const h=e.sub(V,a,i),m=(t,e,n)=>{f(t,n,e)},p=new r(!1,n.options.normalRequired);if(t.boundingInfo){c.assert(t.type===o.GeometryType.Mesh);const e=n.tolerance;l(t.boundingInfo,i,h,e,u,p,m)}else{const e=t.attributes.get(s.VertexAttribute.POSITION),n=e.indices;b(i,h,0,n.length/3,n,e.data,e.stride,u,p,m)}},t.intersectTriangles=function(t,n,i,o,c,s,r,a,u){const{data:l,stride:f}=s;b(t,e.sub(V,n,t),i,o,c,l,f,r,a,u)},t.triangleRayParallelTolerance=R,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));