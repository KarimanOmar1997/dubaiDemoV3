// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/Evented","../../../../core/Logger","../../../../core/promiseUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","./basicInterfaces","./ITexture","./TextureUpdater","../../../support/Scheduler"],(function(e,t,r,s,o,i,n,u,a,d,l,c,h,p){"use strict";e.TextureRepository=class extends r{constructor(e){super({}),this._stage=e,this._textures=new Map,this._loadingCount=0,this.events=new s,this.updater=new h.TextureUpdater,this._frameTask=e.view.resourceController.scheduler.registerTask(p.TaskPriority.TEXTURE_UNLOAD)}normalizeCtorArgs(){return{}}destroy(){this._frameTask.remove(),this._stage.forEachTexture((e=>e.unload()))}get updating(){return this._loadingCount>0||this._frameTask.updating}acquire(e){const t=this._textures.get(e);return t?(t.ref(),t.loadingPromise??t):this._createNewRef(e)}update(){this.updater.run()&&this.events.emit("changed",l.RenderRequestType.BACKGROUND)}_createNewRef(e){const t=this._stage.getTexture(e);if(null==t)return null;const r=t.events.on("unloaded",(()=>{r.remove(),this._onTextureUnloaded(t)})),s=new _(e,(()=>{this._frameTask.schedule((()=>{s.isUnreferenced&&t.unload()}))}));return this._textures.set(e,s),s.ref(),t.loaded?(this._updateGLTexture(s,t.glTexture),c.isUpdatableTexture(t)&&this.updater.add(t),s):(this._loadingCount++,s.loadingPromise=this._stage.schedule((()=>{const e=t.load(this._stage.renderView.renderingContext),r=e=>(this._loadingCount--,s.loadingPromise=null,this._updateGLTexture(s,e),c.isUpdatableTexture(t)&&this.updater.add(t),s);return i.isPromiseLike(e)?e.then(r,(e=>(this._loadingCount--,s.loadingPromise=null,i.isAbortError(e)||o.getLogger(this).error(e),null))):r(e)})),s.loadingPromise)}_updateGLTexture(e,t){e.glTexture=t,this.events.emit("changed",l.RenderRequestType.UPDATE)}_onTextureUnloaded(e){this._textures.delete(e.id),this.updater.remove(e)}},t.__decorate([n.property()],e.TextureRepository.prototype,"_loadingCount",void 0),t.__decorate([n.property()],e.TextureRepository.prototype,"_frameTask",void 0),t.__decorate([n.property()],e.TextureRepository.prototype,"updating",null),e.TextureRepository=t.__decorate([d.subclass("esri.views.3d.webgl-engine.lib.TextureRepository")],e.TextureRepository);class _{constructor(e,t){this.id=e,this._release=t,this._refCount=0}get isUnreferenced(){return 0===this._refCount}ref(){++this._refCount}release(){--this._refCount,this._refCount>0||(0!==this._refCount?(o.getLogger("esri.views.3d.webgl-engine.lib.TextureRepository.RefCountedTextureImpl").error("Cannot dereference texture that has no references!"),this._refCount=0):this._release())}}Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));