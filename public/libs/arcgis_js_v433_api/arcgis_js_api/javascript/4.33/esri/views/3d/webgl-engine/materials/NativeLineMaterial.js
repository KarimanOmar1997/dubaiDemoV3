// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/Logger","../../../../core/mathUtils","../../../../core/screenUtils","../../../../core/libs/gl-matrix-2/math/vec2","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../geometry/support/frustum","../../../../geometry/support/lineSegment","../../../../geometry/support/plane","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","../lib/RenderSlot","../lib/Util","../lib/VertexAttribute","./DefaultBufferWriter","./DefaultLayouts","../shaders/NativeLineTechnique","../shaders/NativeLineTechniqueConfiguration","../../../../webscene/support/AlphaCutoff"],(function(e,t,r,i,n,a,s,o,c,l,u,d,f,g,h,m,p,b,P,S,y,A){"use strict";class x extends g.Material{constructor(e){super(e,R),this._configuration=new y.NativeLineTechniqueConfiguration,this.produces=new Map([[h.RenderSlot.OPAQUE_MATERIAL,e=>d.isColorHighlightOrOID(e)]])}getConfiguration(e,t){return super.getConfiguration(e,t,this._configuration),this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.hasVertexColors=this.parameters.hasVertexColors,this._configuration.transparent=this.parameters.color[3]<1||this.parameters.width<1,this._configuration.hasOccludees=t.hasOccludees,this._configuration}get visible(){return this.parameters.color[3]>=A.alphaCutoff}intersect(e,r,i,s,o,d){const f=i.camera;if(!i.options.selectionMode||!e.visible||!f)return;if(!m.isTranslationMatrix(r))return void t.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial").error("intersection assumes a translation-only matrix");const g=e.attributes.get(p.VertexAttribute.POSITION).data,h=_;n.copy(h,i.point),a.set(w[0],h[0]-2,h[1]+2,0),a.set(w[1],h[0]+2,h[1]+2,0),a.set(w[2],h[0]+2,h[1]-2,0),a.set(w[3],h[0]-2,h[1]-2,0);for(let e=0;e<4;e++)if(!f.unprojectFromRenderScreen(w[e],U[e]))return;u.fromPoints(f.eye,U[0],U[1],j),u.fromPoints(f.eye,U[1],U[2],q),u.fromPoints(f.eye,U[2],U[3],B),u.fromPoints(f.eye,U[3],U[0],W);let b=Number.MAX_VALUE,P=0;for(let e=0;e<g.length-5;e+=3){if(N[0]=g[e]+r[12],N[1]=g[e+1]+r[13],N[2]=g[e+2]+r[14],M[0]=g[e+3]+r[12],M[1]=g[e+4]+r[13],M[2]=g[e+5]+r[14],u.signedDistance(j,N)<0&&u.signedDistance(j,M)<0||u.signedDistance(q,N)<0&&u.signedDistance(q,M)<0||u.signedDistance(B,N)<0&&u.signedDistance(B,M)<0||u.signedDistance(W,N)<0&&u.signedDistance(W,M)<0)continue;if(f.projectToRenderScreen(N,T),f.projectToRenderScreen(M,C),T[2]<0&&C[2]>0){a.subtract(v,N,M);const e=f.frustum,t=-u.signedDistance(e[c.PlaneIndex.NEAR],N)/a.dot(v,u.getNormal(e[c.PlaneIndex.NEAR]));a.scale(v,v,t),a.add(N,N,v),f.projectToRenderScreen(N,T)}else if(T[2]>0&&C[2]<0){a.subtract(v,M,N);const e=f.frustum,t=-u.signedDistance(e[c.PlaneIndex.NEAR],M)/a.dot(v,u.getNormal(e[c.PlaneIndex.NEAR]));a.scale(v,v,t),a.add(M,M,v),f.projectToRenderScreen(M,C)}else if(T[2]<0&&C[2]<0)continue;T[2]=0,C[2]=0;const t=l.distance2(l.fromPoints(T,C,I),h);t<b&&(b=t,a.copy(E,N),a.copy(O,M),P=e/3)}const S=i.rayBegin,y=i.rayEnd;if(b<4){let e=Number.MAX_VALUE;if(l.closestLineSegmentPoint(l.fromPoints(E,O,I),l.fromPoints(S,y,V),D)){a.subtract(D,D,S);const t=a.length(D);a.scale(D,D,1/t),e=t/a.distance(S,y)}d(e,D,P)}}intersectDraped(e,t,i,n,a){if(!t.options.selectionMode)return;const s=e.attributes.get(p.VertexAttribute.POSITION).data,o=e.attributes.get(p.VertexAttribute.SIZE),c=o?o.data[0]:0,l=i[0],u=i[1],d=((c+1)/2+4)*e.screenToWorldRatio;let f=Number.MAX_VALUE,g=0;for(let e=0;e<s.length-5;e+=3){const t=s[e],i=s[e+1],n=l-t,a=u-i,o=s[e+3]-t,c=s[e+4]-i,d=o*n+c*a,h=o*o+c*c,m=r.clamp(d/h,0,1),p=o*m-n,b=c*m-a,P=p*p+b*b;P<f&&(f=P,g=e/3)}f<d*d&&n(a.distance,a.normal,g)}createGLMaterial(e){return new L(e)}createBufferWriter(){const e=this.parameters.hasVertexColors?P.PositionColorLayout:P.PositionLayout;return new b.DefaultBufferWriter(e)}}class L extends f{beginSlot(e){return this.getTechnique(S.NativeLineTechnique,e)}}class R extends g.MaterialParameters{constructor(){super(...arguments),this.color=o.ONES,this.hasVertexColors=!1,this.hasSlicePlane=!1,this.width=1}}const N=s.create(),M=s.create(),v=s.create(),D=s.create(),T=i.createRenderScreenPointArray3(),C=i.createRenderScreenPointArray3(),E=s.create(),O=s.create(),I=l.create(),V=l.create(),_=s.create(),w=[i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3()],U=[s.create(),s.create(),s.create(),s.create()],j=u.create(),q=u.create(),B=u.create(),W=u.create();e.NativeLineMaterial=x,e.Parameters=R,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));