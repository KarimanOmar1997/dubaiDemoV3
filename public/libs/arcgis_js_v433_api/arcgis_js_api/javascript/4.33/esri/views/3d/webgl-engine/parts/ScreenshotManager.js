// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/promiseUtils","../../../../core/libs/gl-matrix-2/factories/vec4f64","../lib/basicInterfaces","../lib/rendererUtils","../../../support/RenderState","../../../support/screenshotUtils","../../../webgl/enums","../../../webgl/FramebufferObject","../../../../core/imageUtils"],(function(e,t,r,a,n,i,s,o,c,h){"use strict";e.ScreenshotContext=class{constructor(e,t){this.parameters=e,this.fbos=t}},e.ScreenshotManager=class{constructor(e,t,r){this._rctx=e,this._renderFunctions=t,this._forceCameraHook=r,this.supersample=!0,this._screenshotQueue=new Array}destroy(){this._rctx=null}async takeScreenshot(e){await this._renderFunctions.prepareOverlay(),this._renderFunctions.requestRenderScene(a.RenderRequestType.BACKGROUND);const r=t.createResolver();return this._screenshotQueue.push({settings:e,resolver:r}),r.promise}update(e,t){for(const r of this._screenshotQueue){if(null==this._rctx){r.resolver.reject();continue}const a={...r.settings,pixelRatio:r.settings.pixelRatio*e.parameters.camera.pixelRatio},n=this._renderScreenshot(e,a,t);r.resolver(n)}this._screenshotQueue.length=0}_renderScreenshotOverlay(e,t,r){e.width=t.width,e.height=t.height;const a=e.getContext("2d",{willReadFrequently:!0}),n=r.pixelRatio;return a.save(),a.translate(0,t.height),a.scale(1,-1),r.region&&a.translate(-r.region.x,-r.region.y),a.scale(n,n),t=this._renderFunctions.renderOverlay(e,r.disableDecorations,t),a.restore(),t}_readbackScreenshot(e,t){return e.resample?this._readbackScreenshotResampled({...e,resample:e.resample},t):this._readbackScreenshotImmediate(e,t)}_readbackScreenshotResampled(e,t){const{framebufferWidth:r,framebufferHeight:a,region:n,resample:i}=e,c=this._ensureScreenshotEncodeCanvas();let l=h.createEmptyImageData(r,a,c);this._rctx.gl.readPixels(0,0,r,a,o.PixelFormat.RGBA,o.DataType.UNSIGNED_BYTE,new Uint8Array(l.data.buffer)),t(),l=this._renderScreenshotOverlay(c,l,{...e,region:void 0});const d=h.createEmptyImageData(n.width,n.height,c);return s.resampleHermite(l,d,!0,i.region.x,a-(i.region.y+i.region.height),i.region.width,i.region.height)}_readbackScreenshotImmediate(e,t){const{framebufferHeight:r,region:a}=e,n=this._ensureScreenshotEncodeCanvas(),i=h.createEmptyImageData(a.width,a.height,n);return this._rctx.gl.readPixels(a.x,r-(a.y+a.height),a.width,a.height,o.PixelFormat.RGBA,o.DataType.UNSIGNED_BYTE,new Uint8Array(i.data.buffer)),t(),this._renderScreenshotOverlay(n,i,e)}_renderScreenshot(e,t,a){const s=e.parameters.camera,o={width:t.framebufferWidth,height:t.framebufferHeight};c.ensureAttachmentMaxSize(o,Math.min(this._rctx.parameters.maxTextureSize,this._rctx.parameters.maxRenderbufferSize));let h=!1;const l=o.width!==s.fullWidth||o.height!==s.fullHeight,d=t.ignorePadding&&s.pixelRatio!==t.pixelRatio,u=l||t.disableDecorations||d||t.objectAndLayerIdColor;let f=null,m=null;if(u){const e=s.clone();if(t.ignorePadding){const a=r.clone(e.padding);for(let r=0;r<4;r++)a[r]=Math.round(a[r]/e.pixelRatio*t.pixelRatio);e.padding=a}e.fullWidth=o.width,e.fullHeight=o.height,e.pixelRatio=t.pixelRatio;const c=s.fovX-e.fovX,l=s.fovY-e.fovY;c<0&&c<l?e.fovX=s.fovX:l<0&&l<c&&(e.fovY=s.fovY);const d={camera:e,contentCamera:e,mode:i.RenderState.IDLE,alignPixelEnabled:!0,contentPixelRatio:e.pixelRatio};this._forceCameraHook(d),h=!0;const u=this._renderFunctions.renderScene(d,a,t.objectAndLayerIdColor?n.RendererTarget.ObjectAndLayerID:n.RendererTarget.Screenshot,t.disableDecorations);m=u.screen,f=u.olid}this._rctx.bindFramebuffer(m?.fbo);const g=this._readbackScreenshot(t,(()=>{this._rctx.bindFramebuffer(null),m?.release()}));let b=null;if(t.objectAndLayerIdColor){const e=()=>{this._rctx.bindFramebuffer(null),f?.release()};this._rctx.bindFramebuffer(f?.fbo),b=this._readbackScreenshot(t,e),this._rctx.bindFramebuffer(null)}if(u&&!this._rctx.contextAttributes.alpha)for(let e=3;e<g.data.length;e+=4)g.data[e]=255;if(b&&!this._rctx.contextAttributes.alpha)for(let e=3;e<b.data.length;e+=4)b.data[e]=255;return h&&this._forceCameraHook(e.parameters),[g,b]}_ensureScreenshotEncodeCanvas(){return this._screenshotEncodeCanvas??=document.createElement("canvas"),this._screenshotEncodeCanvas}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));