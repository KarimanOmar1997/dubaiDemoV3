// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["require","exports","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/OrderIndependentTransparency","../lib/VertexAttribute","../../../../chunks/MeasurementArrow.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,t,r,n,i,l,o,u,a){"use strict";class s extends n.ShaderTechnique{constructor(t,n){super(t,n,new r.ReloadableShaderModule(o.MeasurementArrow,(()=>new Promise(((t,r)=>e(["./MeasurementArrow.glsl"],t,r))))),d),this.primitiveType=u.PrimitiveType.TRIANGLE_STRIP}initializePipeline(e){return a.makePipelineState({blending:e.transparent?i.blending(e.oitPass):null,polygonOffset:e.polygonOffsetEnabled?{factor:0,units:-4}:null,depthTest:{func:u.CompareFunction.LESS},depthWrite:a.defaultDepthWrite,colorWrite:a.defaultColorWrite})}}const d=new Map([[l.VertexAttribute.POSITION,0],[l.VertexAttribute.NORMAL,1],[l.VertexAttribute.UV0,2],[l.VertexAttribute.LENGTH,3]]);t.MeasurementArrowTechnique=s,t.vertexAttributeLocations=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));