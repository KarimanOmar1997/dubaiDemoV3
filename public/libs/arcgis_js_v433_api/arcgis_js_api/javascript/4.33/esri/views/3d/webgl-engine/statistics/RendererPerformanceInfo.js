// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/maybe","../../../../core/PerformanceSampler","../../../../core/time","../../webgl","../../../webgl/TimerPool"],(function(e,t,r,i,a,s){"use strict";var o;e.PerformanceCategory=void 0,(o=e.PerformanceCategory||(e.PerformanceCategory={})).OVERLAY="overlay",o.PREPARE="prepare",o.SHADOW_MAP="shadow map",o.DEPTH="depth",o.ACCUMULATED_SHADOWS="accumulated shadows",o.APPLY_ACCUMULATED_SHADOWS="apply accumulated shadows",o.OBJECT_AND_LAYER_ID_COLOR="object/layer id color",o.NORMALS="normals",o.SSAO="SSAO",o.HIGHLIGHTS="highlights",o.OPAQUE_EDGES="opaque edges",o.VOXEL="voxel",o.TRANSPARENT="transparent",o.TRANSPARENT_EDGES="transparent edges",o.HUD_VISIBILITY="HUD visibility",o.TRANSPARENT_TERRAIN="transparent terrain",o.TRANSPARENT_MATERIAL_WITHOUT_DEPTH="transparent material without depth",o.OPAQUE_ENVIRONMENT="opaque environment",o.TRANSPARENT_ENVIRONMENT="transparent environment",o.OCCLUDED="occluded",o.HUD="HUD",o.HUD_OCCLUDED="HUD occluded",o.FINISH="finish",o.FOCUS_AREA_MASK="focus area mask";const m=Object.values(a.RenderCategory).concat(Object.values(a.InternalRenderCategory)).concat(Object.values(e.PerformanceCategory)),l="Total";e.PerformanceCategories=m,e.RendererPerformanceInfo=class{constructor(e){this._rctx=e,this._startTimeStampCPU=i.Milliseconds(0),this._lastTimeStampCPU=i.Milliseconds(0),this._totalCPUTime=new r(l),this._cpuTimeSamplers=new Map(m.map((e=>[e,new r(e)]))),this._enableGPUTimer=0,this._totalGPUTime=new r("GPU"),this._gpuTimeSamplers=new Map(m.map((e=>[e,new r(e)]))),this._totalTime=i.Milliseconds(0),this._totalFrameCount=0}get totalCPUTimeSampler(){return this._totalCPUTime}get cpuTimeSamplers(){return Array.from(this._cpuTimeSamplers.values())}get totalGPUTimeSampler(){return this._totalGPUTime}get gpuTimeSamplers(){return Array.from(this._gpuTimeSamplers.values())}get gpuSamplingEnabled(){return null!=this._gpuTimerPool}get totalTime(){return this._totalTime}get totalFrameCount(){return this._totalFrameCount}get elapsedTime(){return i.Milliseconds(performance.now()-this._startTimeStampCPU)}enableGPUPerformanceInfo(){if(null==this._gpuTimerPool){const e=[...m,l];this._gpuTimerPool=s.createElapsedTimerPool(this._rctx,e)}if(null==this._gpuTimerPool)return{hasGPUTimerSupport:!1,remove:()=>{}};++this._enableGPUTimer;let e=!1;return{hasGPUTimerSupport:!0,remove:()=>{e||(e=!0,--this._enableGPUTimer,0===this._enableGPUTimer&&(this._gpuTimerPool=t.disposeMaybe(this._gpuTimerPool)))}}}startFrame(){this._startTimeStampCPU=this._lastTimeStampCPU=i.Milliseconds(performance.now()),this._gpuTimerPool&&(this._gpuTimeSamplers.forEach((e=>e.push(0))),this._gpuTimerPool.start())}advance(e){const t=i.Milliseconds(performance.now());if(this._cpuTimeSamplers.get(e).push(t-this._lastTimeStampCPU),this._lastTimeStampCPU=t,this._gpuTimerPool){const t=this._gpuTimerPool.stop(e);this._gpuTimeSamplers.get(e).set(t),this._gpuTimerPool.start()}}finishFrame(){if(this._gpuTimerPool){const t=this._gpuTimerPool.stop(e.PerformanceCategory.FINISH);this._gpuTimeSamplers.get(e.PerformanceCategory.FINISH).set(t),this._rctx.gl.flush()}const t=i.Milliseconds(performance.now()-this._startTimeStampCPU);this._totalTime=i.Milliseconds(this._totalTime+t),this._totalCPUTime.push(t),this._gpuTimerPool&&this._totalGPUTime.push(this.gpuTimeSamplers.reduce(((e,t)=>e+(t.last||0)),0)),++this._totalFrameCount}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));