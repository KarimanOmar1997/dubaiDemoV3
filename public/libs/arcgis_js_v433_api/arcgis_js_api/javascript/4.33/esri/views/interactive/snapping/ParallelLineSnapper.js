// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/libs/gl-matrix-2/math/vec2","../../../core/libs/gl-matrix-2/factories/vec2f64","../../../support/elevationInfoUtils","../sketch/normalizedPoint","./Settings","./SnappingAlgorithm","./snappingUtils","./candidates/ParallelLineSnappingCandidate","../support/viewUtils","../../support/geometry2dUtils"],(function(e,t,i,n,r,s,o,a,l,c,d){"use strict";class h extends o.SnappingAlgorithm{snapNewVertex(e,t){const i=t.editGeometryOperations.data.components[0],s=i.edges.length,o=i.vertices.length,l=[];if(s<2)return l;const{view:d}=this,h=c.vectorToScreenPoint(e,t.spatialReference,n.absoluteHeightElevationInfo,d),g=r.fromAnyMapPoint(i.vertices[o-1].pos,d,t),p=r.fromAnyMapPoint(i.vertices[0].pos,d,t),f=i.edges[s-1];let u=f;do{if(this.edgeExceedsShortLineThreshold(u,t)){const i=a.editEdgeToSnappingEdge(u,d,t);this._checkEdgeForParallelLines(i,g,e,h,t,l),this._checkEdgeForParallelLines(i,p,e,h,t,l)}u=u.leftVertex.leftEdge}while(u&&u!==f);return l}snapExistingVertex(e,t){const i=[],s=t.vertexHandle,o=s.component;if(o.edges.length<3)return i;const{view:l}=this,d=c.vectorToScreenPoint(e,t.spatialReference,n.absoluteHeightElevationInfo,l),h=s.leftEdge,g=s.rightEdge,p=o.vertices[0],f=r.fromAnyMapPoint(p.pos,l,t),u=o.vertices.length,P=o.vertices[u-1],v=r.fromAnyMapPoint(P.pos,l,t),V=o.edges[0];let m=V;do{if(m!==h&&m!==g&&this.edgeExceedsShortLineThreshold(m,t)){const n=a.editEdgeToSnappingEdge(m,l,t);h&&this._checkEdgeForParallelLines(n,r.fromAnyMapPoint(h.leftVertex.pos,l,t),e,d,t,i),g&&this._checkEdgeForParallelLines(n,r.fromAnyMapPoint(g.rightVertex.pos,l,t),e,d,t,i),s===p?this._checkEdgeForParallelLines(n,v,e,d,t,i):s===P&&this._checkEdgeForParallelLines(n,f,e,d,t,i)}m=m.rightVertex.rightEdge}while(m&&m!==V);return i}_checkEdgeForParallelLines(e,i,o,h,p,f){const u=e.left,P=e.right;if(d.projectPointToLine(g,r.asVec2(i),r.asVec2(u),r.asVec2(P)),t.squaredDistance(g,r.asVec2(i))<s.defaults.parallelLineThreshold)return;d.projectPointToLine(g,r.asVec2(o),r.asVec2(u),r.asVec2(P),r.asVec2(i));const{spatialReference:v,pointer:V}=p,m=r.markAsTarget(r.fromValues(g[0],g[1],o[2]));if(a.squaredScreenDistance(h,c.vectorToScreenPoint(m,v,n.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(V)){if(this.isVertical(m,i,p)||this.isVertical(u,P,p))return;if(function(e,i){const n=e.left,o=e.right;for(const a of i)if(d.projectPointToLine(g,r.asVec2(o),r.asVec2(a.constraint.start),r.asVec2(a.constraint.end),r.asVec2(n)),t.squaredDistance(g,r.asVec2(o))<s.defaults.parallelLineThreshold)return a.addReferenceLine(e),!0;return!1}(e,f))return;f.push(new l.ParallelLineSnappingCandidate({referenceLine:e,lineStart:i,targetPoint:m,isDraped:"on-the-ground"===p.elevationInfo?.mode}))}}}const g=i.create();e.ParallelLineSnapper=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));