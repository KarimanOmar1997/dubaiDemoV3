// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../core/has","../../core/Logger","../../core/maybe","./BufferObject","./checkWebGLError","./enums","./FBOAttachmentType","./Renderbuffer","./Texture"],(function(e,t,r,i,n,h,s,a,c,o){"use strict";class u{constructor(e,t,r){if(this._context=e,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,e.instanceCounter.increment(s.ResourceType.FramebufferObject,this),null!=t){const r=f(t)?t:new o.Texture(e,t);this._colorAttachments.set(s.ColorAttachment0,r),this._validateTextureDescriptor(r.descriptor),this._validateColorAttachmentPoint(s.ColorAttachment0)}var i;if(null!=r)if(f(i=r)||function(e){return l(e)===a.FBOAttachmentType.TextureDescriptor}(i))this._depthStencilTexture=f(r)?r:new o.Texture(e,r),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const t=function(e){return l(e)===a.FBOAttachmentType.Renderbuffer}(r)?r:new c.Renderbuffer(e,r);this._depthStencilBuffer=t,this._validateRenderbufferDescriptor(t.descriptor)}}dispose(){const{_colorAttachments:e,_glName:t}=this;if(0===e.size&&!this._depthStencilBuffer&&!this._depthStencilTexture&&!t)return;const{_context:r}=this,i=r.getBoundFramebufferObject();e.forEach(((e,t)=>this.detachColorTexture(t)?.dispose())),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),r.gl.deleteFramebuffer(t),this._glName=null,r.bindFramebuffer(i===this?null:i),r.instanceCounter.decrement(s.ResourceType.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(s.ColorAttachment0)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){const e=this._colorAttachments.get(s.ColorAttachment0)??this._depthStencilTexture??this._depthStencilBuffer;return e?.descriptor?.width??0}get height(){const e=this._colorAttachments.get(s.ColorAttachment0)??this._depthStencilTexture??this._depthStencilBuffer;return e?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce(((e,[t,r])=>e+r.usedMemory),this.depthStencil?.usedMemory??0)}static{this._MAX_COLOR_ATTACHMENTS=-1}getColorTexture(e){const t=this._colorAttachments.get(e);return t&&f(t)?t:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(e,t=s.ColorAttachment0){if(!e)return;this._validateColorAttachmentPoint(t);const{descriptor:r}=e;this._validateTextureDescriptor(r),this.detachColorTexture(t)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,t)),this._colorAttachments.set(t,e)}detachColorTexture(e=s.ColorAttachment0){const t=this._colorAttachments.get(e);if(t)return this._initialized&&this._context.temporaryBindFramebufferObject(this,(()=>{this._framebufferTexture2D(null,e)})),this._colorAttachments.delete(e),t}setColorTextureTarget(e,t=s.ColorAttachment0,r=0){const i=this._colorAttachments.get(t);i&&(e===s.TextureType.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(i.glName,t,s.FramebufferTarget.FRAMEBUFFER,0,r):this._framebufferTexture2D(i.glName,t,e,s.FramebufferTarget.FRAMEBUFFER,0))}attachDepthStencil(e){if(e)switch(e.type){case a.FBOAttachmentType.Texture:return this._attachDepthStencilTexture(e);case a.FBOAttachmentType.Renderbuffer:return this._attachDepthStencilBuffer(e)}}_attachDepthStencilTexture(e){if(null==e)return;const{descriptor:t}=e,{pixelFormat:r,dataType:i}=t;r===s.UnsizedDepthFormat.DEPTH_STENCIL||r===s.UnsizedDepthFormat.DEPTH_COMPONENT?r!==s.UnsizedDepthFormat.DEPTH_STENCIL||i===s.PixelType.UNSIGNED_INT_24_8?r!==s.UnsizedDepthFormat.DEPTH_COMPONENT||i===s.PixelType.UNSIGNED_INT||i===s.PixelType.UNSIGNED_SHORT?(this._validateTextureDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,d(r))),this._depthStencilTexture?.dispose(),this._depthStencilTexture=e):console.error("Depth texture must have data type of UNSIGNED_INT or UNSIGNED_SHORT!"):console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"):console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!")}detachDepthStencilTexture(){const e=this._depthStencilTexture;return e&&this._initialized&&this._context.temporaryBindFramebufferObject(this,(()=>{this._framebufferTexture2D(null,d(e.descriptor.pixelFormat))})),this._depthStencilTexture=null,e}_attachDepthStencilBuffer(e){if(null==e)return;const t=e.descriptor;if(this._validateRenderbufferDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const{gl:r}=this._context,i=this._getGLAttachmentPoint(t);r.framebufferRenderbuffer(s.FramebufferTarget.FRAMEBUFFER,i,r.RENDERBUFFER,e.glName)}this._depthStencilBuffer=e}detachDepthStencilBuffer(){const e=this._depthStencilBuffer;if(e&&this._initialized){const{_context:t}=this,r=t.getBoundFramebufferObject();t.bindFramebuffer(this);const{gl:i}=t,n=this._getGLAttachmentPoint(e.descriptor);i.framebufferRenderbuffer(s.FramebufferTarget.FRAMEBUFFER,n,i.RENDERBUFFER,null),t.bindFramebuffer(r)}return this._depthStencilBuffer=null,e}invalidateAttachments(e){const{_context:t}=this;t.temporaryBindFramebufferObject(this,(()=>t.gl.invalidateFramebuffer(s.FramebufferTarget.FRAMEBUFFER,e)),!0)}copyToTexture(e,t,r,i,n,h,a){(e<0||t<0||n<0||h<0)&&console.error("Offsets cannot be negative!"),(r<=0||i<=0)&&console.error("Copy width and height must be greater than zero!");const c=a.descriptor;a.descriptor.target!==s.TextureType.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(null==c?.width||null==c?.height||e+r>this.width||t+i>this.height||n+r>c.width||h+i>c.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,f=u.bindTexture(a,o.Texture.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(o.Texture.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(s.TextureType.TEXTURE_2D,0,n,h,e,t,r,i),u.bindTexture(f,o.Texture.TEXTURE_UNIT_FOR_UPDATES)}readPixels(e,t,r,i,n,h,s){(r<=0||i<=0)&&console.error("Copy width and height must be greater than zero!"),s||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(e,t,r,i,n,h,s)}async readPixelsAsync(e,t,r,i,h,a,c){const{gl:o}=this._context,u=n.BufferObject.createPixelPack(this._context,s.Usage.STREAM_READ,c.byteLength);this._context.bindBuffer(u);const f=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),o.readPixels(e,t,r,i,h,a,0),this._context.unbindBuffer(s.BufferType.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(f),await u.getSubDataAsync(c),u.dispose()}resize(e,t){if(this.width===e&&this.height===t)return;const r={width:e,height:t};_(r,this._context.parameters.maxTextureSize),this._colorAttachments.forEach((e=>e.resize(r.width,r.height))),this._depthStencilTexture?.resize(r.width,r.height),this._initialized&&(_(r,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(r.width,r.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(e=s.FramebufferTarget.FRAMEBUFFER){const{gl:t}=this._context;if(this._initialized)return void t.bindFramebuffer(e,this.glName);this._glName&&t.deleteFramebuffer(this._glName);const r=t.createFramebuffer();if(t.bindFramebuffer(e,r),this._colorAttachments.forEach(((t,r)=>{const i=T(t);i===s.TextureType.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(t.glName,r,e,0,0):this._framebufferTexture2D(t.glName,r,i,e)})),this._depthStencilBuffer){const r=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(e,r,t.RENDERBUFFER,this._depthStencilBuffer.glName)}else if(this._depthStencilTexture){const t=d(this._depthStencilTexture.descriptor.pixelFormat);this._framebufferTexture2D(this._depthStencilTexture.glName,t,T(this._depthStencilTexture),e)}h.webglDebugEnabled()&&t.checkFramebufferStatus(e)!==t.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=r,this._initialized=!0}_framebufferTexture2D(e,t=s.ColorAttachment0,r=s.TextureType.TEXTURE_2D,i=s.FramebufferTarget.FRAMEBUFFER,n=0){this._context.gl.framebufferTexture2D(i,t,r,e,n)}_framebufferTextureLayer(e,t=s.ColorAttachment0,r=s.FramebufferTarget.FRAMEBUFFER,i=0,n=0){this._context.gl.framebufferTextureLayer(r,t,e,i,n)}_disposeDepthStencilAttachments(){const e=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const t=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(s.FramebufferTarget.FRAMEBUFFER,t,e.RENDERBUFFER,null)}this._depthStencilBuffer=i.disposeMaybe(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,d(this._depthStencilTexture.descriptor.pixelFormat))),this._depthStencilTexture=i.disposeMaybe(this._depthStencilTexture))}_validateTextureDescriptor(e){e.target!==s.TextureType.TEXTURE_2D&&e.target!==s.TextureType.TEXTURE_CUBE_MAP&&e.target!==s.TextureType.TEXTURE_2D_ARRAY&&console.error("Texture type must be TEXTURE_2D, TEXTURE_2D_ARRAY or TEXTURE_CUBE_MAP!"),_(e,this._context.parameters.maxTextureSize),this._validateBufferDimensions(e)}_validateRenderbufferDescriptor(e){_(e,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(e)}_validateBufferDimensions(e){e.width<=0&&(e.width=this.width),e.height<=0&&(e.height=this.height),this.width>0&&this.height>0&&(this.width===e.width&&this.height===e.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(e){switch(e.internalFormat){case s.SizedDepthFormat.DEPTH_COMPONENT16:case s.SizedDepthFormat.DEPTH_COMPONENT24:case s.SizedDepthFormat.DEPTH_COMPONENT32F:return s.DepthAttachment;case s.SizedDepthStencilFormat.DEPTH24_STENCIL8:case s.SizedDepthStencilFormat.DEPTH32F_STENCIL8:return s.DepthStencilAttachment;case s.SizedStencilFormat.STENCIL_INDEX8:return s.StencilAttachment}}_validateColorAttachmentPoint(e){if(-1===u._MAX_COLOR_ATTACHMENTS){const{gl:e}=this._context;u._MAX_COLOR_ATTACHMENTS=e.getParameter(e.MAX_COLOR_ATTACHMENTS)}const t=e-s.ColorAttachment0;t+1>u._MAX_COLOR_ATTACHMENTS&&r.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${t+1}. Implementation supports up to ${u._MAX_COLOR_ATTACHMENTS} color attachments`)}}function f(e){return l(e)===a.FBOAttachmentType.Texture}function l(e){return null!=e&&"type"in e?e.type:null}function _(e,t){const i=Math.max(e.width,e.height);if(i>t){r.getLogger("esri.views.webgl.FramebufferObject").warnOnce(`Resizing FBO attachment size ${e.width}x${e.height} to device limit ${t}`);const n=t/i;return e.width=Math.round(e.width*n),e.height=Math.round(e.height*n),!1}return!0}function T(e){return e.descriptor.target===s.TextureType.TEXTURE_CUBE_MAP?s.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X:e.descriptor.target===s.TextureType.TEXTURE_2D_ARRAY?s.TextureType.TEXTURE_2D_ARRAY:s.TextureType.TEXTURE_2D}function d(e){return e===s.UnsizedDepthFormat.DEPTH_COMPONENT?s.DepthAttachment:s.DepthStencilAttachment}e.FramebufferObject=u,e.ensureAttachmentMaxSize=_,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));