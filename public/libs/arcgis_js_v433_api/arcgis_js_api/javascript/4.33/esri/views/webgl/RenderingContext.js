// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.33/esri/copyright.txt for details.
//>>built
define(["exports","../../core/has","../../core/maybe","../../core/promiseUtils","../../core/time","./checkWebGLError","./ContextState","./enums","./InstanceCounter","./Parameters","./ProgramCache","./renderState","./Texture","./Util","./WebGLDriverTest","./capabilities/Capabilities"],(function(e,t,s,i,a,r,n,l,f,h,u,o,c,d,_,b){"use strict";function F(e,t,s,i){return t?i!==t&&e.bindBuffer(s,t.glName):e.bindBuffer(s,null),t}function B(e,t){switch(e){case l.PrimitiveType.POINTS:return 2*t;case l.PrimitiveType.TRIANGLES:return t/3;case l.PrimitiveType.TRIANGLE_STRIP:case l.PrimitiveType.TRIANGLE_FAN:return t-2;default:return 0}}e.RenderingContext=class{constructor(e,t){this.gl=e,this.instanceCounter=new f.InstanceCounter,this.programCache=new u.ProgramCache(this),this._transformFeedbackRequestInfo=null,this._state=new n.ContextState,this._numOfDrawCalls=0,this._numOfTriangles=0,this.configure(t)}configure(e){this._capabilities=new b.Capabilities(this.gl,e),this._parameters=new h.Parameters(this.gl,this._capabilities,e),c.Texture.TEXTURE_UNIT_FOR_UPDATES=this._parameters.maxTextureImageUnits-1;const t=this.gl.getParameter(this.gl.VIEWPORT);this._state=new n.ContextState,this._state.viewport={x:t[0],y:t[1],width:t[2],height:t[3]},this._stateTracker=new o.StateTracker({setBlending:e=>{if(e){this.setBlendingEnabled(!0),this.setBlendEquationSeparate(e.opRgb,e.opAlpha),this.setBlendFunctionSeparate(e.srcRgb,e.dstRgb,e.srcAlpha,e.dstAlpha);const t=e.color;this.setBlendColor(t.r,t.g,t.b,t.a)}else this.setBlendingEnabled(!1)},setCulling:e=>{e?(this.setFaceCullingEnabled(!0),this.setCullFace(e.face),this.setFrontFace(e.mode)):this.setFaceCullingEnabled(!1)},setPolygonOffset:e=>{e?(this.setPolygonOffsetFillEnabled(!0),this.setPolygonOffset(e.factor,e.units)):this.setPolygonOffsetFillEnabled(!1)},setDepthTest:e=>{e?(this.setDepthTestEnabled(!0),this.setDepthFunction(e.func)):this.setDepthTestEnabled(!1)},setStencilTest:e=>{if(e){this.setStencilTestEnabled(!0);const t=e.function;this.setStencilFunction(t.func,t.ref,t.mask);const s=e.operation;this.setStencilOp(s.fail,s.zFail,s.zPass)}else this.setStencilTestEnabled(!1)},setDepthWrite:e=>{e?(this.setDepthWriteEnabled(!0),this.setDepthRange(e.zNear,e.zFar)):this.setDepthWriteEnabled(!1)},setColorWrite:e=>{e?this.setColorMask(e.r,e.g,e.b,e.a):this.setColorMask(!1,!1,!1,!1)},setStencilWrite:e=>{e?this.setStencilWriteMask(e.mask):this.setStencilWriteMask(0)},setDrawBuffers:e=>{if(e)this.setDrawBuffers(e.buffers);else{const{drawFramebuffer:e}=this._state;null===e?this.setDrawBuffers([l.SpecialDrawBuffers.BACK]):0===e.colorAttachments.length?this.setDrawBuffers([l.SpecialDrawBuffers.NONE]):this.setDrawBuffers([l.ColorAttachment0])}}}),this.enforceState(),s.disposeMaybe(this._driverTest),this._driverTest=new _.WebGLDriverTest(this)}updateOptions(e){this._parameters=new h.Parameters(this.gl,this._capabilities,e)}dispose(){s.disposeMaybe(this._driverTest),this.programCache.dispose(),this.bindVAO(null),this.unbindBuffer(l.BufferType.ARRAY_BUFFER),this.unbindBuffer(l.BufferType.ELEMENT_ARRAY_BUFFER),this.unbindBuffer(l.BufferType.UNIFORM_BUFFER),this._state.uniformBufferBindingPoints.length=0,this.unbindBuffer(l.BufferType.PIXEL_PACK_BUFFER),this.unbindBuffer(l.BufferType.PIXEL_UNPACK_BUFFER),this.unbindBuffer(l.BufferType.COPY_READ_BUFFER),this.unbindBuffer(l.BufferType.COPY_WRITE_BUFFER),this._state.textureUnitMap.length=0,r.webglDebugEnabled()&&console.log(this.instanceCounter.resourceInformation)}get driverTest(){return this._driverTest}get contextAttributes(){return this.gl.getContextAttributes()}get parameters(){return this._parameters}setPipelineState(e){this._stateTracker.setPipeline(e)}setBlendingEnabled(e){this._state.blend!==e&&(!0===e?this.gl.enable(this.gl.BLEND):this.gl.disable(this.gl.BLEND),this._state.blend=e,this._stateTracker.invalidateBlending())}externalProgramUpdate(){this._state.program?.stop(),this._state.program=null}externalTextureUnitUpdate(e,t){for(let t=0;t<e.length;++t)this._state.textureUnitMap[e[t]]=null;t>=0&&(this._state.activeTexture=t)}externalVertexArrayObjectUpdate(){this.gl.bindVertexArray(null),this._state.vertexArrayObject=null,this._state.vertexBuffer=null,this._state.indexBuffer=null}externalVertexBufferUpdate(){this._state.vertexBuffer=null}externalIndexBufferUpdate(){this._state.indexBuffer=null}setBlendColor(e,t,s,i){e===this._state.blendColor.r&&t===this._state.blendColor.g&&s===this._state.blendColor.b&&i===this._state.blendColor.a||(this.gl.blendColor(e,t,s,i),this._state.blendColor.r=e,this._state.blendColor.g=t,this._state.blendColor.b=s,this._state.blendColor.a=i,this._stateTracker.invalidateBlending())}setBlendFunction(e,t){e===this._state.blendFunction.srcRGB&&t===this._state.blendFunction.dstRGB||(this.gl.blendFunc(e,t),this._state.blendFunction.srcRGB=e,this._state.blendFunction.srcAlpha=e,this._state.blendFunction.dstRGB=t,this._state.blendFunction.dstAlpha=t,this._stateTracker.invalidateBlending())}setBlendFunctionSeparate(e,t,s,i){this._state.blendFunction.srcRGB===e&&this._state.blendFunction.srcAlpha===s&&this._state.blendFunction.dstRGB===t&&this._state.blendFunction.dstAlpha===i||(this.gl.blendFuncSeparate(e,t,s,i),this._state.blendFunction.srcRGB=e,this._state.blendFunction.srcAlpha=s,this._state.blendFunction.dstRGB=t,this._state.blendFunction.dstAlpha=i,this._stateTracker.invalidateBlending())}setBlendEquation(e){this._state.blendEquation.mode!==e&&(this.gl.blendEquation(e),this._state.blendEquation.mode=e,this._state.blendEquation.modeAlpha=e,this._stateTracker.invalidateBlending())}setBlendEquationSeparate(e,t){this._state.blendEquation.mode===e&&this._state.blendEquation.modeAlpha===t||(this.gl.blendEquationSeparate(e,t),this._state.blendEquation.mode=e,this._state.blendEquation.modeAlpha=t,this._stateTracker.invalidateBlending())}setColorMask(e,t,s,i){this._state.colorMask.r===e&&this._state.colorMask.g===t&&this._state.colorMask.b===s&&this._state.colorMask.a===i||(this.gl.colorMask(e,t,s,i),this._state.colorMask.r=e,this._state.colorMask.g=t,this._state.colorMask.b=s,this._state.colorMask.a=i,this._stateTracker.invalidateColorWrite())}setClearColor(e,t,s,i){this._state.clearColor.r===e&&this._state.clearColor.g===t&&this._state.clearColor.b===s&&this._state.clearColor.a===i||(this.gl.clearColor(e,t,s,i),this._state.clearColor.r=e,this._state.clearColor.g=t,this._state.clearColor.b=s,this._state.clearColor.a=i)}setFaceCullingEnabled(e){this._state.faceCulling!==e&&(!0===e?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this._state.faceCulling=e,this._stateTracker.invalidateCulling())}setPolygonOffsetFillEnabled(e){this._state.polygonOffsetFill!==e&&(!0===e?this.gl.enable(this.gl.POLYGON_OFFSET_FILL):this.gl.disable(this.gl.POLYGON_OFFSET_FILL),this._state.polygonOffsetFill=e,this._stateTracker.invalidatePolygonOffset())}setPolygonOffset(e,t){this._state.polygonOffset[0]===e&&this._state.polygonOffset[1]===t||(this._state.polygonOffset[0]=e,this._state.polygonOffset[1]=t,this.gl.polygonOffset(e,t),this._stateTracker.invalidatePolygonOffset())}setCullFace(e){this._state.cullFace!==e&&(this.gl.cullFace(e),this._state.cullFace=e,this._stateTracker.invalidateCulling())}setFrontFace(e){this._state.frontFace!==e&&(this.gl.frontFace(e),this._state.frontFace=e,this._stateTracker.invalidateCulling())}setScissorTestEnabled(e){this._state.scissorTest!==e&&(!0===e?this.gl.enable(this.gl.SCISSOR_TEST):this.gl.disable(this.gl.SCISSOR_TEST),this._state.scissorTest=e)}setScissorRect(e,t,s,i){this._state.scissorRect.x===e&&this._state.scissorRect.y===t&&this._state.scissorRect.width===s&&this._state.scissorRect.height===i||(this.gl.scissor(e,t,s,i),this._state.scissorRect.x=e,this._state.scissorRect.y=t,this._state.scissorRect.width=s,this._state.scissorRect.height=i)}setDepthTestEnabled(e){this._state.depthTest!==e&&(!0===e?this.gl.enable(this.gl.DEPTH_TEST):this.gl.disable(this.gl.DEPTH_TEST),this._state.depthTest=e,this._stateTracker.invalidateDepthTest())}setClearDepth(e){this._state.clearDepth!==e&&(this.gl.clearDepth(e),this._state.clearDepth=e)}setDepthFunction(e){this._state.depthFunction!==e&&(this.gl.depthFunc(e),this._state.depthFunction=e,this._stateTracker.invalidateDepthTest())}setDepthWriteEnabled(e){this._state.depthWrite!==e&&(this.gl.depthMask(e),this._state.depthWrite=e,this._stateTracker.invalidateDepthWrite())}setDepthRange(e,t){this._state.depthRange.zNear===e&&this._state.depthRange.zFar===t||(this.gl.depthRange(e,t),this._state.depthRange.zNear=e,this._state.depthRange.zFar=t,this._stateTracker.invalidateDepthWrite())}setStencilTestEnabled(e){this._state.stencilTest!==e&&(!0===e?this.gl.enable(this.gl.STENCIL_TEST):this.gl.disable(this.gl.STENCIL_TEST),this._state.stencilTest=e,this._stateTracker.invalidateStencilTest())}setClearStencil(e){e!==this._state.clearStencil&&(this.gl.clearStencil(e),this._state.clearStencil=e)}setStencilFunction(e,t,s){this._state.stencilFunction.func===e&&this._state.stencilFunction.ref===t&&this._state.stencilFunction.mask===s||(this.gl.stencilFunc(e,t,s),this._state.stencilFunction.face=l.Face.FRONT_AND_BACK,this._state.stencilFunction.func=e,this._state.stencilFunction.ref=t,this._state.stencilFunction.mask=s,this._stateTracker.invalidateStencilTest())}setStencilFunctionSeparate(e,t,s,i){this._state.stencilFunction.face===e&&this._state.stencilFunction.func===t&&this._state.stencilFunction.ref===s&&this._state.stencilFunction.mask===i||(this.gl.stencilFuncSeparate(e,t,s,i),this._state.stencilFunction.face=e,this._state.stencilFunction.func=t,this._state.stencilFunction.ref=s,this._state.stencilFunction.mask=i,this._stateTracker.invalidateStencilTest())}setStencilWriteMask(e){this._state.stencilWriteMask!==e&&(this.gl.stencilMask(e),this._state.stencilWriteMask=e,this._stateTracker.invalidateStencilWrite())}setStencilOp(e,t,s){this._state.stencilOperation.face===l.Face.FRONT_AND_BACK&&this._state.stencilOperation.fail===e&&this._state.stencilOperation.zFail===t&&this._state.stencilOperation.zPass===s||(this.gl.stencilOp(e,t,s),this._state.stencilOperation.face=l.Face.FRONT_AND_BACK,this._state.stencilOperation.fail=e,this._state.stencilOperation.zFail=t,this._state.stencilOperation.zPass=s,this._stateTracker.invalidateStencilTest())}setStencilOpSeparate(e,t,s,i){this._state.stencilOperation.face===e&&this._state.stencilOperation.fail===t&&this._state.stencilOperation.zFail===s&&this._state.stencilOperation.zPass===i||(this.gl.stencilOpSeparate(e,t,s,i),this._state.stencilOperation.face=e,this._state.stencilOperation.fail=t,this._state.stencilOperation.zFail=s,this._state.stencilOperation.zPass=i,this._stateTracker.invalidateStencilTest())}setActiveTexture(e,t=!1){const s=this._state.activeTexture;return e>=0&&(t||e!==this._state.activeTexture)&&(this.gl.activeTexture(l.baseTextureUnit+e),this._state.activeTexture=e),s}setDrawBuffers(e){const{drawFramebuffer:t}=this._state,s=null===t,i=s?this._state.drawBuffers.defaultFramebuffer:this._state.drawBuffers.fbos.get(t);if(i?.length!==e.length||!i.every(((t,s)=>t===e[s])))if(e.length>this.parameters.maxDrawBuffers)console.error("Setting more active draw buffers than GL.MAX_DRAW_BUFFERS allows.");else{if(s){if(e.length>1)return void console.error("The default framebuffer can only have one active draw buffer.");if(e[0]!==l.SpecialDrawBuffers.BACK&&e[0]!==l.SpecialDrawBuffers.NONE)return void console.error("The default framebuffer can only use the constants GL.BACK or GL.NONE as draw buffers.")}s||!e.includes(l.SpecialDrawBuffers.BACK)?(this.gl.drawBuffers(e),s?this._state.drawBuffers.defaultFramebuffer=e:this._state.drawBuffers.fbos.set(t,e),this._stateTracker.invalidateDrawBuffers()):console.error("A framebuffer object can only use the constants GL.COLOR_ATTACHMENTi or GL.NONE as draw buffers.")}}clear(e,t=255){if(e){if(e&l.FramebufferBit.COLOR){const e=this._state.drawFramebuffer?.colorAttachments;e&&this.setDrawBuffers(e),this.setColorMask(!0,!0,!0,!0)}e&l.FramebufferBit.DEPTH&&this.setDepthWriteEnabled(!0),e&l.FramebufferBit.STENCIL&&this.setStencilWriteMask(t),this.gl.clear(e)}}clearFramebuffer(e,t=!1,s=!1){let i=0;if(e){const t=1e-13,s=Math.max(t,e[3]);this.setClearColor(e[0],e[1],e[2],s),i|=l.FramebufferBit.COLOR}t&&(i|=l.FramebufferBit.DEPTH),!1===s?s=0:(!0===s&&(s=255),i|=l.FramebufferBit.STENCIL),i&&this.clear(i,s)}clearBuffer(e,t,s=l.BufferContent.COLOR,i=void 0){this.gl.clearBufferfv(s,e,t,i)}clearBufferInteger(e,t,s=l.BufferContent.COLOR,i=void 0){this.gl.clearBufferiv(s,e,t,i)}clearBufferUnsignedInteger(e,t,s=l.BufferContent.COLOR,i=void 0){this.gl.clearBufferuiv(s,e,t,i)}drawArrays(e,s,i){if(this._transformFeedbackRequestInfo){if(e!==this._transformFeedbackRequestInfo.primitiveType)throw new Error("DrawArrays called during transform feedback, but primitiveType does not match that of the current transform feedback request");if(null==this._state.program?.hasTransformFeedbackVaryings)throw new Error("DrawArrays called during transform feedback, but the shader program was not linked with a transform feedback varying")}if(r.webglDebugEnabled()&&(this._numOfDrawCalls++,this._numOfTriangles+=B(e,i),t("enable-feature:webgl-debug:textureReadWrite"))){const e=this._state.textureUnitMap;for(let t=0;t<e.length;t++){const s=e[t];if(null!=s&&s===this._state.drawFramebuffer?.colorTexture)throw new Error(`Detected readWrite. Texture already bound at index ${t}`)}}this.gl.drawArrays(e,s,i),r.checkWebGLError(this.gl)}drawArraysInstanced(e,t,s,i){this.gl.drawArraysInstanced(e,t,s,i),r.checkWebGLError(this.gl)}drawElements(e,t,s,i){if(this._transformFeedbackRequestInfo)throw new Error("Cannot called drawElements during a transform feedback request");if(r.webglDebugEnabled()&&(this._numOfDrawCalls++,this._numOfTriangles+=B(e,t)),this.gl.drawElements(e,t,s,i),r.webglDebugEnabled()){const a=d.getErrorString(this);if(a){const r=this.getBoundVAO(),n=r?.indexBuffer,l=r?.vertexBuffers,f={indexBuffer:n,vertexBuffers:l},h={mode:e,count:t,type:s,offset:i},u=n?.size??0,o=i+t,c=u<o?`. Buffer is too small. Attempted to draw index ${o} of ${u}`:"";console.error(`drawElements: ${a}${c}`,{args:h,vao:f})}}}drawElementsInstanced(e,t,s,i,a){this.gl.drawElementsInstanced(e,t,s,i,a),r.checkWebGLError(this.gl)}logInfo(){r.webglDebugEnabled()&&console.log(`DrawCalls: ${this._numOfDrawCalls}, Triangles: ${this._numOfTriangles}`)}resetInfo(){r.webglDebugEnabled()&&(this._numOfDrawCalls=0,this._numOfTriangles=0)}get capabilities(){return this._capabilities}setViewport(e,t,s,i){s=Math.max(Math.round(s),1),i=Math.max(Math.round(i),1);const a=this._state.viewport;a.x===e&&a.y===t&&a.width===s&&a.height===i||(a.x=e,a.y=t,a.width=s,a.height=i,this.gl.viewport(e,t,s,i))}setViewport4fv(e){this.setViewport(e[0],e[1],e[2],e[3])}restoreViewport({x:e,y:t,width:s,height:i}){this.setViewport(e,t,s,i)}getViewport(){const e=this._state.viewport;return{x:e.x,y:e.y,width:e.width,height:e.height}}useProgram(e){this._state.program!==e&&(this._state.program?.stop(),this._state.program=e,this.gl.useProgram(e?.glName??null))}bindTexture(e,t,s=!1){(t>=this.parameters.maxTextureImageUnits||t<0)&&console.error("Input texture unit is out of range of available units!");const i=this._state.textureUnitMap[t];return null==e?.glName?(null!=i&&(this.setActiveTexture(t,s),this.gl.bindTexture(i.descriptor.target,null)),this._state.textureUnitMap[t]=null,i):s||i!==e?(this.setActiveTexture(t,s),this.gl.bindTexture(e.descriptor.target,e.glName),e.applyChanges(),this._state.textureUnitMap[t]=e,i):(e.isDirty&&(this.setActiveTexture(t,s),e.applyChanges()),i)}unbindTexture(e){if(null!=e)for(let t=0;t<this.parameters.maxTextureImageUnits;t++)this._state.textureUnitMap[t]===e&&(this.bindTexture(null,t),this._state.textureUnitMap[t]=null)}bindFramebuffer(e,t=!1){if(t||this._state.readFramebuffer!==e||this._state.drawFramebuffer!==e){if(this._stateTracker.invalidateDrawBuffers(),null==e)return this.gl.bindFramebuffer(l.FramebufferTarget.FRAMEBUFFER,null),void(this._state.readFramebuffer=this._state.drawFramebuffer=null);e.initializeAndBind(l.FramebufferTarget.FRAMEBUFFER),this._state.readFramebuffer=e,this._state.drawFramebuffer=e}}bindFramebufferSeparate(e,t,s=!1){const i=t===l.FramebufferTarget.READ_FRAMEBUFFER,a=i?this._state.readFramebuffer:this._state.drawFramebuffer;(s||a!==e)&&(null==e?this.gl.bindFramebuffer(t,null):e.initializeAndBind(t),i?this._state.readFramebuffer=e??null:(this._stateTracker.invalidateDrawBuffers(),this._state.drawFramebuffer=e??null))}blitFramebuffer(e,t,s=l.FramebufferBit.COLOR,i=l.TextureSamplingMode.NEAREST,a=0,r=0,n=e.width,f=e.height,h=0,u=0,o=t.width,c=t.height){this.bindFramebufferSeparate(e,l.FramebufferTarget.READ_FRAMEBUFFER,!0),this.bindFramebufferSeparate(t,l.FramebufferTarget.DRAW_FRAMEBUFFER,!0),this.gl.blitFramebuffer(a,r,n,f,h,u,o,c,s,i)}bindBuffer(e,t){if(e)switch(t??=e.bufferType,t){case l.BufferType.ARRAY_BUFFER:this._state.vertexBuffer=F(this.gl,e,t,this._state.vertexBuffer);break;case l.BufferType.ELEMENT_ARRAY_BUFFER:this._state.indexBuffer=F(this.gl,e,t,this._state.indexBuffer);break;case l.BufferType.UNIFORM_BUFFER:this._state.uniformBuffer=F(this.gl,e,t,this._state.uniformBuffer);break;case l.BufferType.PIXEL_PACK_BUFFER:this._state.pixelPackBuffer=F(this.gl,e,t,this._state.pixelPackBuffer);break;case l.BufferType.PIXEL_UNPACK_BUFFER:this._state.pixelUnpackBuffer=F(this.gl,e,t,this._state.pixelUnpackBuffer);break;case l.BufferType.COPY_READ_BUFFER:this._state.copyReadBuffer=F(this.gl,e,t,this._state.copyReadBuffer);break;case l.BufferType.COPY_WRITE_BUFFER:this._state.copyWriteBuffer=F(this.gl,e,t,this._state.copyWriteBuffer);break;case l.BufferType.TRANSFORM_FEEDBACK_BUFFER:this._state.transformFeedbackBuffer=F(this.gl,e,t,this._state.transformFeedbackBuffer)}}bindRenderbuffer(e){const t=this.gl;e||(t.bindRenderbuffer(t.RENDERBUFFER,null),this._state.renderbuffer=null),this._state.renderbuffer!==e&&(t.bindRenderbuffer(t.RENDERBUFFER,e.glName),this._state.renderbuffer=e)}_getBufferBinding(e,t){if(t>=this.parameters.maxUniformBufferBindings||t<0)return console.error("Uniform buffer binding point is out of range!"),null;const s=e===l.BufferType.UNIFORM_BUFFER?this._state.uniformBufferBindingPoints:this._state.transformBufferBindingPoints;let i=s[t];return null==i&&(i={buffer:null,offset:0,size:0},s[t]=i),i}bindBufferBase(e,t,s){const i=this._getBufferBinding(e,t);null!=i&&(i.buffer===s&&0===i.offset&&0===i.size||(this.gl.bindBufferBase(e,t,s?s.glName:null),i.buffer=s,i.offset=0,i.size=0))}bindBufferRange(e,t,s,i,a){const r=this._getBufferBinding(e,t);null!=r&&(r.buffer===s&&r.offset===i&&r.size===a||(i%this._parameters.uniformBufferOffsetAlignment===0?(this.gl.bindBufferRange(e,t,s.glName,i,a),r.buffer=s,r.offset=i,r.size=a):console.error("Uniform buffer binding offset is not a multiple of the context offset alignment")))}bindUBO(e,t,s,i){null!=t?(r.webglDebugEnabled()&&(i??t.byteLength)>this._parameters.maxUniformBlockSize&&console.error("Attempting to bind more data than the maximum uniform block size"),t.initialize(),void 0!==s&&void 0!==i?this.bindBufferRange(l.BufferType.UNIFORM_BUFFER,e,t.buffer,s,i):this.bindBufferBase(l.BufferType.UNIFORM_BUFFER,e,t.buffer)):this.bindBufferBase(l.BufferType.UNIFORM_BUFFER,e,null)}unbindUBO(e){for(let t=0,s=this._state.uniformBufferBindingPoints.length;t<s;t++){const s=this._state.uniformBufferBindingPoints[t];null!=s&&s.buffer===e.buffer&&this.bindBufferBase(l.BufferType.UNIFORM_BUFFER,t,null)}}unbindBuffer(e){switch(e){case l.BufferType.ARRAY_BUFFER:this._state.vertexBuffer=F(this.gl,null,e,this._state.vertexBuffer);break;case l.BufferType.ELEMENT_ARRAY_BUFFER:this._state.indexBuffer=F(this.gl,null,e,this._state.indexBuffer);break;case l.BufferType.UNIFORM_BUFFER:this._state.uniformBuffer=F(this.gl,null,e,this._state.uniformBuffer);break;case l.BufferType.PIXEL_PACK_BUFFER:this._state.pixelPackBuffer=F(this.gl,null,e,this._state.pixelPackBuffer);break;case l.BufferType.PIXEL_UNPACK_BUFFER:this._state.pixelUnpackBuffer=F(this.gl,null,e,this._state.pixelUnpackBuffer);break;case l.BufferType.COPY_READ_BUFFER:this._state.copyReadBuffer=F(this.gl,null,e,this._state.copyReadBuffer);break;case l.BufferType.COPY_WRITE_BUFFER:this._state.copyWriteBuffer=F(this.gl,null,e,this._state.copyWriteBuffer)}}bindVAO(e=null){null!=e?this._state.vertexArrayObject!==e&&(e.bind(),this._state.vertexArrayObject=e):this._state.vertexArrayObject&&(this._state.vertexArrayObject.unbind(),this._state.vertexArrayObject=null)}bindTransformFeedback(e){const{gl:t}=this;t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,e.glName)}beginTransformFeedback(e,t){if(this._transformFeedbackRequestInfo)throw new Error("Already in a transform feedback request");const{gl:s}=this;s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,e.glName),s.beginTransformFeedback(t),this._transformFeedbackRequestInfo={primitiveType:t}}endTransformFeedback(){if(!this._transformFeedbackRequestInfo)throw new Error("Not in a transform feedback request");const{gl:e}=this;e.endTransformFeedback(),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,null),this._transformFeedbackRequestInfo=null}async clientWaitAsync(e=a.Milliseconds(10)){const{gl:t}=this,s=t.fenceSync(l.SyncCondition.SYNC_GPU_COMMANDS_COMPLETE,0);if(!s)throw new Error("Client wait failed, could not create sync object");let r;this.instanceCounter.increment(l.ResourceType.Sync,s),t.flush();do{await i.after(e),r=t.clientWaitSync(s,0,0)}while(r===l.ClientWaitSyncStatus.TIMEOUT_EXPIRED);if(this.instanceCounter.decrement(l.ResourceType.Sync,s),t.deleteSync(s),r===l.ClientWaitSyncStatus.WAIT_FAILED)throw new Error("Client wait failed")}getBoundFramebufferObject(e=l.FramebufferTarget.FRAMEBUFFER){return e===l.FramebufferTarget.READ_FRAMEBUFFER?this._state.readFramebuffer:this._state.drawFramebuffer}temporaryBindFramebufferObject(e,t,s=!1){const i=this.getBoundFramebufferObject();try{this.bindFramebuffer(e,s),t()}finally{this.bindFramebuffer(i,s)}}getBoundVAO(){return this._state.vertexArrayObject}resetState(){this.useProgram(null),this.bindVAO(null),this.bindFramebuffer(null,!0),this.unbindBuffer(l.BufferType.ARRAY_BUFFER),this.unbindBuffer(l.BufferType.ELEMENT_ARRAY_BUFFER),this.unbindBuffer(l.BufferType.UNIFORM_BUFFER),this._state.uniformBufferBindingPoints.length=0,this.unbindBuffer(l.BufferType.PIXEL_PACK_BUFFER),this.unbindBuffer(l.BufferType.PIXEL_UNPACK_BUFFER),this.unbindBuffer(l.BufferType.COPY_READ_BUFFER),this.unbindBuffer(l.BufferType.COPY_WRITE_BUFFER);for(let e=0;e<this.parameters.maxTextureImageUnits;++e)this.bindTexture(null,e);this.setBlendingEnabled(!1),this.setBlendFunction(l.BlendFactor.ONE,l.BlendFactor.ZERO),this.setBlendEquation(l.BlendOperation.ADD),this.setBlendColor(0,0,0,0),this.setFaceCullingEnabled(!1),this.setCullFace(l.Face.BACK),this.setFrontFace(l.CullMode.CCW),this.setPolygonOffsetFillEnabled(!1),this.setPolygonOffset(0,0),this.setScissorTestEnabled(!1),this.setScissorRect(0,0,this.gl.canvas.width,this.gl.canvas.height),this.setDepthTestEnabled(!1),this.setDepthFunction(l.CompareFunction.LESS),this.setDepthRange(0,1),this.setStencilTestEnabled(!1),this.setStencilFunction(l.CompareFunction.ALWAYS,0,0),this.setStencilOp(l.StencilOperation.KEEP,l.StencilOperation.KEEP,l.StencilOperation.KEEP),this.setClearColor(0,0,0,0),this.setClearDepth(1),this.setClearStencil(0),this.setColorMask(!0,!0,!0,!0),this.setStencilWriteMask(4294967295),this.setDepthWriteEnabled(!0),this.setDrawBuffers([l.SpecialDrawBuffers.BACK]),this.setViewport(0,0,this.gl.canvas.width,this.gl.canvas.height)}enforceState(){const{gl:e}=this;e.bindVertexArray(null);for(let t=0;t<this.parameters.maxVertexAttributes;t++)e.disableVertexAttribArray(t);this._state.vertexBuffer?e.bindBuffer(this._state.vertexBuffer.bufferType,this._state.vertexBuffer.glName):e.bindBuffer(l.BufferType.ARRAY_BUFFER,null),this._state.indexBuffer?e.bindBuffer(this._state.indexBuffer.bufferType,this._state.indexBuffer.glName):e.bindBuffer(l.BufferType.ELEMENT_ARRAY_BUFFER,null),this._state.uniformBuffer?e.bindBuffer(this._state.uniformBuffer.bufferType,this._state.uniformBuffer.glName):e.bindBuffer(l.BufferType.UNIFORM_BUFFER,null);for(let t=0;t<this._parameters.maxUniformBufferBindings;t++){const s=this._state.uniformBufferBindingPoints[t];if(null!=s){const{buffer:i,offset:a,size:r}=s;null!==i?0===a&&0===r?e.bindBufferBase(l.BufferType.UNIFORM_BUFFER,t,i.glName):e.bindBufferRange(l.BufferType.UNIFORM_BUFFER,t,i.glName,a,r):e.bindBufferBase(l.BufferType.UNIFORM_BUFFER,t,null)}}if(this._state.pixelPackBuffer?e.bindBuffer(this._state.pixelPackBuffer.bufferType,this._state.pixelPackBuffer.glName):e.bindBuffer(l.BufferType.PIXEL_PACK_BUFFER,null),this._state.pixelUnpackBuffer?e.bindBuffer(this._state.pixelUnpackBuffer.bufferType,this._state.pixelUnpackBuffer.glName):e.bindBuffer(l.BufferType.PIXEL_UNPACK_BUFFER,null),this._state.copyReadBuffer?e.bindBuffer(this._state.copyReadBuffer.bufferType,this._state.copyReadBuffer.glName):e.bindBuffer(l.BufferType.COPY_READ_BUFFER,null),this._state.copyWriteBuffer?e.bindBuffer(this._state.copyWriteBuffer.bufferType,this._state.copyWriteBuffer.glName):e.bindBuffer(l.BufferType.COPY_WRITE_BUFFER,null),e.bindFramebuffer(l.FramebufferTarget.READ_FRAMEBUFFER,null),e.readBuffer(e.BACK),this._state.readFramebuffer&&(e.bindFramebuffer(l.FramebufferTarget.READ_FRAMEBUFFER,this._state.readFramebuffer.glName),e.readBuffer(l.ColorAttachment0)),e.bindFramebuffer(l.FramebufferTarget.DRAW_FRAMEBUFFER,this._state.drawFramebuffer?.glName??null),null===this._state.drawFramebuffer){const t=this._state.drawBuffers.defaultFramebuffer;e.drawBuffers(t??[l.SpecialDrawBuffers.BACK])}else{const t=this._state.drawBuffers.fbos.get(this._state.drawFramebuffer);e.drawBuffers(t??[l.ColorAttachment0])}if(this._state.vertexArrayObject){const e=this._state.vertexArrayObject;this._state.vertexArrayObject&&(this._state.vertexArrayObject.unbind(),this._state.vertexArrayObject=null),this.bindVAO(e)}e.useProgram(this._state.program?.glName??null),e.blendColor(this._state.blendColor.r,this._state.blendColor.g,this._state.blendColor.b,this._state.blendColor.a),e.bindRenderbuffer(e.RENDERBUFFER,this._state.renderbuffer?.glName??null),!0===this._state.blend?e.enable(this.gl.BLEND):e.disable(this.gl.BLEND),e.blendEquationSeparate(this._state.blendEquation.mode,this._state.blendEquation.modeAlpha),e.blendFuncSeparate(this._state.blendFunction.srcRGB,this._state.blendFunction.dstRGB,this._state.blendFunction.srcAlpha,this._state.blendFunction.dstAlpha),e.clearColor(this._state.clearColor.r,this._state.clearColor.g,this._state.clearColor.b,this._state.clearColor.a),e.clearDepth(this._state.clearDepth),e.clearStencil(this._state.clearStencil),e.colorMask(this._state.colorMask.r,this._state.colorMask.g,this._state.colorMask.b,this._state.colorMask.a),e.cullFace(this._state.cullFace),e.depthFunc(this._state.depthFunction),e.depthRange(this._state.depthRange.zNear,this._state.depthRange.zFar),!0===this._state.depthTest?e.enable(e.DEPTH_TEST):e.disable(e.DEPTH_TEST),e.depthMask(this._state.depthWrite),e.frontFace(this._state.frontFace),e.lineWidth(1),!0===this._state.faceCulling?e.enable(e.CULL_FACE):e.disable(e.CULL_FACE),e.polygonOffset(this._state.polygonOffset[0],this._state.polygonOffset[1]),!0===this._state.polygonOffsetFill?e.enable(e.POLYGON_OFFSET_FILL):e.disable(e.POLYGON_OFFSET_FILL),e.scissor(this._state.scissorRect.x,this._state.scissorRect.y,this._state.scissorRect.width,this._state.scissorRect.height),!0===this._state.scissorTest?e.enable(e.SCISSOR_TEST):e.disable(e.SCISSOR_TEST),e.stencilFunc(this._state.stencilFunction.func,this._state.stencilFunction.ref,this._state.stencilFunction.mask),e.stencilOpSeparate(this._state.stencilOperation.face,this._state.stencilOperation.fail,this._state.stencilOperation.zFail,this._state.stencilOperation.zPass),!0===this._state.stencilTest?e.enable(e.STENCIL_TEST):e.disable(e.STENCIL_TEST),e.stencilMask(this._state.stencilWriteMask);for(let t=0;t<this.parameters.maxTextureImageUnits;t++){e.activeTexture(l.baseTextureUnit+t),e.bindTexture(l.TextureType.TEXTURE_2D,null),e.bindTexture(l.TextureType.TEXTURE_CUBE_MAP,null),e.bindTexture(l.TextureType.TEXTURE_3D,null),e.bindTexture(l.TextureType.TEXTURE_2D_ARRAY,null);const s=this._state.textureUnitMap[t];null!=s&&e.bindTexture(s.descriptor.target,s.glName)}e.activeTexture(l.baseTextureUnit+this._state.activeTexture);const t=this._state.viewport;e.viewport(t.x,t.y,t.width,t.height),this.resetInfo()}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));